registryCredentials:
  enabled: true
  registry: {{HelmRegistry}}
  username: {{HelmRepoUser}}
  password: {{HelmRepoPassword}}

starburstPlatformLicense: {{license}}

# How the starburst service will be exposed.
expose:
  {% if IngressLoadBalancer %}
  type: "ingress"
  ingress:
    tls:
      enabled: true
    host: {{StarburstHost}}
    {% if Target == "gcs" %}
    path: "/*"
    {% endif %}
    {% if Target == "aws" %}
    annotations:
      kubernetes.io/ingress.class: nginx
    {% elif Target == "gcp" %}
    gcpBackendConfig:
      name: hc-config
      url: /v1/info
      port: 8080
    annotations:
      kubernetes.io/ingress.class: "gce-internal"
      kubernetes.io/ingress.regional-static-ip-name: {{starburst_address_name}}
      kubernetes.io/ingress.allow-http: "false"
    {% endif %}
  {% else %}
  type: loadBalancer
  loadBalancer:
    # NOTE AWS doesn't support specifying a static IP address for LBs
    {% if Target != "aws" %}
    IP: {{starburst_address | string}}
    {% endif %}
    ports:
      {% if TlsEnabled %}
      https:
        port: 8443
      http: null
      {% else %}
      http:
        port: 8080
      https: null
      {% endif %}
    annotations:
      {% if Target == "aws" %}
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      {% elif Target == "az" %}
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      {% elif Target == "gcp" %}
      networking.gke.io/load-balancer-type: "Internal"
      {% endif %}
  {% endif %}

# Shared secret for internal communication.
sharedSecret: secretRef:{{sharedsec}}:{{sharedsecbf}}

warpSpeed:
  enabled: true

coordinator:
  # The following gives the SEP Pod Permission to access the local K8S worker's SSDs.
  securityContext:
    privileged: true
  additionalProperties: |
    scheduler.http-client.max-requests-queued-per-destination=16384
    #
    # BIAC settings
    #
    starburst.access-control.enabled=true
    starburst.access-control.audit.enabled=true
    starburst.access-control.authorized-users=starburst_service
    starburst.access-control.authorized-groups=superusers
    starburst.audit.access-log.enabled=true
    #
    # Needed for Warp
    #
    node-scheduler.include-coordinator=false
    node-scheduler.max-splits-per-node=4096
    node-scheduler.max-unacknowledged-splits-per-task=1024
    node-scheduler.max-adjusted-pending-splits-per-task=1024
    #
    # Data Products settings
    #
    starburst.data-product.enabled=true
    data-product.starburst-user=starburst_service
    {% if TlsEnabled %}
    data-product.starburst-password=test
    data-product.starburst-jdbc-url=jdbc:trino://{{StarburstHost}}:8443?SSL=true&roles=system:sysadmin
    {% else %}
    data-product.starburst-jdbc-url=jdbc:trino://{{StarburstHost}}:8080?roles=system:sysadmin
    {% endif %}
    {% if IngressLoadBalancer %}
    # These two have to be here because (i) we need to accept headers from
    # the LB promising us that the channel prior to the LB was encrypted,
    # and (ii) because between the LB and Starburst, the communications
    # will include passwords but will be in the clear.
    http-server.process-forwarded=true
    http-server.authentication.allow-insecure-over-http=true
    {% endif %}
    {% if TlsEnabled %}
    # TLS for coordinator only
    http-server.https.enabled=true
    http-server.https.keystore.path=secretRef:{{starburstks}}:{{starburstksbf}}
    http-server.https.keystore.key={{KeystorePass}}
    {% endif %}
    insights.persistence-enabled=true
    insights.metrics-persistence-enabled=true
    insights.jdbc.url=jdbc:postgresql://{{evtlog_address}}:{{postgres_port}}/{{DBNameEventLogger}}
    insights.jdbc.user={{evtlog_user}}
    insights.jdbc.password={{DBPassword}}
    insights.metrics-collection-interval=15s
    insights.metrics-persistence-interval=60s
  {% if PerformanceTesting or AuthNLdap %}
  etcFiles:
    properties:
      {% if PerformanceTesting %}
      resource-groups.properties: |
        resource-groups.configuration-manager=file
        resource-groups.config-file=etc/resource-groups.json
      {% endif %}
      {% if AuthNLdap %}
      password-authenticator.properties: |
        password-authenticator.name=ldap
        ldap.url={{LdapUri}}
        ldap.bind-dn=cn=admin,dc=az,dc=starburstdata,dc=net
        ldap.bind-password=admin
        ldap.group-auth-pattern=(&(objectClass=inetOrgPerson)(uid=${USER}))
        ldap.user-base-dn=ou=People,dc=az,dc=starburstdata,dc=net
        ldap.user-bind-pattern=uid=${USER},ou=People,dc=az,dc=starburstdata,dc=net
      group-provider.properties: |
        group-provider.name=ldap
        ldap.ssl=true
        ldap.ssl.keystore.path=secretRef:{{truststore}}:{{truststorebf}}
        ldap.ssl.keystore.password=test123
        ldap.url={{LdapUri}}
        ldap.user=cn=admin,dc=az,dc=starburstdata,dc=net
        ldap.password=admin
        ldap.search-base=ou=People,dc=az,dc=starburstdata,dc=net
        ldap.group.search-filter=(objectClass=groupOfNames)
        ldap.group.member-attribute=member
        ldap.group.name-attribute=cn
        ldap.user.member-of-attribute=memberOf
        ldap.user.search-filter=(&(objectClass=inetOrgPerson)(uid={0}))
        ldap.cache-ttl=10s
        ldap.negative-cache-ttl=30s
      {% endif %}
    {% endif %}
    {% if PerformanceTesting %}
    other:
      resource-groups.json: |
        {
          "rootGroups": [
            {
              "name": "global",
              "maxQueued": 1000,
              "hardConcurrencyLimit": 180,
              "softMemoryLimit": "90%"
            }
          ],
          "selectors": [
            {
              "group": "global"
            }
          ]
        }
  {% endif %}
  resources:
    requests:
      memory: {{coordinator_mem}}
      cpu: {{coordinator_cpu}}
    limits:
      memory: {{coordinator_mem}}
      cpu: {{coordinator_cpu}}

worker:
  # The following gives the SEP Pod Permission to access the local K8S worker's SSDs.
  securityContext:
    privileged: true
  replicas: {{workerCount}}
  resources:
    requests:
      memory: {{worker_mem}}
      cpu: {{worker_cpu}}
    limits:
      memory: {{worker_mem}}
      cpu: {{worker_cpu}}
  {% if Target == 'az' %}
  # Make sure to prioritise failure-tolerant pods to the spot instances, such
  # as the workers, and Hive (while it is set up with an external database).
  tolerations:
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"
  {% endif %}

{% if TlsEnabled and not AuthNLdap %}
# If we're not going to be using LDAP, but we still need to enable TLS and
# authenticate users, then automatically switch over to using a password
# database ("file"). Note that just adding userDatabase here automatically
# enables the password authenticator.
userDatabase:
  enabled: true
  users:
    - username: {{TrinoUser}}
      password: {{TrinoPass}}
    - username: alice
      password: {{TrinoPass}}
    - username: bob
      password: {{TrinoPass}}
    - username: carol
      password: {{TrinoPass}}
{% endif %}

catalogs:
  {{ HiveCat }}: |
    connector.name=warp_speed
    warp-speed.proxied-connector=hive
    warp-speed.cluster-uuid=example-cluster-567891234567
    warp-speed.config.internal-communication.shared-secret=secretRef:{{sharedsec}}:{{sharedsecbf}}
    hive.delta-lake-catalog-name=delta
    hive.security=starburst
    materialized-views.enabled=true
    materialized-views.namespace={{MvSchema}}
    materialized-views.storage-schema={{CacheMvSchema}}
    cache-service.uri=http://cache-service:8180
    #
    # Required for Warp.
    #
    hive.max-outstanding-splits-size=512MB
    hive.max-initial-splits=0
    hive.max-outstanding-splits=2000
    hive.max-split-size=64MB
    parquet.max-read-block-row-count=1024
    hive.dynamic-filtering.wait-timeout=1s
    #
    # Cloud-specific configuration.
    #
    {% if Target == "aws" %}
    hive.metastore=glue
    {% else %}
    hive.metastore.uri=thrift://hive:9083
    {% endif %}
    {% if Target == "az" %}
    hive.azure.abfs-storage-account={{StorageAccount}}
    hive.azure.abfs-access-key={{adls_access_key}}
    {% elif Target == "gcp" %}
    hive.gcs.json-key-file-path=secretRef:{{gcskey}}:{{gcskeybf}}
    hive.gcs.use-access-token=false
    {% endif %}
  {% if SalesforceEnabled %}
  {{ SfdcCat }} : |
    connector.name=salesforce
    salesforce.user={{SalesforceUser}}
    salesforce.password={{SalesforcePassword}}
    salesforce.security-token={{SalesforceSecurityToken}}
    salesforce.driver-logging.enabled=true
    {% if CacheServiceEnabled %}
    redirection.config-source=SERVICE
    cache-service.uri=http://cache-service:8180
    {% endif %}
  {% endif %}
  {{ EvtLogCat }}: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://{{evtlog_address}}:{{postgres_port}}/{{DBNameEventLogger}}
    connection-user={{evtlog_user}}
    connection-password={{DBPassword}}
  tpcds: |
    connector.name=tpcds
  tpch: |
    connector.name=tpch
  {% if Target == "aws" %}
  delta: |
    connector.name=warp_speed
    warp-speed.proxied-connector=delta-lake
    warp-speed.cluster-uuid=example-cluster-567891234567
    warp-speed.config.internal-communication.shared-secret=secretRef:{{sharedsec}}:{{sharedsecbf}}
    delta.hive-catalog-name=hive
    delta.security=starburst
    delta.hide-non-delta-lake-tables=true
    hive.metastore=glue
    #
    # Required for Warp.
    #
    parquet.max-read-block-row-count=1024
    delta.dynamic-filtering.wait-timeout=1s
    #
    # Cloud-specific configuration.
    #
  {{ RedshiftCat }}: |
    connector.name=redshift
    connection-url=jdbc:redshift://{{redshift_address}}/{{DBName}}
    connection-user={{redshift_user}}
    connection-password={{DBPassword}}
  {% elif Target == "az" %}
  {{ SynapseSlCat }}: |
    connector.name=synapse
    connection-url=jdbc:sqlserver://{{synapse_sl_address}}:1433;database=master
    connection-user={{synapse_sl_user}}
    connection-password={{DBPassword}}
  {{ SynapseNpCat }}: |
    connector.name=synapse
    connection-url=jdbc:sqlserver://{{synapse_pool_address}}:1433;database={{DBName}}
    connection-user={{synapse_pool_user}}
    connection-password={{DBPassword}}
  {% elif Target == "gcp" %}
  bq: |
    connector.name=bigquery
    bigquery.project-id={{ GcpProjectId | string }}
  {% endif %}
  {% if MySqlEnabled %}
  mysql: |
    connector.name=mysql
    connection-url=jdbc:mysql://{{mysql_address}}:{{mysql_port}}/?serverTimezone=UTC
    connection-user={{mysql_user}}
    connection-password={{DBPassword}}
  {% endif %}
  {% if PostgreSqlEnabled %}
  postgresql: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://{{postgres_address}}:{{postgres_port}}/{{DBName}}
    connection-user={{postgres_user}}
    connection-password={{DBPassword}}
  {% endif %}
  {% if UpstreamSG %}
  sg_az_adls: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/adls
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% if MySqlEnabled %}
  sg_az_mysql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/mysql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
  {% if PostgreSqlEnabled %}
  sg_az_postgresql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/postgresql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
  sg_az_synapse: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/synapse
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_gcp_gcs: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/gcs
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% if MySqlEnabled %}
  sg_gcp_mysql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/mysql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
  {% if PostgreSqlEnabled %}
  sg_gcp_postgresql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/postgresql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
  sg_gcp_bq: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/bq
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
