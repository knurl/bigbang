registryCredentials:
  enabled: true
  registry: {{HelmRegistry}}
  username: {{HelmRepoUser}}
  password: {{HelmRepoPassword}}

starburstPlatformLicense: {{license}}

# How the starburst service will be exposed.
expose:
  type: loadBalancer
  loadBalancer:
    # TODO AWS Doesn't support specification of a static IP for the ELB
    {% if Target != "aws" %}
    IP: {{starburst_address | string}}
    {% endif %}
  {% if RequireInternalTls or RequireCoordTls %}
    ports:
      https:
        port: 8443
      http: null
  {% endif %}
    annotations:
      {% if Target == "aws" %}
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      {% elif Target == "az" %}
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      {% elif Target == "gcp" %}
      networking.gke.io/load-balancer-type: "Internal"
      {% endif %}

{% if RequireInternalTls %}
# Shared secret for internal communication.
sharedSecret: secretRef.{{sharedsec}}.{{sharedsecbf}}

# Use only https and port 8443 for internal communication.
internal:
  ports:
    https:
      port: 8443
    http: null
{% endif %}

coordinator:
  etcFiles:
    properties:
      config.properties: |
        coordinator=true
        colocated-joins-enabled=true
        node-scheduler.include-coordinator=false
        http-server.http.port=8080
        http-server.authentication.type=PASSWORD,DELEGATED-PASSWORD
        task.writer-count = 8
        # TLS everywhere
        {% if RequireInternalTls %}
        http-server.http.enabled=false
        http-server.https.enabled=true
        http-server.https.port=8443
        # Coordinator cert does have localhost, so https OK
        discovery.uri=https://localhost:8443
        {% elif RequireCoordTls %}
        # TLS for coordinator only
        http-server.http.enabled=true
        http-server.https.enabled=true
        http-server.https.port=8443
        # Coordinator cert doesn't have localhost, so can't use https
        discovery.uri=http://localhost:8080
        {% else %}
        # Not using TLS at all
        http-server.http.enabled=true
        http-server.https.enabled=false
        discovery.uri=http://localhost:8080
        {% endif %}
        {% if RequireInternalTls %}
        http-server.https.keystore.path=secretRef:{{wildks}}:{{wildksbf}}
        http-server.https.keystore.key={{KeystorePass}}
        {% elif RequireCoordTls %}
        http-server.https.keystore.path=secretRef:{{starburstks}}:{{starburstksbf}}
        http-server.https.keystore.key={{KeystorePass}}
        {% endif %}
        {% if RequireInternalTls %}
        node.internal-address-source=FQDN
        internal-communication.https.required=true
        internal-communication.https.keystore.path=secretRef:{{wildks}}:{{wildksbf}}
        internal-communication.https.keystore.key={{KeystorePass}}
        internal-communication.https.truststore.path=secretRef:{{wildks}}:{{wildksbf}}
        internal-communication.https.truststore.key={{KeystorePass}}
        {% endif %}
        insights.persistence-enabled=true
        insights.metrics-persistence-enabled=true
        insights.jdbc.url=jdbc:postgresql://{{evtlog_address}}:{{postgres_port}}/{{DBNameEventLogger}}
        insights.jdbc.user={{evtlog_user}}
        insights.jdbc.password={{DBPassword}}
        insights.metrics-collection-interval=15s
        insights.metrics-persistence-interval=60s
        insights.authorized-users=.*
      {% if AuthNLdap %}
      password-authenticator.properties: |
        password-authenticator.name=ldap
        ldap.url={{LdapUri}}
        ldap.bind-dn=cn=admin,dc=az,dc=starburstdata,dc=net
        ldap.bind-password=admin
        ldap.group-auth-pattern=(&(objectClass=inetOrgPerson)(uid=${USER}))
        ldap.user-base-dn=ou=People,dc=az,dc=starburstdata,dc=net
        ldap.user-bind-pattern=uid=${USER},ou=People,dc=az,dc=starburstdata,dc=net
      {% endif %}
      event-listener.properties: |
        event-listener.name=event-logger
        jdbc.url=jdbc:postgresql://{{evtlog_address}}:{{postgres_port}}/{{DBNameEventLogger}}
        jdbc.user={{evtlog_user}}
        jdbc.password={{DBPassword}}
      access-control.properties: |
        access-control.name=ranger
        ranger.authentication-type=BASIC
        ranger.username=starburst_service
        ranger.password=RangerPassword1
        ranger.service-name=starburst-enterprise
        ranger.policy-rest-url=http://ranger:6080
        ranger.policy-refresh-interval=10s
  resources:
    requests:
      memory: {{coordinator_mem}}
      cpu: {{coordinator_cpu}}
    limits:
      memory: {{coordinator_mem}}
      cpu: {{coordinator_cpu}}

worker:
  replicas: {{workerCount}}
  resources:
    requests:
      memory: {{worker_mem}}
      cpu: {{worker_cpu}}
    limits:
      memory: {{worker_mem}}
      cpu: {{worker_cpu}}
  etcFiles:
    properties:
      config.properties: |
        coordinator=false
        {% if not RequireInternalTls %}
        # TLS on coordinator only, or no TLS
        # In this case our cert doesn't include the coordinator service name as
        # a SAN, which means we'll get a host mismatch when we try to connect.
        # Therefore in this case we'll have to leave port 8080 open and have
        # the workers connect there.
        discovery.uri=http://coordinator.starburst.svc:8080
        {% else %}
        # TLS everywhere
        # The cert _does_ include a SAN for the coordinator service name
        discovery.uri=https://coordinator.starburst.svc:8443
        {% endif %}
        {% if not RequireInternalTls %}
        http-server.http.enabled=true
        http-server.http.port=8080
        {% else %}
        # When enabling TLS for internal communication don't set node.internal-address since
        # it'll be set automatically to <pod-ip>.worker.<namespace>.svc.
        # Add DNS:starburst, DNS:coordinator.<namespace>.svc and DNS:*.worker.<namespace>.svc as SAN in your certs
        http-server.http.enabled=false
        http-server.https.enabled=true
        http-server.https.port=8443
        http-server.https.keystore.path=secretRef:{{wildks}}:{{wildksbf}}
        http-server.https.keystore.key={{KeystorePass}}
        node.internal-address-source=FQDN
        internal-communication.https.required=true
        internal-communication.https.keystore.path=secretRef:{{wildks}}:{{wildksbf}}
        internal-communication.https.keystore.key={{KeystorePass}}
        internal-communication.https.truststore.path=secretRef:{{wildks}}:{{wildksbf}}
        internal-communication.https.truststore.key={{KeystorePass}}
        {% endif %}

# If we're not going to be using LDAP, then automatically switch over to using
# a password database ("file")
{% if not AuthNLdap %}
# automatically enables password authenticator
userDatabase:
  enabled: true
  users:
    - username: {{TrinoUser}}
      password: {{TrinoPass}}
    - username: alice
      password: {{TrinoPass}}
    - username: bob
      password: {{TrinoPass}}
    - username: carol
      password: {{TrinoPass}}
{% endif %}

{% if RequireInternalTls %}
readinessProbe:
  exec:
    command:
      - /bin/sh
      - -c
      - curl -k --max-time 5 -s https://localhost:8443/v1/info | grep \"starting\":false

livenessProbe:
  exec:
    command:
      - /bin/sh
      - -c
      - curl -k --max-time 5 -s https://localhost:8443/v1/info | grep \"starting\":false
{% endif %}

catalogs:
  {{ HiveCat }}: |
    connector.name=hive
    hive.metastore.uri=thrift://hive:9083
    hive.security=allow-all
    hive.file-status-cache-tables=*
    hive.file-status-cache-expire-time=60m
    hive.storage-format=ORC
    hive.compression-codec=SNAPPY
    {% if Target == "az" %}
    hive.azure.abfs-storage-account={{StorageAccount}}
    hive.azure.abfs-access-key={{adls_access_key}}
    {% elif Target == "gcp" %}
    hive.gcs.json-key-file-path=secretRef:{{gcskey}}:{{gcskeybf}}
    hive.gcs.use-access-token=false
    {% endif %}
  {% if Target == "aws" %}
  delta: |
    connector.name=delta-lake
    hive.metastore=glue
    hive.metastore.glue.pin-client-to-current-region=true
    hive.security=allow-all
    hive.max-partitions-per-writers = 1000
    delta.hide-non-delta-lake-tables=true
  redshift: |
    connector.name=redshift
    connection-url=jdbc:redshift://{{redshift_endpoint}}/{{DBName}}
    connection-user={{redshift_user}}
    connection-password={{DBPassword}}
    allow-drop-table=true
  {% elif Target == "az" %}
  synapse: |
    connector.name=synapse
    connection-url=jdbc:sqlserver://{{synapse_address}}:1433
    connection-user={{synapse_user}}
    connection-password={{DBPassword}}
    allow-drop-table=true
  {% elif Target == "gcp" %}
  bq: |
    connector.name=bigquery
    bigquery.project-id={{ bq_project_id | string }}
  {% endif %}
  mysql: |
    connector.name=mysql
    connection-url=jdbc:mysql://{{mysql_address}}:{{mysql_port}}/?serverTimezone=UTC
    connection-user={{mysql_user}}
    connection-password={{DBPassword}}
    allow-drop-table=true
  postgresql: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://{{postgres_address}}:{{postgres_port}}/{{DBName}}
    connection-user={{postgres_user}}
    connection-password={{DBPassword}}
    allow-drop-table=true
  {% if UpstreamSG %}
  sg_az_adls: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/adls
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_az_mysql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/mysql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_az_postgresql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/postgresql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_az_synapse: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionAzPort}}/synapse
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_gcp_gcs: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/gcs
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_gcp_mysql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/mysql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_gcp_postgresql: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/postgresql
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  sg_gcp_bq: |
    connector.name=stargate
    connection-url=jdbc:trino://{{StarburstHost}}:{{BastionGcpPort}}/bq
    connection-user={{TrinoUser}}
    connection-password={{TrinoPass}}
    ssl.enabled=true
  {% endif %}
