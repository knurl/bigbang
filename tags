!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CommandGroup	cmdgrp.py	/^class CommandGroup:$/;"	c
KubeApplyCrd	bigbang.py	/^def KubeApplyCrd(crd: str, env: dict = {}) -> None:$/;"	f
KubeContextError	bigbang.py	/^class KubeContextError(Exception):$/;"	c
KubeDeleteCrd	bigbang.py	/^def KubeDeleteCrd(crd: str, env) -> None:$/;"	f
Service	bigbang.py	/^class Service:$/;"	c
Services	bigbang.py	/^class Services:$/;"	c
Timer	timer.py	/^class Timer:$/;"	c
Tunnel	bigbang.py	/^class Tunnel:$/;"	c
__del__	bigbang.py	/^    def __del__(self):$/;"	m	class:Tunnel	file:
__enter__	bigbang.py	/^    def __enter__(self):$/;"	m	class:Tunnel	file:
__enter__	timer.py	/^    def __enter__(self):$/;"	m	class:Timer	file:
__exit__	bigbang.py	/^    def __exit__(self, *_):$/;"	m	class:Tunnel	file:
__exit__	timer.py	/^    def __exit__(self, *args):$/;"	m	class:Timer	file:
__init__	bigbang.py	/^    def __init__(self):$/;"	m	class:Services
__init__	bigbang.py	/^    def __init__(self, name: str, lcl_port: int, rmt_port: int):$/;"	m	class:Service
__init__	bigbang.py	/^    def __init__(self, shortname: str, bastionIp: ipaddress.IPv4Address,$/;"	m	class:Tunnel
__init__	cmdgrp.py	/^    def __init__(self):$/;"	m	class:CommandGroup
__init__	timer.py	/^    def __init__(self, descr: str):$/;"	m	class:Timer
__str__	bigbang.py	/^    def __str__(self):$/;"	m	class:Tunnel	file:
add_command	cmdgrp.py	/^    def add_command(self, f: Callable[[], None],$/;"	m	class:CommandGroup
all_commands_done	cmdgrp.py	/^    def all_commands_done(self) -> bool:$/;"	m	class:CommandGroup
announce	out.py	/^def announce(s: str) -> None:$/;"	f
announceBox	out.py	/^def announceBox(s: str) -> None:$/;"	f
announceEnd	out.py	/^def announceEnd(s: str, tinterv: float) -> None:$/;"	f
announceLoud	out.py	/^def announceLoud(lines: list[str]) -> None:$/;"	f
announceReady	bigbang.py	/^def announceReady(bastionIp: str) -> list[str]:$/;"	f
announceSql	out.py	/^def announceSql(i: int, s: str) -> None:$/;"	f
announceSqlEnd	out.py	/^def announceSqlEnd(s: str) -> None:$/;"	f
announceStart	out.py	/^def announceStart(s: str) -> None:$/;"	f
announceSummary	bigbang.py	/^def announceSummary() -> None:$/;"	f
appchartvlabel	bigbang.py	/^appchartvlabel  = 'AppChartVersion'$/;"	v
appendToFile	bigbang.py	/^def appendToFile(filepath, contents) -> None:$/;"	f
bastionuser	bigbang.py	/^bastionuser   = 'ubuntu'$/;"	v
c	bigbang.py	/^                          c = ", ".join(clouds)))$/;"	v
cb_work_done	cmdgrp.py	/^            def cb_work_done():$/;"	f	function:CommandGroup.add_command.make_cb_work_done
cd	out.py	/^    def cd(x):$/;"	f	function:spinWait
charts	bigbang.py	/^charts = {}$/;"	v
checkEtcHosts	bigbang.py	/^def checkEtcHosts() -> None:$/;"	f
checkRSAKey	bigbang.py	/^def checkRSAKey() -> None:$/;"	f
check_chart_version	bigbang.py	/^def check_chart_version(label, vers):$/;"	f
check_creds	bigbang.py	/^def check_creds() -> None:$/;"	f
check_not_running	cmdgrp.py	/^    def check_not_running(self) -> None:$/;"	m	class:CommandGroup
check_running	cmdgrp.py	/^    def check_running(self) -> None:$/;"	m	class:CommandGroup
choices	bigbang.py	/^               choices = ['start', 'stop', 'restart'],$/;"	v
cleanOldTunnels	bigbang.py	/^def cleanOldTunnels() -> None:$/;"	f
clouds	bigbang.py	/^clouds = ("aws", "az", "gcp")$/;"	v
clustname	bigbang.py	/^clustname = shortname + "cl"$/;"	v
code	bigbang.py	/^code = str(octet).zfill(3)$/;"	v
codelen	bigbang.py	/^codelen = min(3, len(username))$/;"	v
cp	out.py	/^    def cp(x):$/;"	f	function:announceBox
cp	out.py	/^    def cp(x):$/;"	f	function:announceLoud
crds	bigbang.py	/^crds = ['cluster', 'mgmt']$/;"	v
dbInstanceType	bigbang.py	/^dbInstanceType = ""$/;"	v
dbports	bigbang.py	/^dbports       = { "mysql": 3306, "postgres": 5432 }$/;"	v
delete_all_services	bigbang.py	/^def delete_all_services(lbs: dict[str, str]) -> bool:$/;"	f
divideOrZero	bigbang.py	/^def divideOrZero(x: int, y: int) -> float:$/;"	f
domain	bigbang.py	/^domain        = "hazelcast.net" # cannot terminate with .; Azure will reject$/;"	v
emailparts	bigbang.py	/^emailparts = email.split('@')$/;"	v
ensureHelmRepoSetUp	bigbang.py	/^def ensureHelmRepoSetUp(helm_repo_name: str, helm_repo_location: str) -> None:$/;"	f
ensure_cluster_is_started	bigbang.py	/^def ensure_cluster_is_started(skipClusterStart: bool) -> tuple[Tunnel, dict]:$/;"	f
eraseLine	out.py	/^    def eraseLine(flush: bool = False):$/;"	f	function:spinWait
fqdnToDc	bigbang.py	/^def fqdnToDc(fqdn: str) -> str:$/;"	f
gcpaccount	bigbang.py	/^gcpaccount = ""$/;"	v
gcpproject	bigbang.py	/^gcpproject = ""$/;"	v
genmask	bigbang.py	/^def genmask(target, octet):$/;"	f
get	bigbang.py	/^    def get(self, name: str):$/;"	m	class:Services
getCloudSummary	bigbang.py	/^def getCloudSummary() -> List[str]:$/;"	f
getLoadBalancers	bigbang.py	/^def getLoadBalancers(services: list, namespace: str) -> dict[str, str]:$/;"	f
getMyPublicIp	bigbang.py	/^def getMyPublicIp() -> ipaddress.IPv4Address:$/;"	f
getRegionFromZone	bigbang.py	/^def getRegionFromZone(zone: str) -> str:$/;"	f
getSecrets	bigbang.py	/^def getSecrets() -> None:$/;"	f
getSshPublicKey	bigbang.py	/^def getSshPublicKey() -> str:$/;"	f
get_lcl_port	bigbang.py	/^    def get_lcl_port(self, name: str) -> int:$/;"	m	class:Services
get_nodes	ready.py	/^def get_nodes() -> tuple[set[str], set[str]]:$/;"	f
get_output_vars	bigbang.py	/^def get_output_vars() -> dict:$/;"	f
get_ready_nodes	ready.py	/^def get_ready_nodes() -> set[str]:$/;"	f
get_rmt_port	bigbang.py	/^    def get_rmt_port(self, name: str) -> int:$/;"	m	class:Services
get_svc_names	bigbang.py	/^    def get_svc_names(self):$/;"	m	class:Services
get_tunnel_procs	bigbang.py	/^    def get_tunnel_procs():$/;"	f	function:cleanOldTunnels
get_url	bigbang.py	/^    def get_url(self, tls: bool = False):$/;"	m	class:Service
helm	bigbang.py	/^def helm(cmd: str) -> None:$/;"	f
helmGet	bigbang.py	/^def helmGet(cmd: str) -> str:$/;"	f
helmGetNamespaces	bigbang.py	/^def helmGetNamespaces() -> list:$/;"	f
helmGetReleases	bigbang.py	/^def helmGetReleases() -> dict:$/;"	f
helmInstallOperator	bigbang.py	/^def helmInstallOperator(module: str, env: dict = {}) -> None:$/;"	f
helmTry	bigbang.py	/^def helmTry(cmd: str) -> subprocess.CompletedProcess:$/;"	f
helmUninstallRelease	bigbang.py	/^def helmUninstallRelease(release: str) -> None:$/;"	f
helmWhichChartInstalled	bigbang.py	/^def helmWhichChartInstalled(module: str) -> Optional[str]:$/;"	f
helm_create_namespace	bigbang.py	/^def helm_create_namespace() -> None:$/;"	f
helm_create_operator_and_crds	bigbang.py	/^def helm_create_operator_and_crds(env):$/;"	f
helm_delete_crds_and_operator	bigbang.py	/^def helm_delete_crds_and_operator():$/;"	f
helm_delete_namespace	bigbang.py	/^def helm_delete_namespace() -> None:$/;"	f
helmns	bigbang.py	/^helmns      = f"-n {namespace}"$/;"	v
help	bigbang.py	/^               help="Force cloud target to specified value.")$/;"	v
help	bigbang.py	/^               help="Force zone\/region to specified value.")$/;"	v
help	bigbang.py	/^               help="Skip checking to see if cluster needs to be started.")$/;"	v
help	bigbang.py	/^               help="Summarise the ssh tunnels on exit.")$/;"	v
help	bigbang.py	/^               help="Unload k8s cluster only. Used with stop or restart.")$/;"	v
help	bigbang.py	/^               help=argparse.SUPPRESS)$/;"	v
hostsf	bigbang.py	/^hostsf      = "\/etc\/hosts"$/;"	v
installSecrets	bigbang.py	/^def installSecrets(secrets: dict[str, dict[str, str]]) -> dict[str, str]:$/;"	f
instanceTypes	bigbang.py	/^    instanceTypes     = myvars["AzureVmTypes"]$/;"	v
instanceTypes	bigbang.py	/^    instanceTypes     = myvars["GcpMachineTypes"]$/;"	v
instanceTypes	bigbang.py	/^    instanceTypes = myvars["AwsInstanceTypes"]$/;"	v
invalidchars	bigbang.py	/^invalidchars = r'[^' + validchars + r']'$/;"	v
killAllTerminatingPods	bigbang.py	/^def killAllTerminatingPods() -> None:$/;"	f
knownhosts	bigbang.py	/^knownhosts  = os.path.expanduser("~\/.ssh\/known_hosts")$/;"	v
kube	bigbang.py	/^kube        = "kubectl"$/;"	v
kubens	bigbang.py	/^kubens      = f"{kube} -n {namespace}"$/;"	v
loadBalancerResponding	bigbang.py	/^def loadBalancerResponding(service: str) -> bool:$/;"	f
localhost	bigbang.py	/^localhost     = "localhost"$/;"	v
localhostip	bigbang.py	/^localhostip   = "127.0.0.1"$/;"	v
longname	bigbang.py	/^longname = username.replace('.', '-') + '-' + code$/;"	v
main	bigbang.py	/^def main() -> None:$/;"	f
make_cb	bigbang.py	/^        def make_cb(w: int) -> Callable[[], None]:$/;"	f	function:spinWaitCGTest
make_cb_work_done	cmdgrp.py	/^        def make_cb_work_done(f: Callable[[], None],$/;"	f	function:CommandGroup.add_command
maxpodpnode	bigbang.py	/^maxpodpnode = 32$/;"	v
minNodes	bigbang.py	/^minNodes    = 3 # See getMinNodeResources(); allows rolling upgrades$/;"	v
move_to_running_mode	cmdgrp.py	/^    def move_to_running_mode(self) -> None:$/;"	m	class:CommandGroup
myDir	bbio.py	/^def myDir():$/;"	f
mySubnetCidr	bigbang.py	/^mySubnetCidr = genmask(target, octet)$/;"	v
myvars	bigbang.py	/^        myvars = yaml.load(mypf, Loader = yaml.FullLoader)$/;"	v
myvarsbf	bigbang.py	/^myvarsbf    = 'my-vars.yaml'$/;"	v
myvarsf	bigbang.py	/^myvarsf     = bbio.where(myvarsbf)$/;"	v
nameprefix	bigbang.py	/^nameprefix = username[:codelen]$/;"	v
namespace	bigbang.py	/^namespace   = "hazelcast"$/;"	v
netwkname	bigbang.py	/^netwkname = shortname + 'net'$/;"	v
nodecountlabel	bigbang.py	/^nodecountlabel  = 'NodeCount'$/;"	v
ns	bigbang.py	/^ns = p.parse_args()$/;"	v
numberOfContainers	capcalc.py	/^def numberOfContainers(numNodes: int) -> int:$/;"	f
numberOfReplicas	capcalc.py	/^def numberOfReplicas(numNodes: int) -> int:$/;"	f
octet	bigbang.py	/^octet = int(hashlib.sha256(s.encode('utf-8')).hexdigest(), 16) % 256$/;"	v
operator	bigbang.py	/^operator = 'operator'$/;"	v
oprchartvlabel	bigbang.py	/^oprchartvlabel  = 'OperatorChartVersion'$/;"	v
p	bigbang.py	/^p = argparse.ArgumentParser()$/;"	v
parameteriseTemplate	bigbang.py	/^def parameteriseTemplate(template: str, targetDir: str, varsDict: dict,$/;"	f
prefzonelabel	bigbang.py	/^prefzonelabel   = 'PreferredZones'$/;"	v
randomString	out.py	/^def randomString(length: int) -> str:$/;"	f
ratio_done	cmdgrp.py	/^    def ratio_done(self) -> float:$/;"	m	class:CommandGroup
readableDir	bbio.py	/^def readableDir(p) -> bool:$/;"	f
readableFile	bbio.py	/^def readableFile(p) -> bool:$/;"	f
region	bigbang.py	/^region = getRegionFromZone(zone)$/;"	v
releases	bigbang.py	/^releases = {}$/;"	v
removeOldVersions	bigbang.py	/^def removeOldVersions(yamltmp: str, similar: str) -> None:$/;"	f
replaceFile	bigbang.py	/^def replaceFile(filepath, contents) -> bool:$/;"	f
replicasPerPod	capcalc.py	/^def replicasPerPod(podname: str, numNodes: int) -> int:$/;"	f
requireKey	bigbang.py	/^def requireKey(key: str, d: dict[str, Any]):$/;"	f
resourcegrp	bigbang.py	/^resourcegrp = shortname + "rg"$/;"	v
retryRun	run.py	/^def retryRun(args, maxattempts: int) -> subprocess.CompletedProcess:$/;"	f
rsa	bigbang.py	/^rsa         = os.path.expanduser("~\/.ssh\/id_rsa")$/;"	v
rsaPub	bigbang.py	/^rsaPub      = os.path.expanduser("~\/.ssh\/id_rsa.pub")$/;"	v
run	run.py	/^def run(args, check = True, verbose = True) -> subprocess.CompletedProcess:$/;"	f
runCollect	run.py	/^def runCollect(args) -> str:$/;"	f
runShell	run.py	/^def runShell(cmd: str) -> int:$/;"	f
runStdout	run.py	/^def runStdout(args):$/;"	f
runTry	run.py	/^def runTry(args) -> subprocess.CompletedProcess:$/;"	f
run_commands	cmdgrp.py	/^    def run_commands(self) -> None:$/;"	m	class:CommandGroup
run_commands_seq	cmdgrp.py	/^    def run_commands_seq(self) -> None:$/;"	m	class:CommandGroup
s	bigbang.py	/^s = username + zone$/;"	v
secretsbf	bigbang.py	/^secretsbf    = "secrets.yaml"$/;"	v
secretsf	bigbang.py	/^secretsf     = bbio.where(secretsbf)$/;"	v
set_dns_for_lbs	bigbang.py	/^def set_dns_for_lbs(zid: str, # Zone ID$/;"	f
setup_bastion_tunnel	bigbang.py	/^def setup_bastion_tunnel(bastion_ip: ipaddress.IPv4Address,$/;"	f
sfdccredsbf	bigbang.py	/^sfdccredsbf = 'sfdc-creds.yaml' # don't find FQP yet as SFDC is optional$/;"	v
shortname	bigbang.py	/^shortname = nameprefix + code$/;"	v
sleep_x	bigbang.py	/^            def sleep_x() -> None:$/;"	f	function:spinWaitCGTest.make_cb
smallInstanceType	bigbang.py	/^    smallInstanceType = myvars["AwsSmallInstanceType"]$/;"	v
smallInstanceType	bigbang.py	/^    smallInstanceType = myvars["AzureSmallVmType"]$/;"	v
smallInstanceType	bigbang.py	/^    smallInstanceType = myvars["GcpSmallMachineType"]$/;"	v
smallInstanceType	bigbang.py	/^smallInstanceType = ""$/;"	v
spinWait	out.py	/^def spinWait(waitFunc: Callable[[], float]) -> None:$/;"	f
spinWaitCGTest	bigbang.py	/^def spinWaitCGTest():$/;"	f
sqlstr	out.py	/^sqlstr = "Issued 🢩 "$/;"	v
start_tunnel_to_lbs	bigbang.py	/^def start_tunnel_to_lbs(bastionIp: str) -> tuple[list[Tunnel], dict[str, str]]:$/;"	f
summarize_containers	ready.py	/^def summarize_containers(namespace: str = "") -> tuple[set[str], set[str]]:$/;"	f
svcStart	bigbang.py	/^def svcStart(skipClusterStart: bool = False) -> tuple[list[Tunnel], str]:$/;"	f
svcStop	bigbang.py	/^def svcStop(onlyEmptyNodes: bool = False) -> None:$/;"	f
svcs	bigbang.py	/^svcs = Services()$/;"	v
taints_are_ok	ready.py	/^def taints_are_ok(item: dict) -> bool:$/;"	f
targetlabel	bigbang.py	/^targetlabel     = 'Target'$/;"	v
templatedir	bigbang.py	/^templatedir = bbio.where("templates")$/;"	v
templates	bigbang.py	/^templates = {}$/;"	v
tfdir	bigbang.py	/^tfdir = bbio.where(target)$/;"	v
tfvars	bigbang.py	/^tfvars      = "variables.tf" # basename only, no path!$/;"	v
tlscoordlabel	bigbang.py	/^tlscoordlabel   = 'RequireCoordTls'$/;"	v
tlsenabled	bigbang.py	/^def tlsenabled() -> bool: return tlscoord$/;"	f
tmpdir	bigbang.py	/^tmpdir      = "\/tmp"$/;"	v
updateKubeConfig	bigbang.py	/^def updateKubeConfig() -> None:$/;"	f
username	bigbang.py	/^username = re.sub(invalidchars, "-", emailparts[0]).lower()$/;"	v
v	bigbang.py	/^    v = vars(ns)$/;"	v
validchars	bigbang.py	/^validchars = r"a-zA-Z0-9"$/;"	v
waitUntilApiServerResponding	bigbang.py	/^def waitUntilApiServerResponding() -> float:$/;"	f
waitUntilDeploymentsAvail	bigbang.py	/^def waitUntilDeploymentsAvail(namespace: str, minreplicas: int = 0) -> float:$/;"	f
waitUntilLoadBalancersUp	bigbang.py	/^def waitUntilLoadBalancersUp(services: list, namespace: str,$/;"	f
waitUntilNodesReady	bigbang.py	/^def waitUntilNodesReady(minNodes: int) -> float:$/;"	f
waitUntilPodsReady	bigbang.py	/^def waitUntilPodsReady(namespace: str, mincontainers: int = 0) -> float:$/;"	f
wait_until_done	cmdgrp.py	/^    def wait_until_done(self) -> None:$/;"	m	class:CommandGroup
webfqdn	bigbang.py	/^webfqdn       = "mgmt." + domain$/;"	v
where	bbio.py	/^def where(leaf):$/;"	f
writeableDir	bbio.py	/^def writeableDir(p) -> bool: $/;"	f
