!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ApiError	demosvc.py	/^class ApiError(Exception):$/;"	c
announce	demosvc.py	/^def announce(s):$/;"	f
announceBox	demosvc.py	/^def announceBox(s):$/;"	f
announceLoud	demosvc.py	/^def announceLoud(s):$/;"	f
announcePresto	demosvc.py	/^def announcePresto(s):$/;"	f
avoidcat	demosvc.py	/^avoidcat    = [tpchcat, syscat, evtlogcat]$/;"	v
awsGetCreds	demosvc.py	/^def awsGetCreds():$/;"	f
awsvpns	demosvc.py	/^    awsvpns      = myvars["AWSVPNInstanceIDs"]$/;"	v
azuredns	demosvc.py	/^azuredns    = "168.63.129.16"$/;"	v
azurevpns	demosvc.py	/^    azurevpns    = myvars["AzureVPNVnetNames"]$/;"	v
bucket	demosvc.py	/^bucket = shortname + "bk"$/;"	v
charts	demosvc.py	/^charts = {}$/;"	v
choices	demosvc.py	/^        choices = ["start", "stop", "restart", "status", "install", "uninstall",$/;"	v
clustname	demosvc.py	/^clustname = shortname + "cl"$/;"	v
code	demosvc.py	/^code = username[:codelen]$/;"	v
codelen	demosvc.py	/^codelen = min(3, len(username))$/;"	v
command	demosvc.py	/^command = ns.command$/;"	v
copySchemaTables	demosvc.py	/^def copySchemaTables(srcCatalog: str, srcSchema: str,$/;"	f
dbevtlog	demosvc.py	/^dbevtlog    = "evtlog" # event logger PostgreSQL instance$/;"	v
dbports	demosvc.py	/^dbports     = { "mariadb": 3306, "postgres": 5432 }$/;"	v
dbpwd	demosvc.py	/^dbpwd       = "a029fjg!>dfgBiO8"$/;"	v
dbschema	demosvc.py	/^dbschema    = "fdd"$/;"	v
dbuser	demosvc.py	/^dbuser      = "fdd"$/;"	v
email	demosvc.py	/^    email        = myvars["Email"]$/;"	v
emailparts	demosvc.py	/^emailparts = email.split('@')$/;"	v
emptyNodes	demosvc.py	/^emptyNodes = ns.empty_nodes$/;"	v
ensureClusterIsStarted	demosvc.py	/^def ensureClusterIsStarted(skipClusterStart: bool) -> dict:$/;"	f
ensureHelmRepoSetUp	demosvc.py	/^def ensureHelmRepoSetUp():$/;"	f
eraseBucketContents	demosvc.py	/^def eraseBucketContents():$/;"	f
evtlogcat	demosvc.py	/^evtlogcat   = "postgresqlel"$/;"	v
forwarder	demosvc.py	/^forwarder   = where("azure\/forwarderSetup.sh")$/;"	v
generateDatabaseUsers	demosvc.py	/^def generateDatabaseUsers(env: dict) -> None:$/;"	f
getClusterState	demosvc.py	/^def getClusterState() -> Tuple[bool, bool]:$/;"	f
getMinNodeResources	demosvc.py	/^def getMinNodeResources() -> tuple:$/;"	f
getOutputVars	demosvc.py	/^def getOutputVars() -> dict:$/;"	f
getVpnInstanceId	demosvc.py	/^def getVpnInstanceId() -> str:$/;"	f
getVpnVnet	demosvc.py	/^def getVpnVnet() -> dict:$/;"	f
helm	demosvc.py	/^def helm(cmd: str) -> None:$/;"	f
helmCreateNamespace	demosvc.py	/^def helmCreateNamespace() -> None:$/;"	f
helmDeleteNamespace	demosvc.py	/^def helmDeleteNamespace() -> None:$/;"	f
helmGet	demosvc.py	/^def helmGet(cmd: str) -> str:$/;"	f
helmGetNamespaces	demosvc.py	/^def helmGetNamespaces() -> list:$/;"	f
helmGetReleases	demosvc.py	/^def helmGetReleases() -> list:$/;"	f
helmInstallAll	demosvc.py	/^def helmInstallAll(kv):$/;"	f
helmInstallRelease	demosvc.py	/^def helmInstallRelease(module: str, kv = {}) -> bool:$/;"	f
helmIsReleaseInstalled	demosvc.py	/^def helmIsReleaseInstalled(module: str) -> bool:$/;"	f
helmTry	demosvc.py	/^def helmTry(cmd: str) -> subprocess.CompletedProcess:$/;"	f
helmUninstallAll	demosvc.py	/^def helmUninstallAll():$/;"	f
helmUninstallRelease	demosvc.py	/^def helmUninstallRelease(release: str) -> None:$/;"	f
helmcreds	demosvc.py	/^        helmcreds = yaml.load(mypf, Loader = yaml.FullLoader)$/;"	v
helmcredsbf	demosvc.py	/^helmcredsbf = "helm-creds.yaml"$/;"	v
helmcredsf	demosvc.py	/^helmcredsf  = where("helm-creds.yaml")$/;"	v
helmns	demosvc.py	/^helmns      = f"--namespace {namespace}"$/;"	v
help	demosvc.py	/^        help="Skip checking to see if cluster needs to be started")$/;"	v
help	demosvc.py	/^        help="Unload k8s cluster only. Used with stop or restart.")$/;"	v
hivecat	demosvc.py	/^hivecat     = "hive"$/;"	v
hlen	demosvc.py	/^hlen = 3$/;"	v
hnum	demosvc.py	/^hnum = int(hashlib.sha256(s.encode('utf-8')).hexdigest(), 16) % 10**hlen$/;"	v
installLicense	demosvc.py	/^def installLicense():$/;"	f
ipntwk	demosvc.py	/^    ipntwk = ipaddress.ip_network(mySubnetCidr)$/;"	v
issuePrestoCommand	demosvc.py	/^def issuePrestoCommand(command: str, verbose = False) -> list:$/;"	f
kube	demosvc.py	/^kube        = "kubectl"$/;"	v
kubeconfig	demosvc.py	/^kubeconfig  = os.path.expanduser("~\/.kube\/config")$/;"	v
kubens	demosvc.py	/^kubens      = f"kubectl --namespace {namespace}"$/;"	v
license	demosvc.py	/^    license      = myvars["LicenseName"]$/;"	v
licensebf	demosvc.py	/^licensebf = f"{license}.license"$/;"	v
licensef	demosvc.py	/^licensef = where(licensebf)$/;"	v
loadDatabases	demosvc.py	/^def loadDatabases():$/;"	f
modules	demosvc.py	/^modules = ["hive", "ranger", "presto"]$/;"	v
myDir	demosvc.py	/^def myDir():$/;"	f
mySubnetCidr	demosvc.py	/^    mySubnetCidr = myvars["MyCIDR"]$/;"	v
myvarsbf	demosvc.py	/^myvarsbf = "my-vars.yaml"$/;"	v
myvarsf	demosvc.py	/^myvarsf  = where("my-vars.yaml")$/;"	v
namespace	demosvc.py	/^namespace   = "starburst"$/;"	v
nodeCount	demosvc.py	/^    nodeCount    = myvars["NodeCount"]$/;"	v
normaliseCPU	demosvc.py	/^def normaliseCPU(cpu) -> int:$/;"	f
normaliseMem	demosvc.py	/^def normaliseMem(mem) -> int:$/;"	f
ns	demosvc.py	/^ns = p.parse_args()$/;"	v
p	demosvc.py	/^p = argparse.ArgumentParser(description=$/;"	v
parameteriseTemplate	demosvc.py	/^def parameteriseTemplate(template, targetDir, varsDict):$/;"	f
planWorkerSize	demosvc.py	/^def planWorkerSize() -> dict:$/;"	f
region	demosvc.py	/^    region       = myvars["Region"]$/;"	v
releases	demosvc.py	/^releases = {}$/;"	v
repo	demosvc.py	/^    repo         = myvars["HelmRepo"]$/;"	v
repoloc	demosvc.py	/^    repoloc      = myvars["HelmRepoLocation"]$/;"	v
repopass	demosvc.py	/^    repopass     = helmcreds["HelmRepoPassword"]$/;"	v
repouser	demosvc.py	/^    repouser     = helmcreds["HelmRepoUser"]$/;"	v
retry	demosvc.py	/^def retry(f, maxretries: int, err: str) -> requests.Response:$/;"	f
run	run.py	/^def run(args, checkRC = True, verbose = True):$/;"	f
runCollect	run.py	/^def runCollect(args) -> str:$/;"	f
runStdout	run.py	/^def runStdout(args):$/;"	f
runTry	run.py	/^def runTry(args) -> subprocess.CompletedProcess:$/;"	f
s	demosvc.py	/^s = username + region$/;"	v
shortname	demosvc.py	/^shortname = code + str(hnum).zfill(hlen)$/;"	v
startPortForward	demosvc.py	/^def startPortForward():$/;"	f
stopPortForward	demosvc.py	/^def stopPortForward():$/;"	f
storageacct	demosvc.py	/^storageacct = shortname + "sa"$/;"	v
svcStart	demosvc.py	/^def svcStart(skipClusterStart: bool = False) -> None:$/;"	f
svcStop	demosvc.py	/^def svcStop(emptyNodes: bool = False) -> None:$/;"	f
svcports	demosvc.py	/^svcports    = { "presto": 8080, "ranger": 6080 }$/;"	v
syscat	demosvc.py	/^syscat      = "system"$/;"	v
target	demosvc.py	/^    target = "aws"$/;"	v
target	demosvc.py	/^    target = "azure"$/;"	v
templatedir	demosvc.py	/^templatedir = where("templates")$/;"	v
templates	demosvc.py	/^templates = {}$/;"	v
tfdir	demosvc.py	/^tfdir       = where(target)$/;"	v
tfvars	demosvc.py	/^tfvars      = "variables.tf" # basename only, no path!$/;"	v
tmpdir	demosvc.py	/^tmpdir      = "\/tmp"$/;"	v
tpchcat	demosvc.py	/^tpchcat     = "tpch"$/;"	v
tpchschema	demosvc.py	/^tpchschema  = "tiny"$/;"	v
username	demosvc.py	/^username = emailparts[0]$/;"	v
warnVpnConfig	demosvc.py	/^def warnVpnConfig(privateDnsAddr: str = ""):$/;"	f
where	demosvc.py	/^def where(leaf):$/;"	f
