commit 3881341a9093a82bf82846ffdf974222665035eb
Author: Rob Anderson <knurl@me.com>
Date:   Sat Jul 10 18:37:32 2021 +0100

    - Fix apparently new issue with mysql complaining about lack of timezone setting in the connection string
    - Fix one-off issue for numbuckets == 1
    - Upgrade version to 359, which Starburst Engineering has now patched to
      resolve the issue with TLS-protected loadbalancers; therefore also
      remove the manual patching that bigbang was doing

diff --git a/bigbang.py b/bigbang.py
index aadab7a..cce5448 100755
--- a/bigbang.py
+++ b/bigbang.py
@@ -70,13 +70,11 @@ ldapfqdn      = "ldap." + domain
 bastionfqdn   = "bastion." + domain
 keystorepass  = "test123"
 hostsf        = "/etc/hosts"
-patchbf       = "starburst-enterprise.diff"
-patchf        = where(patchbf)
 ldapsetupbf   = "install-slapd.sh"
 ldapsetupf    = where(ldapsetupbf)
 ldaplaunchbf  = "ldaplaunch.sh"
 ldaplaunchf   = where(ldaplaunchbf)
-tpchbigschema = "sf10"
+tpchbigschema = "tiny"
 tpchsmlschema = "tiny"
 minbucketsize = 1 << 12
 tpchbuckets   = {
@@ -1158,8 +1156,6 @@ def copySchemaTables(srcCatalog: str, srcSchema: str,
     # fetch our source tables
     stab = sendSql(f"show tables in {srcCatalog}.{srcSchema}")
     srctables = [t[0] for t in stab]
-    assert srcSchema in tpchbuckets
-    numbuckets = tpchbuckets[srcSchema]
 
     threads = []
     for dstCatalog in dstCatalogs:
@@ -1184,13 +1180,18 @@ def copySchemaTables(srcCatalog: str, srcSchema: str,
                 dstSchema))
             dsttables = [d[0] for d in dtab]
 
+        if dstCatalog == hivecat:
+            assert srcCatalog == tpchcat
+            assert srcSchema in tpchbuckets
+            numbuckets = tpchbuckets[srcSchema]
+
         #
         # Now copy the data over from our source tables, one by one
         #
         for srctable in srctables:
             if srctable not in dsttables:
                 withc = ""
-                if dstCatalog == hivecat:
+                if dstCatalog == hivecat and numbuckets > 1:
                     bucketed_by = []
 
                     if srctable == 'lineitem':
@@ -1407,23 +1408,10 @@ def helmInstallRelease(module: str, env: dict = {}, debug: bool = False)\
     newchart = charts[module] + "-" + chartversion # which one to install?
 
     hivereset = False
-    workingrepo = repo
-    # There is a bug in Starburst's helm charts where load-balancers can only
-    # be on the unsecured port 8080. Fix this manually here.
-    if module == "enterprise" and (tlscoord or tlsinternal):
-        # Only write if the directory doesn't yet exist
-        targetdir = f"/tmp/repo-{repo}-{chartversion}"
-        if not os.path.exists(targetdir):
-            helm("pull {p}/{c} --version {v} --untar --untardir {d}".format(p =
-                repo, c = charts[module], v = chartversion, d = targetdir))
-            runStdout(f"patch -d {targetdir} -p1 -i {patchf}".split())
-            changed = True
-        workingrepo = targetdir
-
     if chart == None: # Nothing installed yet, so we need to install
         announce(f"Installing chart {newchart} using helm")
         helm("{h} install {r} {w}/{c} -f {y} --version {v}".format(h = helmns,
-            r = releases[module], w = workingrepo, c = charts[module], y =
+            r = releases[module], w = repo, c = charts[module], y =
             yamltmp, v = chartversion))
         if module == "hive":
             hivereset = True # freshly installed -> new postgres
@@ -1435,7 +1423,7 @@ def helmInstallRelease(module: str, env: dict = {}, debug: bool = False)\
             astr += ": {oc} -> {nc}".format(oc = chart, nc = newchart)
         announce(astr)
         helm("{h} upgrade {r} {w}/{c} -f {y} --version {v}".format(h = helmns,
-            r = releases[module], w = workingrepo, c = charts[module], y =
+            r = releases[module], w = repo, c = charts[module], y =
             yamltmp, v = chartversion))
 
         # Hive postgres DB will be rebuilt only if we rev a version
