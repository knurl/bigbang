<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">jdbc:trino://starburst.az.starburstdata.net:8080</stringProp>
        <stringProp name="driver">io.trino.jdbc.TrinoDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">1000000000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">600000</stringProp>
        <stringProp name="username">starburst_service</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery">SELECT 1</stringProp>
        <stringProp name="connectionProperties">clientTags=${__P(clientTag,td)}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOOPS, 4)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(THREADS)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">500</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1789464955">database</stringProp>
            <stringProp name="-907987551">schema</stringProp>
            <stringProp name="-980110702">prefix</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-264237960">
              <stringProp name="-1192492022">s3</stringProp>
              <stringProp name="1959489179">${__P(SCALESET)}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q01.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   customer_total_return AS (
    SELECT
      &quot;sr_customer_sk&quot; &quot;ctr_customer_sk&quot;
    , &quot;sr_store_sk&quot; &quot;ctr_store_sk&quot;
    , &quot;sum&quot;(&quot;sr_return_amt&quot;) &quot;ctr_total_return&quot;
    FROM
      ${database}.${schema}.${prefix}store_returns
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;sr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2000)
    GROUP BY &quot;sr_customer_sk&quot;, &quot;sr_store_sk&quot;
 ) 
 SELECT &quot;c_customer_id&quot;
 FROM
   customer_total_return ctr1
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ctr1&quot;.&quot;ctr_total_return&quot; &gt; (
       SELECT (&quot;avg&quot;(&quot;ctr_total_return&quot;) * DECIMAL &apos;1.2&apos;)
       FROM
         customer_total_return ctr2
       WHERE (&quot;ctr1&quot;.&quot;ctr_store_sk&quot; = &quot;ctr2&quot;.&quot;ctr_store_sk&quot;)
    ))
    AND (&quot;s_store_sk&quot; = &quot;ctr1&quot;.&quot;ctr_store_sk&quot;)
    AND (&quot;s_state&quot; = &apos;TN&apos;)
    AND (&quot;ctr1&quot;.&quot;ctr_customer_sk&quot; = &quot;c_customer_sk&quot;)
 ORDER BY &quot;c_customer_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q02.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   wscs AS (
    SELECT
      &quot;sold_date_sk&quot;
    , &quot;sales_price&quot;
    FROM
      (
       SELECT
         &quot;ws_sold_date_sk&quot; &quot;sold_date_sk&quot;
       , &quot;ws_ext_sales_price&quot; &quot;sales_price&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
    )  
 UNION ALL (
       SELECT
         &quot;cs_sold_date_sk&quot; &quot;sold_date_sk&quot;
       , &quot;cs_ext_sales_price&quot; &quot;sales_price&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
    ) ) 
 , wswscs AS (
    SELECT
      &quot;d_week_seq&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Sunday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;sun_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Monday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;mon_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Tuesday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;tue_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Wednesday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;wed_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Thursday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;thu_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Friday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;fri_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Saturday&apos;) THEN &quot;sales_price&quot; ELSE null END)) &quot;sat_sales&quot;
    FROM
      wscs
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_date_sk&quot; = &quot;sold_date_sk&quot;)
    GROUP BY &quot;d_week_seq&quot;
 ) 
 SELECT
   &quot;d_week_seq1&quot;
 , &quot;round&quot;((&quot;sun_sales1&quot; / &quot;sun_sales2&quot;), 2)
 , &quot;round&quot;((&quot;mon_sales1&quot; / &quot;mon_sales2&quot;), 2)
 , &quot;round&quot;((&quot;tue_sales1&quot; / &quot;tue_sales2&quot;), 2)
 , &quot;round&quot;((&quot;wed_sales1&quot; / &quot;wed_sales2&quot;), 2)
 , &quot;round&quot;((&quot;thu_sales1&quot; / &quot;thu_sales2&quot;), 2)
 , &quot;round&quot;((&quot;fri_sales1&quot; / &quot;fri_sales2&quot;), 2)
 , &quot;round&quot;((&quot;sat_sales1&quot; / &quot;sat_sales2&quot;), 2)
 FROM
   (
    SELECT
      &quot;wswscs&quot;.&quot;d_week_seq&quot; &quot;d_week_seq1&quot;
    , &quot;sun_sales&quot; &quot;sun_sales1&quot;
    , &quot;mon_sales&quot; &quot;mon_sales1&quot;
    , &quot;tue_sales&quot; &quot;tue_sales1&quot;
    , &quot;wed_sales&quot; &quot;wed_sales1&quot;
    , &quot;thu_sales&quot; &quot;thu_sales1&quot;
    , &quot;fri_sales&quot; &quot;fri_sales1&quot;
    , &quot;sat_sales&quot; &quot;sat_sales1&quot;
    FROM
      wswscs
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;${prefix}date_dim&quot;.&quot;d_week_seq&quot; = &quot;wswscs&quot;.&quot;d_week_seq&quot;)
       AND (&quot;d_year&quot; = 2001)
 )  y
 , (
    SELECT
      &quot;wswscs&quot;.&quot;d_week_seq&quot; &quot;d_week_seq2&quot;
    , &quot;sun_sales&quot; &quot;sun_sales2&quot;
    , &quot;mon_sales&quot; &quot;mon_sales2&quot;
    , &quot;tue_sales&quot; &quot;tue_sales2&quot;
    , &quot;wed_sales&quot; &quot;wed_sales2&quot;
    , &quot;thu_sales&quot; &quot;thu_sales2&quot;
    , &quot;fri_sales&quot; &quot;fri_sales2&quot;
    , &quot;sat_sales&quot; &quot;sat_sales2&quot;
    FROM
      wswscs
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;${prefix}date_dim&quot;.&quot;d_week_seq&quot; = &quot;wswscs&quot;.&quot;d_week_seq&quot;)
       AND (&quot;d_year&quot; = (2001 + 1))
 )  z
 WHERE (&quot;d_week_seq1&quot; = (&quot;d_week_seq2&quot; - 53))
 ORDER BY &quot;d_week_seq1&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q03.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> EXPLAIN ANALYZE SELECT
   &quot;dt&quot;.&quot;d_year&quot;
 , &quot;${prefix}item&quot;.&quot;i_brand_id&quot; &quot;brand_id&quot;
 , &quot;${prefix}item&quot;.&quot;i_brand&quot; &quot;brand&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;sum_agg&quot;
 FROM
   ${database}.${schema}.${prefix}date_dim dt
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;dt&quot;.&quot;d_date_sk&quot; = &quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot;)
    AND (&quot;${prefix}store_sales&quot;.&quot;ss_item_sk&quot; = &quot;${prefix}item&quot;.&quot;i_item_sk&quot;)
    AND (&quot;${prefix}item&quot;.&quot;i_manufact_id&quot; = 128)
    AND (&quot;dt&quot;.&quot;d_moy&quot; = 11)
 GROUP BY &quot;dt&quot;.&quot;d_year&quot;, &quot;${prefix}item&quot;.&quot;i_brand&quot;, &quot;${prefix}item&quot;.&quot;i_brand_id&quot;
 ORDER BY &quot;dt&quot;.&quot;d_year&quot; ASC, &quot;sum_agg&quot; DESC, &quot;brand_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q04.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> EXPLAIN ANALYZE WITH
   year_total AS (
    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;c_preferred_cust_flag&quot; &quot;customer_preferred_cust_flag&quot;
    , &quot;c_birth_country&quot; &quot;customer_birth_country&quot;
    , &quot;c_login&quot; &quot;customer_login&quot;
    , &quot;c_email_address&quot; &quot;customer_email_address&quot;
    , &quot;d_year&quot; &quot;dyear&quot;
    , &quot;sum&quot;(((((&quot;ss_ext_list_price&quot; - &quot;ss_ext_wholesale_cost&quot;) - &quot;ss_ext_discount_amt&quot;) + &quot;ss_ext_sales_price&quot;) / 2)) &quot;year_total&quot;
    , &apos;s&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;c_preferred_cust_flag&quot;, &quot;c_birth_country&quot;, &quot;c_login&quot;, &quot;c_email_address&quot;, &quot;d_year&quot;
 UNION ALL    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;c_preferred_cust_flag&quot; &quot;customer_preferred_cust_flag&quot;
    , &quot;c_birth_country&quot; &quot;customer_birth_country&quot;
    , &quot;c_login&quot; &quot;customer_login&quot;
    , &quot;c_email_address&quot; &quot;customer_email_address&quot;
    , &quot;d_year&quot; &quot;dyear&quot;
    , &quot;sum&quot;(((((&quot;cs_ext_list_price&quot; - &quot;cs_ext_wholesale_cost&quot;) - &quot;cs_ext_discount_amt&quot;) + &quot;cs_ext_sales_price&quot;) / 2)) &quot;year_total&quot;
    , &apos;c&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;cs_bill_customer_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;c_preferred_cust_flag&quot;, &quot;c_birth_country&quot;, &quot;c_login&quot;, &quot;c_email_address&quot;, &quot;d_year&quot;
 UNION ALL    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;c_preferred_cust_flag&quot; &quot;customer_preferred_cust_flag&quot;
    , &quot;c_birth_country&quot; &quot;customer_birth_country&quot;
    , &quot;c_login&quot; &quot;customer_login&quot;
    , &quot;c_email_address&quot; &quot;customer_email_address&quot;
    , &quot;d_year&quot; &quot;dyear&quot;
    , &quot;sum&quot;(((((&quot;ws_ext_list_price&quot; - &quot;ws_ext_wholesale_cost&quot;) - &quot;ws_ext_discount_amt&quot;) + &quot;ws_ext_sales_price&quot;) / 2)) &quot;year_total&quot;
    , &apos;w&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;c_preferred_cust_flag&quot;, &quot;c_birth_country&quot;, &quot;c_login&quot;, &quot;c_email_address&quot;, &quot;d_year&quot;
 ) 
 SELECT
   &quot;t_s_secyear&quot;.&quot;customer_id&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_first_name&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_last_name&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_preferred_cust_flag&quot;
 FROM
   year_total t_s_firstyear
 , year_total t_s_secyear
 , year_total t_c_firstyear
 , year_total t_c_secyear
 , year_total t_w_firstyear
 , year_total t_w_secyear
 WHERE (&quot;t_s_secyear&quot;.&quot;customer_id&quot; = &quot;t_s_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_c_secyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_c_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_secyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_c_firstyear&quot;.&quot;sale_type&quot; = &apos;c&apos;)
    AND (&quot;t_w_firstyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_secyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_c_secyear&quot;.&quot;sale_type&quot; = &apos;c&apos;)
    AND (&quot;t_w_secyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_firstyear&quot;.&quot;dyear&quot; = 2001)
    AND (&quot;t_s_secyear&quot;.&quot;dyear&quot; = (2001 + 1))
    AND (&quot;t_c_firstyear&quot;.&quot;dyear&quot; = 2001)
    AND (&quot;t_c_secyear&quot;.&quot;dyear&quot; = (2001 + 1))
    AND (&quot;t_w_firstyear&quot;.&quot;dyear&quot; = 2001)
    AND (&quot;t_w_secyear&quot;.&quot;dyear&quot; = (2001 + 1))
    AND (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND (&quot;t_c_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND ((CASE WHEN (&quot;t_c_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_c_secyear&quot;.&quot;year_total&quot; / &quot;t_c_firstyear&quot;.&quot;year_total&quot;) ELSE null END) &gt; (CASE WHEN (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_s_secyear&quot;.&quot;year_total&quot; / &quot;t_s_firstyear&quot;.&quot;year_total&quot;) ELSE null END))
    AND ((CASE WHEN (&quot;t_c_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_c_secyear&quot;.&quot;year_total&quot; / &quot;t_c_firstyear&quot;.&quot;year_total&quot;) ELSE null END) &gt; (CASE WHEN (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_w_secyear&quot;.&quot;year_total&quot; / &quot;t_w_firstyear&quot;.&quot;year_total&quot;) ELSE null END))
 ORDER BY &quot;t_s_secyear&quot;.&quot;customer_id&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_first_name&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_last_name&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_preferred_cust_flag&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q05.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ssr AS (
    SELECT
      &quot;s_store_id&quot;
    , &quot;sum&quot;(&quot;sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
    , &quot;sum&quot;(&quot;return_amt&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;net_loss&quot;) &quot;profit_loss&quot;
    FROM
      (
       SELECT
         &quot;ss_store_sk&quot; &quot;store_sk&quot;
       , &quot;ss_sold_date_sk&quot; &quot;date_sk&quot;
       , &quot;ss_ext_sales_price&quot; &quot;sales_price&quot;
       , &quot;ss_net_profit&quot; &quot;profit&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;return_amt&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;net_loss&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
 UNION ALL       SELECT
         &quot;sr_store_sk&quot; &quot;store_sk&quot;
       , &quot;sr_returned_date_sk&quot; &quot;date_sk&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;sales_price&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;profit&quot;
       , &quot;sr_return_amt&quot; &quot;return_amt&quot;
       , &quot;sr_net_loss&quot; &quot;net_loss&quot;
       FROM
         ${database}.${schema}.${prefix}store_returns
    )  salesreturns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;14&apos; DAY))
       AND (&quot;store_sk&quot; = &quot;s_store_sk&quot;)
    GROUP BY &quot;s_store_id&quot;
 ) 
 , csr AS (
    SELECT
      &quot;cp_catalog_page_id&quot;
    , &quot;sum&quot;(&quot;sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
    , &quot;sum&quot;(&quot;return_amt&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;net_loss&quot;) &quot;profit_loss&quot;
    FROM
      (
       SELECT
         &quot;cs_catalog_page_sk&quot; &quot;page_sk&quot;
       , &quot;cs_sold_date_sk&quot; &quot;date_sk&quot;
       , &quot;cs_ext_sales_price&quot; &quot;sales_price&quot;
       , &quot;cs_net_profit&quot; &quot;profit&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;return_amt&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;net_loss&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
 UNION ALL       SELECT
         &quot;cr_catalog_page_sk&quot; &quot;page_sk&quot;
       , &quot;cr_returned_date_sk&quot; &quot;date_sk&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;sales_price&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;profit&quot;
       , &quot;cr_return_amount&quot; &quot;return_amt&quot;
       , &quot;cr_net_loss&quot; &quot;net_loss&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_returns
    )  salesreturns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}catalog_page
    WHERE (&quot;date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;14&apos; DAY))
       AND (&quot;page_sk&quot; = &quot;cp_catalog_page_sk&quot;)
    GROUP BY &quot;cp_catalog_page_id&quot;
 ) 
 , wsr AS (
    SELECT
      &quot;web_site_id&quot;
    , &quot;sum&quot;(&quot;sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
    , &quot;sum&quot;(&quot;return_amt&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;net_loss&quot;) &quot;profit_loss&quot;
    FROM
      (
       SELECT
         &quot;ws_web_site_sk&quot; &quot;wsr_web_site_sk&quot;
       , &quot;ws_sold_date_sk&quot; &quot;date_sk&quot;
       , &quot;ws_ext_sales_price&quot; &quot;sales_price&quot;
       , &quot;ws_net_profit&quot; &quot;profit&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;return_amt&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;net_loss&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
 UNION ALL       SELECT
         &quot;ws_web_site_sk&quot; &quot;wsr_web_site_sk&quot;
       , &quot;wr_returned_date_sk&quot; &quot;date_sk&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;sales_price&quot;
       , CAST(0 AS DECIMAL(7,2)) &quot;profit&quot;
       , &quot;wr_return_amt&quot; &quot;return_amt&quot;
       , &quot;wr_net_loss&quot; &quot;net_loss&quot;
       FROM
         (${database}.${schema}.${prefix}web_returns
       LEFT JOIN ${database}.${schema}.${prefix}web_sales ON (&quot;wr_item_sk&quot; = &quot;ws_item_sk&quot;)
          AND (&quot;wr_order_number&quot; = &quot;ws_order_number&quot;))
    )  salesreturns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}web_site
    WHERE (&quot;date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;14&apos; DAY))
       AND (&quot;wsr_web_site_sk&quot; = &quot;web_site_sk&quot;)
    GROUP BY &quot;web_site_id&quot;
 ) 
 SELECT
   &quot;channel&quot;
 , &quot;id&quot;
 , &quot;sum&quot;(&quot;sales&quot;) &quot;sales&quot;
 , &quot;sum&quot;(&quot;returns&quot;) &quot;returns&quot;
 , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;store&apos;, &quot;s_store_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , (&quot;profit&quot; - &quot;profit_loss&quot;) &quot;profit&quot;
    FROM
      ssr
 UNION ALL    SELECT
      &apos;catalog channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;catalog_page&apos;, &quot;cp_catalog_page_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , (&quot;profit&quot; - &quot;profit_loss&quot;) &quot;profit&quot;
    FROM
      csr
 UNION ALL    SELECT
      &apos;web channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;web_site&apos;, &quot;web_site_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , (&quot;profit&quot; - &quot;profit_loss&quot;) &quot;profit&quot;
    FROM
      wsr
 )  x
 GROUP BY ROLLUP (channel, id)
 ORDER BY &quot;channel&quot; ASC, &quot;id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q06.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;a&quot;.&quot;ca_state&quot; &quot;STATE&quot;
 , &quot;count&quot;(*) &quot;cnt&quot;
 FROM
   ${database}.${schema}.${prefix}customer_address a
 , ${database}.${schema}.${prefix}customer c
 , ${database}.${schema}.${prefix}store_sales s
 , ${database}.${schema}.${prefix}date_dim d
 , ${database}.${schema}.${prefix}item i
 WHERE (&quot;a&quot;.&quot;ca_address_sk&quot; = &quot;c&quot;.&quot;c_current_addr_sk&quot;)
    AND (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;s&quot;.&quot;ss_customer_sk&quot;)
    AND (&quot;s&quot;.&quot;ss_sold_date_sk&quot; = &quot;d&quot;.&quot;d_date_sk&quot;)
    AND (&quot;s&quot;.&quot;ss_item_sk&quot; = &quot;i&quot;.&quot;i_item_sk&quot;)
    AND (&quot;d&quot;.&quot;d_month_seq&quot; = (
       SELECT DISTINCT &quot;d_month_seq&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_year&quot; = 2001)
          AND (&quot;d_moy&quot; = 1)
    ))
    AND (&quot;i&quot;.&quot;i_current_price&quot; &gt; (DECIMAL &apos;1.2&apos; * (
          SELECT &quot;avg&quot;(&quot;j&quot;.&quot;i_current_price&quot;)
          FROM
            ${database}.${schema}.${prefix}item j
          WHERE (&quot;j&quot;.&quot;i_category&quot; = &quot;i&quot;.&quot;i_category&quot;)
       )))
 GROUP BY &quot;a&quot;.&quot;ca_state&quot;
 HAVING (&quot;count&quot;(*) &gt;= 10)
 ORDER BY &quot;cnt&quot; ASC, &quot;a&quot;.&quot;ca_state&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q07.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;avg&quot;(&quot;ss_quantity&quot;) &quot;agg1&quot;
 , &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;agg2&quot;
 , &quot;avg&quot;(&quot;ss_coupon_amt&quot;) &quot;agg3&quot;
 , &quot;avg&quot;(&quot;ss_sales_price&quot;) &quot;agg4&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}promotion
 WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;ss_cdemo_sk&quot; = &quot;cd_demo_sk&quot;)
    AND (&quot;ss_promo_sk&quot; = &quot;p_promo_sk&quot;)
    AND (&quot;cd_gender&quot; = &apos;M&apos;)
    AND (&quot;cd_marital_status&quot; = &apos;S&apos;)
    AND (&quot;cd_education_status&quot; = &apos;College&apos;)
    AND ((&quot;p_channel_email&quot; = &apos;N&apos;)
       OR (&quot;p_channel_event&quot; = &apos;N&apos;))
    AND (&quot;d_year&quot; = 2000)
 GROUP BY &quot;i_item_id&quot;
 ORDER BY &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q08.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;s_store_name&quot;
 , &quot;sum&quot;(&quot;ss_net_profit&quot;)
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store
 , (
    SELECT &quot;ca_zip&quot;
    FROM
      (
 (
          SELECT &quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) &quot;ca_zip&quot;
          FROM
            ${database}.${schema}.${prefix}customer_address
          WHERE (&quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) IN (
                 &apos;24128&apos;
               , &apos;57834&apos;
               , &apos;13354&apos;
               , &apos;15734&apos;
               , &apos;78668&apos;
               , &apos;76232&apos;
               , &apos;62878&apos;
               , &apos;45375&apos;
               , &apos;63435&apos;
               , &apos;22245&apos;
               , &apos;65084&apos;
               , &apos;49130&apos;
               , &apos;40558&apos;
               , &apos;25733&apos;
               , &apos;15798&apos;
               , &apos;87816&apos;
               , &apos;81096&apos;
               , &apos;56458&apos;
               , &apos;35474&apos;
               , &apos;27156&apos;
               , &apos;83926&apos;
               , &apos;18840&apos;
               , &apos;28286&apos;
               , &apos;24676&apos;
               , &apos;37930&apos;
               , &apos;77556&apos;
               , &apos;27700&apos;
               , &apos;45266&apos;
               , &apos;94627&apos;
               , &apos;62971&apos;
               , &apos;20548&apos;
               , &apos;23470&apos;
               , &apos;47305&apos;
               , &apos;53535&apos;
               , &apos;21337&apos;
               , &apos;26231&apos;
               , &apos;50412&apos;
               , &apos;69399&apos;
               , &apos;17879&apos;
               , &apos;51622&apos;
               , &apos;43848&apos;
               , &apos;21195&apos;
               , &apos;83921&apos;
               , &apos;15559&apos;
               , &apos;67853&apos;
               , &apos;15126&apos;
               , &apos;16021&apos;
               , &apos;26233&apos;
               , &apos;53268&apos;
               , &apos;10567&apos;
               , &apos;91137&apos;
               , &apos;76107&apos;
               , &apos;11101&apos;
               , &apos;59166&apos;
               , &apos;38415&apos;
               , &apos;61265&apos;
               , &apos;71954&apos;
               , &apos;15371&apos;
               , &apos;11928&apos;
               , &apos;15455&apos;
               , &apos;98294&apos;
               , &apos;68309&apos;
               , &apos;69913&apos;
               , &apos;59402&apos;
               , &apos;58263&apos;
               , &apos;25782&apos;
               , &apos;18119&apos;
               , &apos;35942&apos;
               , &apos;33282&apos;
               , &apos;42029&apos;
               , &apos;17920&apos;
               , &apos;98359&apos;
               , &apos;15882&apos;
               , &apos;45721&apos;
               , &apos;60279&apos;
               , &apos;18426&apos;
               , &apos;64544&apos;
               , &apos;25631&apos;
               , &apos;43933&apos;
               , &apos;37125&apos;
               , &apos;98235&apos;
               , &apos;10336&apos;
               , &apos;24610&apos;
               , &apos;68101&apos;
               , &apos;56240&apos;
               , &apos;40081&apos;
               , &apos;86379&apos;
               , &apos;44165&apos;
               , &apos;33515&apos;
               , &apos;88190&apos;
               , &apos;84093&apos;
               , &apos;27068&apos;
               , &apos;99076&apos;
               , &apos;36634&apos;
               , &apos;50308&apos;
               , &apos;28577&apos;
               , &apos;39736&apos;
               , &apos;33786&apos;
               , &apos;71286&apos;
               , &apos;26859&apos;
               , &apos;55565&apos;
               , &apos;98569&apos;
               , &apos;70738&apos;
               , &apos;19736&apos;
               , &apos;64457&apos;
               , &apos;17183&apos;
               , &apos;28915&apos;
               , &apos;26653&apos;
               , &apos;58058&apos;
               , &apos;89091&apos;
               , &apos;54601&apos;
               , &apos;24206&apos;
               , &apos;14328&apos;
               , &apos;55253&apos;
               , &apos;82136&apos;
               , &apos;67897&apos;
               , &apos;56529&apos;
               , &apos;72305&apos;
               , &apos;67473&apos;
               , &apos;62377&apos;
               , &apos;22752&apos;
               , &apos;57647&apos;
               , &apos;62496&apos;
               , &apos;41918&apos;
               , &apos;36233&apos;
               , &apos;86284&apos;
               , &apos;54917&apos;
               , &apos;22152&apos;
               , &apos;19515&apos;
               , &apos;63837&apos;
               , &apos;18376&apos;
               , &apos;42961&apos;
               , &apos;10144&apos;
               , &apos;36495&apos;
               , &apos;58078&apos;
               , &apos;38607&apos;
               , &apos;91110&apos;
               , &apos;64147&apos;
               , &apos;19430&apos;
               , &apos;17043&apos;
               , &apos;45200&apos;
               , &apos;63981&apos;
               , &apos;48425&apos;
               , &apos;22351&apos;
               , &apos;30010&apos;
               , &apos;21756&apos;
               , &apos;14922&apos;
               , &apos;14663&apos;
               , &apos;77191&apos;
               , &apos;60099&apos;
               , &apos;29741&apos;
               , &apos;36420&apos;
               , &apos;21076&apos;
               , &apos;91393&apos;
               , &apos;28810&apos;
               , &apos;96765&apos;
               , &apos;23006&apos;
               , &apos;18799&apos;
               , &apos;49156&apos;
               , &apos;98025&apos;
               , &apos;23932&apos;
               , &apos;67467&apos;
               , &apos;30450&apos;
               , &apos;50298&apos;
               , &apos;29178&apos;
               , &apos;89360&apos;
               , &apos;32754&apos;
               , &apos;63089&apos;
               , &apos;87501&apos;
               , &apos;87343&apos;
               , &apos;29839&apos;
               , &apos;30903&apos;
               , &apos;81019&apos;
               , &apos;18652&apos;
               , &apos;73273&apos;
               , &apos;25989&apos;
               , &apos;20260&apos;
               , &apos;68893&apos;
               , &apos;53179&apos;
               , &apos;30469&apos;
               , &apos;28898&apos;
               , &apos;31671&apos;
               , &apos;24996&apos;
               , &apos;18767&apos;
               , &apos;64034&apos;
               , &apos;91068&apos;
               , &apos;51798&apos;
               , &apos;51200&apos;
               , &apos;63193&apos;
               , &apos;39516&apos;
               , &apos;72550&apos;
               , &apos;72325&apos;
               , &apos;51211&apos;
               , &apos;23968&apos;
               , &apos;86057&apos;
               , &apos;10390&apos;
               , &apos;85816&apos;
               , &apos;45692&apos;
               , &apos;65164&apos;
               , &apos;21309&apos;
               , &apos;18845&apos;
               , &apos;68621&apos;
               , &apos;92712&apos;
               , &apos;68880&apos;
               , &apos;90257&apos;
               , &apos;47770&apos;
               , &apos;13955&apos;
               , &apos;70466&apos;
               , &apos;21286&apos;
               , &apos;67875&apos;
               , &apos;82636&apos;
               , &apos;36446&apos;
               , &apos;79994&apos;
               , &apos;72823&apos;
               , &apos;40162&apos;
               , &apos;41367&apos;
               , &apos;41766&apos;
               , &apos;22437&apos;
               , &apos;58470&apos;
               , &apos;11356&apos;
               , &apos;76638&apos;
               , &apos;68806&apos;
               , &apos;25280&apos;
               , &apos;67301&apos;
               , &apos;73650&apos;
               , &apos;86198&apos;
               , &apos;16725&apos;
               , &apos;38935&apos;
               , &apos;13394&apos;
               , &apos;61810&apos;
               , &apos;81312&apos;
               , &apos;15146&apos;
               , &apos;71791&apos;
               , &apos;31016&apos;
               , &apos;72013&apos;
               , &apos;37126&apos;
               , &apos;22744&apos;
               , &apos;73134&apos;
               , &apos;70372&apos;
               , &apos;30431&apos;
               , &apos;39192&apos;
               , &apos;35850&apos;
               , &apos;56571&apos;
               , &apos;67030&apos;
               , &apos;22461&apos;
               , &apos;88424&apos;
               , &apos;88086&apos;
               , &apos;14060&apos;
               , &apos;40604&apos;
               , &apos;19512&apos;
               , &apos;72175&apos;
               , &apos;51649&apos;
               , &apos;19505&apos;
               , &apos;24317&apos;
               , &apos;13375&apos;
               , &apos;81426&apos;
               , &apos;18270&apos;
               , &apos;72425&apos;
               , &apos;45748&apos;
               , &apos;55307&apos;
               , &apos;53672&apos;
               , &apos;52867&apos;
               , &apos;56575&apos;
               , &apos;39127&apos;
               , &apos;30625&apos;
               , &apos;10445&apos;
               , &apos;39972&apos;
               , &apos;74351&apos;
               , &apos;26065&apos;
               , &apos;83849&apos;
               , &apos;42666&apos;
               , &apos;96976&apos;
               , &apos;68786&apos;
               , &apos;77721&apos;
               , &apos;68908&apos;
               , &apos;66864&apos;
               , &apos;63792&apos;
               , &apos;51650&apos;
               , &apos;31029&apos;
               , &apos;26689&apos;
               , &apos;66708&apos;
               , &apos;11376&apos;
               , &apos;20004&apos;
               , &apos;31880&apos;
               , &apos;96451&apos;
               , &apos;41248&apos;
               , &apos;94898&apos;
               , &apos;18383&apos;
               , &apos;60576&apos;
               , &apos;38193&apos;
               , &apos;48583&apos;
               , &apos;13595&apos;
               , &apos;76614&apos;
               , &apos;24671&apos;
               , &apos;46820&apos;
               , &apos;82276&apos;
               , &apos;10516&apos;
               , &apos;11634&apos;
               , &apos;45549&apos;
               , &apos;88885&apos;
               , &apos;18842&apos;
               , &apos;90225&apos;
               , &apos;18906&apos;
               , &apos;13376&apos;
               , &apos;84935&apos;
               , &apos;78890&apos;
               , &apos;58943&apos;
               , &apos;15765&apos;
               , &apos;50016&apos;
               , &apos;69035&apos;
               , &apos;49448&apos;
               , &apos;39371&apos;
               , &apos;41368&apos;
               , &apos;33123&apos;
               , &apos;83144&apos;
               , &apos;14089&apos;
               , &apos;94945&apos;
               , &apos;73241&apos;
               , &apos;19769&apos;
               , &apos;47537&apos;
               , &apos;38122&apos;
               , &apos;28587&apos;
               , &apos;76698&apos;
               , &apos;22927&apos;
               , &apos;56616&apos;
               , &apos;34425&apos;
               , &apos;96576&apos;
               , &apos;78567&apos;
               , &apos;97789&apos;
               , &apos;94983&apos;
               , &apos;79077&apos;
               , &apos;57855&apos;
               , &apos;97189&apos;
               , &apos;46081&apos;
               , &apos;48033&apos;
               , &apos;19849&apos;
               , &apos;28488&apos;
               , &apos;28545&apos;
               , &apos;72151&apos;
               , &apos;69952&apos;
               , &apos;43285&apos;
               , &apos;26105&apos;
               , &apos;76231&apos;
               , &apos;15723&apos;
               , &apos;25486&apos;
               , &apos;39861&apos;
               , &apos;83933&apos;
               , &apos;75691&apos;
               , &apos;46136&apos;
               , &apos;61547&apos;
               , &apos;66162&apos;
               , &apos;25858&apos;
               , &apos;22246&apos;
               , &apos;51949&apos;
               , &apos;27385&apos;
               , &apos;77610&apos;
               , &apos;34322&apos;
               , &apos;51061&apos;
               , &apos;68100&apos;
               , &apos;61860&apos;
               , &apos;13695&apos;
               , &apos;44438&apos;
               , &apos;90578&apos;
               , &apos;96888&apos;
               , &apos;58048&apos;
               , &apos;99543&apos;
               , &apos;73171&apos;
               , &apos;56691&apos;
               , &apos;64528&apos;
               , &apos;56910&apos;
               , &apos;83444&apos;
               , &apos;30122&apos;
               , &apos;68014&apos;
               , &apos;14171&apos;
               , &apos;16807&apos;
               , &apos;83041&apos;
               , &apos;34102&apos;
               , &apos;51103&apos;
               , &apos;79777&apos;
               , &apos;17871&apos;
               , &apos;12305&apos;
               , &apos;22685&apos;
               , &apos;94167&apos;
               , &apos;28709&apos;
               , &apos;35258&apos;
               , &apos;57665&apos;
               , &apos;71256&apos;
               , &apos;57047&apos;
               , &apos;11489&apos;
               , &apos;31387&apos;
               , &apos;68341&apos;
               , &apos;78451&apos;
               , &apos;14867&apos;
               , &apos;25103&apos;
               , &apos;35458&apos;
               , &apos;25003&apos;
               , &apos;54364&apos;
               , &apos;73520&apos;
               , &apos;32213&apos;
               , &apos;35576&apos;))
       )       INTERSECT (
          SELECT &quot;ca_zip&quot;
          FROM
            (
             SELECT
               &quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) &quot;ca_zip&quot;
             , &quot;count&quot;(*) &quot;cnt&quot;
             FROM
               ${database}.${schema}.${prefix}customer_address
             , ${database}.${schema}.${prefix}customer
             WHERE (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
                AND (&quot;c_preferred_cust_flag&quot; = &apos;Y&apos;)
             GROUP BY &quot;ca_zip&quot;
             HAVING (&quot;count&quot;(*) &gt; 10)
          )  a1
       )    )  a2
 )  v1
 WHERE (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
    AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_qoy&quot; = 2)
    AND (&quot;d_year&quot; = 1998)
    AND (&quot;substr&quot;(&quot;s_zip&quot;, 1, 2) = &quot;substr&quot;(&quot;v1&quot;.&quot;ca_zip&quot;, 1, 2))
 GROUP BY &quot;s_store_name&quot;
 ORDER BY &quot;s_store_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q09.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   (CASE WHEN ((
       SELECT &quot;count&quot;(*)
       FROM
         ${database}.${schema}.${prefix}store_sales
       WHERE (&quot;ss_quantity&quot; BETWEEN 1 AND 20)
    ) &gt; 74129) THEN (
    SELECT &quot;avg&quot;(&quot;ss_ext_discount_amt&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 1 AND 20)
 ) ELSE (
    SELECT &quot;avg&quot;(&quot;ss_net_paid&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 1 AND 20)
 ) END) &quot;bucket1&quot;
 , (CASE WHEN ((
       SELECT &quot;count&quot;(*)
       FROM
         ${database}.${schema}.${prefix}store_sales
       WHERE (&quot;ss_quantity&quot; BETWEEN 21 AND 40)
    ) &gt; 122840) THEN (
    SELECT &quot;avg&quot;(&quot;ss_ext_discount_amt&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 21 AND 40)
 ) ELSE (
    SELECT &quot;avg&quot;(&quot;ss_net_paid&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 21 AND 40)
 ) END) &quot;bucket2&quot;
 , (CASE WHEN ((
       SELECT &quot;count&quot;(*)
       FROM
         ${database}.${schema}.${prefix}store_sales
       WHERE (&quot;ss_quantity&quot; BETWEEN 41 AND 60)
    ) &gt; 56580) THEN (
    SELECT &quot;avg&quot;(&quot;ss_ext_discount_amt&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 41 AND 60)
 ) ELSE (
    SELECT &quot;avg&quot;(&quot;ss_net_paid&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 41 AND 60)
 ) END) &quot;bucket3&quot;
 , (CASE WHEN ((
       SELECT &quot;count&quot;(*)
       FROM
         ${database}.${schema}.${prefix}store_sales
       WHERE (&quot;ss_quantity&quot; BETWEEN 61 AND 80)
    ) &gt; 10097) THEN (
    SELECT &quot;avg&quot;(&quot;ss_ext_discount_amt&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 61 AND 80)
 ) ELSE (
    SELECT &quot;avg&quot;(&quot;ss_net_paid&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 61 AND 80)
 ) END) &quot;bucket4&quot;
 , (CASE WHEN ((
       SELECT &quot;count&quot;(*)
       FROM
         ${database}.${schema}.${prefix}store_sales
       WHERE (&quot;ss_quantity&quot; BETWEEN 81 AND 100)
    ) &gt; 165306) THEN (
    SELECT &quot;avg&quot;(&quot;ss_ext_discount_amt&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 81 AND 100)
 ) ELSE (
    SELECT &quot;avg&quot;(&quot;ss_net_paid&quot;)
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 81 AND 100)
 ) END) &quot;bucket5&quot;
 FROM
   ${database}.${schema}.${prefix}reason
 WHERE (&quot;r_reason_sk&quot; = 1)

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q10.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;cd_gender&quot;
 , &quot;cd_marital_status&quot;
 , &quot;cd_education_status&quot;
 , &quot;count&quot;(*) &quot;cnt1&quot;
 , &quot;cd_purchase_estimate&quot;
 , &quot;count&quot;(*) &quot;cnt2&quot;
 , &quot;cd_credit_rating&quot;
 , &quot;count&quot;(*) &quot;cnt3&quot;
 , &quot;cd_dep_count&quot;
 , &quot;count&quot;(*) &quot;cnt4&quot;
 , &quot;cd_dep_employed_count&quot;
 , &quot;count&quot;(*) &quot;cnt5&quot;
 , &quot;cd_dep_college_count&quot;
 , &quot;count&quot;(*) &quot;cnt6&quot;
 FROM
   ${database}.${schema}.${prefix}customer c
 , ${database}.${schema}.${prefix}customer_address ca
 , ${database}.${schema}.${prefix}customer_demographics
 WHERE (&quot;c&quot;.&quot;c_current_addr_sk&quot; = &quot;ca&quot;.&quot;ca_address_sk&quot;)
    AND (&quot;ca_county&quot; IN (&apos;Rush County&apos;, &apos;Toole County&apos;, &apos;Jefferson County&apos;, &apos;Dona Ana County&apos;, &apos;La Porte County&apos;))
    AND (&quot;cd_demo_sk&quot; = &quot;c&quot;.&quot;c_current_cdemo_sk&quot;)
    AND (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2002)
       AND (&quot;d_moy&quot; BETWEEN 1 AND (1 + 3))
 ))
    AND ((EXISTS (
       SELECT *
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2002)
          AND (&quot;d_moy&quot; BETWEEN 1 AND (1 + 3))
    ))
       OR (EXISTS (
       SELECT *
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;cs_ship_customer_sk&quot;)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2002)
          AND (&quot;d_moy&quot; BETWEEN 1 AND (1 + 3))
    )))
 GROUP BY &quot;cd_gender&quot;, &quot;cd_marital_status&quot;, &quot;cd_education_status&quot;, &quot;cd_purchase_estimate&quot;, &quot;cd_credit_rating&quot;, &quot;cd_dep_count&quot;, &quot;cd_dep_employed_count&quot;, &quot;cd_dep_college_count&quot;
 ORDER BY &quot;cd_gender&quot; ASC, &quot;cd_marital_status&quot; ASC, &quot;cd_education_status&quot; ASC, &quot;cd_purchase_estimate&quot; ASC, &quot;cd_credit_rating&quot; ASC, &quot;cd_dep_count&quot; ASC, &quot;cd_dep_employed_count&quot; ASC, &quot;cd_dep_college_count&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q11.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   year_total AS (
    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;c_preferred_cust_flag&quot; &quot;customer_preferred_cust_flag&quot;
    , &quot;c_birth_country&quot; &quot;customer_birth_country&quot;
    , &quot;c_login&quot; &quot;customer_login&quot;
    , &quot;c_email_address&quot; &quot;customer_email_address&quot;
    , &quot;d_year&quot; &quot;dyear&quot;
    , &quot;sum&quot;((&quot;ss_ext_list_price&quot; - &quot;ss_ext_discount_amt&quot;)) &quot;year_total&quot;
    , &apos;s&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;c_preferred_cust_flag&quot;, &quot;c_birth_country&quot;, &quot;c_login&quot;, &quot;c_email_address&quot;, &quot;d_year&quot;
 UNION ALL    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;c_preferred_cust_flag&quot; &quot;customer_preferred_cust_flag&quot;
    , &quot;c_birth_country&quot; &quot;customer_birth_country&quot;
    , &quot;c_login&quot; &quot;customer_login&quot;
    , &quot;c_email_address&quot; &quot;customer_email_address&quot;
    , &quot;d_year&quot; &quot;dyear&quot;
    , &quot;sum&quot;((&quot;ws_ext_list_price&quot; - &quot;ws_ext_discount_amt&quot;)) &quot;year_total&quot;
    , &apos;w&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;c_preferred_cust_flag&quot;, &quot;c_birth_country&quot;, &quot;c_login&quot;, &quot;c_email_address&quot;, &quot;d_year&quot;
 ) 
 SELECT
   &quot;t_s_secyear&quot;.&quot;customer_id&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_first_name&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_last_name&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_preferred_cust_flag&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_birth_country&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_login&quot;
 FROM
   year_total t_s_firstyear
 , year_total t_s_secyear
 , year_total t_w_firstyear
 , year_total t_w_secyear
 WHERE (&quot;t_s_secyear&quot;.&quot;customer_id&quot; = &quot;t_s_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_secyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_w_firstyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_secyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_w_secyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_firstyear&quot;.&quot;dyear&quot; = 2001)
    AND (&quot;t_s_secyear&quot;.&quot;dyear&quot; = (2001 + 1))
    AND (&quot;t_w_firstyear&quot;.&quot;dyear&quot; = 2001)
    AND (&quot;t_w_secyear&quot;.&quot;dyear&quot; = (2001 + 1))
    AND (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND ((CASE WHEN (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_w_secyear&quot;.&quot;year_total&quot; / &quot;t_w_firstyear&quot;.&quot;year_total&quot;) ELSE DECIMAL &apos;0.0&apos; END) &gt; (CASE WHEN (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_s_secyear&quot;.&quot;year_total&quot; / &quot;t_s_firstyear&quot;.&quot;year_total&quot;) ELSE DECIMAL &apos;0.0&apos; END))
 ORDER BY &quot;t_s_secyear&quot;.&quot;customer_id&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_first_name&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_last_name&quot; ASC, &quot;t_s_secyear&quot;.&quot;customer_preferred_cust_flag&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q12.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;i_category&quot;
 , &quot;i_class&quot;
 , &quot;i_current_price&quot;
 , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;${database}.${schema}.${prefix}itemrevenue&quot;
 , ((&quot;sum&quot;(&quot;ws_ext_sales_price&quot;) * 100) / &quot;sum&quot;(&quot;sum&quot;(&quot;ws_ext_sales_price&quot;)) OVER (PARTITION BY &quot;i_class&quot;)) &quot;revenueratio&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_category&quot; IN (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;))
    AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;1999-02-22&apos; AS DATE) AND (CAST(&apos;1999-02-22&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;i_category&quot;, &quot;i_class&quot;, &quot;i_current_price&quot;
 ORDER BY &quot;i_category&quot; ASC, &quot;i_class&quot; ASC, &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;revenueratio&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q13.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;avg&quot;(&quot;ss_quantity&quot;)
 , &quot;avg&quot;(&quot;ss_ext_sales_price&quot;)
 , &quot;avg&quot;(&quot;ss_ext_wholesale_cost&quot;)
 , &quot;sum&quot;(&quot;ss_ext_wholesale_cost&quot;)
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}household_demographics
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_year&quot; = 2001)
    AND (((&quot;ss_hdemo_sk&quot; = &quot;hd_demo_sk&quot;)
          AND (&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;M&apos;)
          AND (&quot;cd_education_status&quot; = &apos;Advanced Degree&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;100.00&apos; AND DECIMAL &apos;150.00&apos;)
          AND (&quot;hd_dep_count&quot; = 3))
       OR ((&quot;ss_hdemo_sk&quot; = &quot;hd_demo_sk&quot;)
          AND (&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;S&apos;)
          AND (&quot;cd_education_status&quot; = &apos;College&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;50.00&apos; AND DECIMAL &apos;100.00&apos;)
          AND (&quot;hd_dep_count&quot; = 1))
       OR ((&quot;ss_hdemo_sk&quot; = &quot;hd_demo_sk&quot;)
          AND (&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;W&apos;)
          AND (&quot;cd_education_status&quot; = &apos;2 yr Degree&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;150.00&apos; AND DECIMAL &apos;200.00&apos;)
          AND (&quot;hd_dep_count&quot; = 1)))
    AND (((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;TX&apos;      , &apos;OH&apos;      , &apos;TX&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 100 AND 200))
       OR ((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;OR&apos;      , &apos;NM&apos;      , &apos;KY&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 150 AND 300))
       OR ((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;VA&apos;      , &apos;TX&apos;      , &apos;MS&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 50 AND 250)))

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14_1.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   cross_items AS (
    SELECT &quot;i_item_sk&quot; &quot;ss_item_sk&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , (
       SELECT
         &quot;iss&quot;.&quot;i_brand_id&quot; &quot;brand_id&quot;
       , &quot;iss&quot;.&quot;i_class_id&quot; &quot;class_id&quot;
       , &quot;iss&quot;.&quot;i_category_id&quot; &quot;category_id&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}item iss
       , ${database}.${schema}.${prefix}date_dim d1
       WHERE (&quot;ss_item_sk&quot; = &quot;iss&quot;.&quot;i_item_sk&quot;)
          AND (&quot;ss_sold_date_sk&quot; = &quot;d1&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d1&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 INTERSECT       SELECT
         &quot;ics&quot;.&quot;i_brand_id&quot;
       , &quot;ics&quot;.&quot;i_class_id&quot;
       , &quot;ics&quot;.&quot;i_category_id&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}item ics
       , ${database}.${schema}.${prefix}date_dim d2
       WHERE (&quot;cs_item_sk&quot; = &quot;ics&quot;.&quot;i_item_sk&quot;)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d2&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 INTERSECT       SELECT
         &quot;iws&quot;.&quot;i_brand_id&quot;
       , &quot;iws&quot;.&quot;i_class_id&quot;
       , &quot;iws&quot;.&quot;i_category_id&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}item iws
       , ${database}.${schema}.${prefix}date_dim d3
       WHERE (&quot;ws_item_sk&quot; = &quot;iws&quot;.&quot;i_item_sk&quot;)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d3&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
    ) 
    WHERE (&quot;i_brand_id&quot; = &quot;brand_id&quot;)
       AND (&quot;i_class_id&quot; = &quot;class_id&quot;)
       AND (&quot;i_category_id&quot; = &quot;category_id&quot;)
 ) 
 , avg_sales AS (
    SELECT &quot;avg&quot;((&quot;quantity&quot; * &quot;list_price&quot;)) &quot;average_sales&quot;
    FROM
      (
       SELECT
         &quot;ss_quantity&quot; &quot;quantity&quot;
       , &quot;ss_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 UNION ALL       SELECT
         &quot;cs_quantity&quot; &quot;quantity&quot;
       , &quot;cs_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 UNION ALL       SELECT
         &quot;ws_quantity&quot; &quot;quantity&quot;
       , &quot;ws_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
    )  x
 ) 
 SELECT
   &quot;channel&quot;
 , &quot;i_brand_id&quot;
 , &quot;i_class_id&quot;
 , &quot;i_category_id&quot;
 , &quot;sum&quot;(&quot;sales&quot;)
 , &quot;sum&quot;(&quot;number_sales&quot;)
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store&apos; &quot;channel&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &quot;sales&quot;
    , &quot;count&quot;(*) &quot;number_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_item_sk&quot; IN (
       SELECT &quot;ss_item_sk&quot;
       FROM
         cross_items
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = (1999 + 2))
       AND (&quot;d_moy&quot; = 11)
    GROUP BY &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;
    HAVING (&quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &gt; (
          SELECT &quot;average_sales&quot;
          FROM
            avg_sales
       ))
 UNION ALL    SELECT
      &apos;catalog&apos; &quot;channel&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;sum&quot;((&quot;cs_quantity&quot; * &quot;cs_list_price&quot;)) &quot;sales&quot;
    , &quot;count&quot;(*) &quot;number_sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cs_item_sk&quot; IN (
       SELECT &quot;ss_item_sk&quot;
       FROM
         cross_items
    ))
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = (1999 + 2))
       AND (&quot;d_moy&quot; = 11)
    GROUP BY &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;
    HAVING (&quot;sum&quot;((&quot;cs_quantity&quot; * &quot;cs_list_price&quot;)) &gt; (
          SELECT &quot;average_sales&quot;
          FROM
            avg_sales
       ))
 UNION ALL    SELECT
      &apos;web&apos; &quot;channel&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;sum&quot;((&quot;ws_quantity&quot; * &quot;ws_list_price&quot;)) &quot;sales&quot;
    , &quot;count&quot;(*) &quot;number_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ws_item_sk&quot; IN (
       SELECT &quot;ss_item_sk&quot;
       FROM
         cross_items
    ))
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = (1999 + 2))
       AND (&quot;d_moy&quot; = 11)
    GROUP BY &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;
    HAVING (&quot;sum&quot;((&quot;ws_quantity&quot; * &quot;ws_list_price&quot;)) &gt; (
          SELECT &quot;average_sales&quot;
          FROM
            avg_sales
       ))
 )  y
 GROUP BY ROLLUP (channel, i_brand_id, i_class_id, i_category_id)
 ORDER BY &quot;channel&quot; ASC, &quot;i_brand_id&quot; ASC, &quot;i_class_id&quot; ASC, &quot;i_category_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14_2.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   cross_items AS (
    SELECT &quot;i_item_sk&quot; &quot;ss_item_sk&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , (
       SELECT
         &quot;iss&quot;.&quot;i_brand_id&quot; &quot;brand_id&quot;
       , &quot;iss&quot;.&quot;i_class_id&quot; &quot;class_id&quot;
       , &quot;iss&quot;.&quot;i_category_id&quot; &quot;category_id&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}item iss
       , ${database}.${schema}.${prefix}date_dim d1
       WHERE (&quot;ss_item_sk&quot; = &quot;iss&quot;.&quot;i_item_sk&quot;)
          AND (&quot;ss_sold_date_sk&quot; = &quot;d1&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d1&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 INTERSECT       SELECT
         &quot;ics&quot;.&quot;i_brand_id&quot;
       , &quot;ics&quot;.&quot;i_class_id&quot;
       , &quot;ics&quot;.&quot;i_category_id&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}item ics
       , ${database}.${schema}.${prefix}date_dim d2
       WHERE (&quot;cs_item_sk&quot; = &quot;ics&quot;.&quot;i_item_sk&quot;)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d2&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 INTERSECT       SELECT
         &quot;iws&quot;.&quot;i_brand_id&quot;
       , &quot;iws&quot;.&quot;i_class_id&quot;
       , &quot;iws&quot;.&quot;i_category_id&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}item iws
       , ${database}.${schema}.${prefix}date_dim d3
       WHERE (&quot;ws_item_sk&quot; = &quot;iws&quot;.&quot;i_item_sk&quot;)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
          AND (&quot;d3&quot;.&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
    )  x
    WHERE (&quot;i_brand_id&quot; = &quot;brand_id&quot;)
       AND (&quot;i_class_id&quot; = &quot;class_id&quot;)
       AND (&quot;i_category_id&quot; = &quot;category_id&quot;)
 ) 
 , avg_sales AS (
    SELECT &quot;avg&quot;((&quot;quantity&quot; * &quot;list_price&quot;)) &quot;average_sales&quot;
    FROM
      (
       SELECT
         &quot;ss_quantity&quot; &quot;quantity&quot;
       , &quot;ss_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 UNION ALL       SELECT
         &quot;cs_quantity&quot; &quot;quantity&quot;
       , &quot;cs_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
 UNION ALL       SELECT
         &quot;ws_quantity&quot; &quot;quantity&quot;
       , &quot;ws_list_price&quot; &quot;list_price&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; BETWEEN 1999 AND (1999 + 2))
    ) 
 ) 
 SELECT *
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store&apos; &quot;channel&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &quot;sales&quot;
    , &quot;count&quot;(*) &quot;number_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_item_sk&quot; IN (
       SELECT &quot;ss_item_sk&quot;
       FROM
         cross_items
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_week_seq&quot; = (
          SELECT &quot;d_week_seq&quot;
          FROM
            ${database}.${schema}.${prefix}date_dim
          WHERE (&quot;d_year&quot; = (1999 + 1))
             AND (&quot;d_moy&quot; = 12)
             AND (&quot;d_dom&quot; = 11)
       ))
    GROUP BY &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;
    HAVING (&quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &gt; (
          SELECT &quot;average_sales&quot;
          FROM
            avg_sales
       ))
 )  this_year
 , (
    SELECT
      &apos;${database}.${schema}.${prefix}store&apos; &quot;channel&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &quot;sales&quot;
    , &quot;count&quot;(*) &quot;number_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_item_sk&quot; IN (
       SELECT &quot;ss_item_sk&quot;
       FROM
         cross_items
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_week_seq&quot; = (
          SELECT &quot;d_week_seq&quot;
          FROM
            ${database}.${schema}.${prefix}date_dim
          WHERE (&quot;d_year&quot; = 1999)
             AND (&quot;d_moy&quot; = 12)
             AND (&quot;d_dom&quot; = 11)
       ))
    GROUP BY &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;
    HAVING (&quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_list_price&quot;)) &gt; (
          SELECT &quot;average_sales&quot;
          FROM
            avg_sales
       ))
 )  last_year
 WHERE (&quot;this_year&quot;.&quot;i_brand_id&quot; = &quot;last_year&quot;.&quot;i_brand_id&quot;)
    AND (&quot;this_year&quot;.&quot;i_class_id&quot; = &quot;last_year&quot;.&quot;i_class_id&quot;)
    AND (&quot;this_year&quot;.&quot;i_category_id&quot; = &quot;last_year&quot;.&quot;i_category_id&quot;)
 ORDER BY &quot;this_year&quot;.&quot;channel&quot; ASC, &quot;this_year&quot;.&quot;i_brand_id&quot; ASC, &quot;this_year&quot;.&quot;i_class_id&quot; ASC, &quot;this_year&quot;.&quot;i_category_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q15.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;ca_zip&quot;
 , &quot;sum&quot;(&quot;cs_sales_price&quot;)
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;cs_bill_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND ((&quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) IN (&apos;85669&apos;   , &apos;86197&apos;   , &apos;88274&apos;   , &apos;83405&apos;   , &apos;86475&apos;   , &apos;85392&apos;   , &apos;85460&apos;   , &apos;80348&apos;   , &apos;81792&apos;))
       OR (&quot;ca_state&quot; IN (&apos;CA&apos;   , &apos;WA&apos;   , &apos;GA&apos;))
       OR (&quot;cs_sales_price&quot; &gt; 500))
    AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_qoy&quot; = 2)
    AND (&quot;d_year&quot; = 2001)
 GROUP BY &quot;ca_zip&quot;
 ORDER BY &quot;ca_zip&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q16.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;count&quot;(DISTINCT &quot;cs_order_number&quot;) &quot;order count&quot;
 , &quot;sum&quot;(&quot;cs_ext_ship_cost&quot;) &quot;total shipping cost&quot;
 , &quot;sum&quot;(&quot;cs_net_profit&quot;) &quot;total net profit&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales cs1
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}call_center
 WHERE (&quot;d_date&quot; BETWEEN CAST(&apos;2002-2-01&apos; AS DATE) AND (CAST(&apos;2002-2-01&apos; AS DATE) + INTERVAL  &apos;60&apos; DAY))
    AND (&quot;cs1&quot;.&quot;cs_ship_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;cs1&quot;.&quot;cs_ship_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;ca_state&quot; = &apos;GA&apos;)
    AND (&quot;cs1&quot;.&quot;cs_call_center_sk&quot; = &quot;cc_call_center_sk&quot;)
    AND (&quot;cc_county&quot; IN (&apos;Williamson County&apos;, &apos;Williamson County&apos;, &apos;Williamson County&apos;, &apos;Williamson County&apos;, &apos;Williamson County&apos;))
    AND (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}catalog_sales cs2
    WHERE (&quot;cs1&quot;.&quot;cs_order_number&quot; = &quot;cs2&quot;.&quot;cs_order_number&quot;)
       AND (&quot;cs1&quot;.&quot;cs_warehouse_sk&quot; &lt;&gt; &quot;cs2&quot;.&quot;cs_warehouse_sk&quot;)
 ))
    AND (NOT (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}catalog_returns cr1
    WHERE (&quot;cs1&quot;.&quot;cs_order_number&quot; = &quot;cr1&quot;.&quot;cr_order_number&quot;)
 )))
 ORDER BY &quot;count&quot;(DISTINCT &quot;cs_order_number&quot;) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q17.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;s_state&quot;
 , &quot;count&quot;(&quot;ss_quantity&quot;) &quot;store_sales_quantitycount&quot;
 , &quot;avg&quot;(&quot;ss_quantity&quot;) &quot;store_sales_quantityave&quot;
 , &quot;stddev_samp&quot;(&quot;ss_quantity&quot;) &quot;store_sales_quantitystdev&quot;
 , (&quot;stddev_samp&quot;(&quot;ss_quantity&quot;) / &quot;avg&quot;(&quot;ss_quantity&quot;)) &quot;store_sales_quantitycov&quot;
 , &quot;count&quot;(&quot;sr_return_quantity&quot;) &quot;store_returns_quantitycount&quot;
 , &quot;avg&quot;(&quot;sr_return_quantity&quot;) &quot;store_returns_quantityave&quot;
 , &quot;stddev_samp&quot;(&quot;sr_return_quantity&quot;) &quot;store_returns_quantitystdev&quot;
 , (&quot;stddev_samp&quot;(&quot;sr_return_quantity&quot;) / &quot;avg&quot;(&quot;sr_return_quantity&quot;)) &quot;store_returns_quantitycov&quot;
 , &quot;count&quot;(&quot;cs_quantity&quot;) &quot;catalog_sales_quantitycount&quot;
 , &quot;avg&quot;(&quot;cs_quantity&quot;) &quot;catalog_sales_quantityave&quot;
 , &quot;stddev_samp&quot;(&quot;cs_quantity&quot;) &quot;catalog_sales_quantitystdev&quot;
 , (&quot;stddev_samp&quot;(&quot;cs_quantity&quot;) / &quot;avg&quot;(&quot;cs_quantity&quot;)) &quot;catalog_sales_quantitycov&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store_returns
 , ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}date_dim d2
 , ${database}.${schema}.${prefix}date_dim d3
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;d1&quot;.&quot;d_quarter_name&quot; = &apos;2001Q1&apos;)
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;ss_item_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;ss_customer_sk&quot; = &quot;sr_customer_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
    AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
    AND (&quot;sr_returned_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d2&quot;.&quot;d_quarter_name&quot; IN (&apos;2001Q1&apos;, &apos;2001Q2&apos;, &apos;2001Q3&apos;))
    AND (&quot;sr_customer_sk&quot; = &quot;cs_bill_customer_sk&quot;)
    AND (&quot;sr_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cs_sold_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d3&quot;.&quot;d_quarter_name&quot; IN (&apos;2001Q1&apos;, &apos;2001Q2&apos;, &apos;2001Q3&apos;))
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;s_state&quot;
 ORDER BY &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;s_state&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q18.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;ca_country&quot;
 , &quot;ca_state&quot;
 , &quot;ca_county&quot;
 , &quot;avg&quot;(CAST(&quot;cs_quantity&quot; AS DECIMAL(12,2))) &quot;agg1&quot;
 , &quot;avg&quot;(CAST(&quot;cs_list_price&quot; AS DECIMAL(12,2))) &quot;agg2&quot;
 , &quot;avg&quot;(CAST(&quot;cs_coupon_amt&quot; AS DECIMAL(12,2))) &quot;agg3&quot;
 , &quot;avg&quot;(CAST(&quot;cs_sales_price&quot; AS DECIMAL(12,2))) &quot;agg4&quot;
 , &quot;avg&quot;(CAST(&quot;cs_net_profit&quot; AS DECIMAL(12,2))) &quot;agg5&quot;
 , &quot;avg&quot;(CAST(&quot;c_birth_year&quot; AS DECIMAL(12,2))) &quot;agg6&quot;
 , &quot;avg&quot;(CAST(&quot;cd1&quot;.&quot;cd_dep_count&quot; AS DECIMAL(12,2))) &quot;agg7&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}customer_demographics cd1
 , ${database}.${schema}.${prefix}customer_demographics cd2
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;cs_bill_cdemo_sk&quot; = &quot;cd1&quot;.&quot;cd_demo_sk&quot;)
    AND (&quot;cs_bill_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;cd1&quot;.&quot;cd_gender&quot; = &apos;F&apos;)
    AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &apos;Unknown&apos;)
    AND (&quot;c_current_cdemo_sk&quot; = &quot;cd2&quot;.&quot;cd_demo_sk&quot;)
    AND (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;c_birth_month&quot; IN (1, 6, 8, 9, 12, 2))
    AND (&quot;d_year&quot; = 1998)
    AND (&quot;ca_state&quot; IN (&apos;MS&apos;, &apos;IN&apos;, &apos;ND&apos;, &apos;OK&apos;, &apos;NM&apos;, &apos;VA&apos;, &apos;MS&apos;))
 GROUP BY ROLLUP (i_item_id, ca_country, ca_state, ca_county)
 ORDER BY &quot;ca_country&quot; ASC, &quot;ca_state&quot; ASC, &quot;ca_county&quot; ASC, &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q19.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_brand_id&quot; &quot;brand_id&quot;
 , &quot;i_brand&quot; &quot;brand&quot;
 , &quot;i_manufact_id&quot;
 , &quot;i_manufact&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;ext_price&quot;
 FROM
   ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}store
 WHERE (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_manager_id&quot; = 8)
    AND (&quot;d_moy&quot; = 11)
    AND (&quot;d_year&quot; = 1998)
    AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) &lt;&gt; &quot;substr&quot;(&quot;s_zip&quot;, 1, 5))
    AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
 GROUP BY &quot;i_brand&quot;, &quot;i_brand_id&quot;, &quot;i_manufact_id&quot;, &quot;i_manufact&quot;
 ORDER BY &quot;ext_price&quot; DESC, &quot;i_brand&quot; ASC, &quot;i_brand_id&quot; ASC, &quot;i_manufact_id&quot; ASC, &quot;i_manufact&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q20.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;i_category&quot;
 , &quot;i_class&quot;
 , &quot;i_current_price&quot;
 , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;${database}.${schema}.${prefix}itemrevenue&quot;
 , ((&quot;sum&quot;(&quot;cs_ext_sales_price&quot;) * 100) / &quot;sum&quot;(&quot;sum&quot;(&quot;cs_ext_sales_price&quot;)) OVER (PARTITION BY &quot;i_class&quot;)) &quot;revenueratio&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_category&quot; IN (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;))
    AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;1999-02-22&apos; AS DATE) AND (CAST(&apos;1999-02-22&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;i_category&quot;, &quot;i_class&quot;, &quot;i_current_price&quot;
 ORDER BY &quot;i_category&quot; ASC, &quot;i_class&quot; ASC, &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;revenueratio&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q21.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;w_warehouse_name&quot;
    , &quot;i_item_id&quot;
    , &quot;sum&quot;((CASE WHEN (CAST(&quot;d_date&quot; AS DATE) &lt; CAST(&apos;2000-03-11&apos; AS DATE)) THEN &quot;inv_quantity_on_hand&quot; ELSE 0 END)) &quot;inv_before&quot;
    , &quot;sum&quot;((CASE WHEN (CAST(&quot;d_date&quot; AS DATE) &gt;= CAST(&apos;2000-03-11&apos; AS DATE)) THEN &quot;inv_quantity_on_hand&quot; ELSE 0 END)) &quot;inv_after&quot;
    FROM
      ${database}.${schema}.${prefix}inventory
    , ${database}.${schema}.${prefix}warehouse
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;i_current_price&quot; BETWEEN DECIMAL &apos;0.99&apos; AND DECIMAL &apos;1.49&apos;)
       AND (&quot;i_item_sk&quot; = &quot;inv_item_sk&quot;)
       AND (&quot;inv_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
       AND (&quot;inv_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN (CAST(&apos;2000-03-11&apos; AS DATE) - INTERVAL  &apos;30&apos; DAY) AND (CAST(&apos;2000-03-11&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
    GROUP BY &quot;w_warehouse_name&quot;, &quot;i_item_id&quot;
 )  x
 WHERE ((CASE WHEN (&quot;inv_before&quot; &gt; 0) THEN (CAST(&quot;inv_after&quot; AS DECIMAL(7,2)) / &quot;inv_before&quot;) ELSE null END) BETWEEN (DECIMAL &apos;2.00&apos; / DECIMAL &apos;3.00&apos;) AND (DECIMAL &apos;3.00&apos; / DECIMAL &apos;2.00&apos;))
 ORDER BY &quot;w_warehouse_name&quot; ASC, &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q22.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_product_name&quot;
 , &quot;i_brand&quot;
 , &quot;i_class&quot;
 , &quot;i_category&quot;
 , &quot;avg&quot;(&quot;inv_quantity_on_hand&quot;) &quot;qoh&quot;
 FROM
   ${database}.${schema}.${prefix}inventory
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;inv_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;inv_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
 GROUP BY ROLLUP (i_product_name, i_brand, i_class, i_category)
 ORDER BY &quot;qoh&quot; ASC, &quot;i_product_name&quot; ASC, &quot;i_brand&quot; ASC, &quot;i_class&quot; ASC, &quot;i_category&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23_1.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   frequent_ss_items AS (
    SELECT
      &quot;substr&quot;(&quot;i_item_desc&quot;, 1, 30) &quot;itemdesc&quot;
    , &quot;i_item_sk&quot; &quot;item_sk&quot;
    , &quot;d_date&quot; &quot;solddate&quot;
    , &quot;count&quot;(*) &quot;cnt&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_year&quot; IN (2000   , (2000 + 1)   , (2000 + 2)   , (2000 + 3)))
    GROUP BY &quot;substr&quot;(&quot;i_item_desc&quot;, 1, 30), &quot;i_item_sk&quot;, &quot;d_date&quot;
    HAVING (&quot;count&quot;(*) &gt; 4)
 ) 
 , max_store_sales AS (
    SELECT &quot;max&quot;(&quot;csales&quot;) &quot;tpcds_cmax&quot;
    FROM
      (
       SELECT
         &quot;c_customer_sk&quot;
       , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &quot;csales&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}customer
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
          AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; IN (2000      , (2000 + 1)      , (2000 + 2)      , (2000 + 3)))
       GROUP BY &quot;c_customer_sk&quot;
    ) 
 ) 
 , best_ss_customer AS (
    SELECT
      &quot;c_customer_sk&quot;
    , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &quot;ssales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    GROUP BY &quot;c_customer_sk&quot;
    HAVING (&quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &gt; ((50 / DECIMAL &apos;100.0&apos;) * (
             SELECT *
             FROM
               max_store_sales
          )))
 ) 
 SELECT &quot;sum&quot;(&quot;sales&quot;)
 FROM
   (
    SELECT (&quot;cs_quantity&quot; * &quot;cs_list_price&quot;) &quot;sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_year&quot; = 2000)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;cs_item_sk&quot; IN (
       SELECT &quot;item_sk&quot;
       FROM
         frequent_ss_items
    ))
       AND (&quot;cs_bill_customer_sk&quot; IN (
       SELECT &quot;c_customer_sk&quot;
       FROM
         best_ss_customer
    ))
 UNION ALL    SELECT (&quot;ws_quantity&quot; * &quot;ws_list_price&quot;) &quot;sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_year&quot; = 2000)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ws_item_sk&quot; IN (
       SELECT &quot;item_sk&quot;
       FROM
         frequent_ss_items
    ))
       AND (&quot;ws_bill_customer_sk&quot; IN (
       SELECT &quot;c_customer_sk&quot;
       FROM
         best_ss_customer
    ))
 ) 
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23_2.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   frequent_ss_items AS (
    SELECT
      &quot;substr&quot;(&quot;i_item_desc&quot;, 1, 30) &quot;itemdesc&quot;
    , &quot;i_item_sk&quot; &quot;item_sk&quot;
    , &quot;d_date&quot; &quot;solddate&quot;
    , &quot;count&quot;(*) &quot;cnt&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_year&quot; IN (2000   , (2000 + 1)   , (2000 + 2)   , (2000 + 3)))
    GROUP BY &quot;substr&quot;(&quot;i_item_desc&quot;, 1, 30), &quot;i_item_sk&quot;, &quot;d_date&quot;
    HAVING (&quot;count&quot;(*) &gt; 4)
 ) 
 , max_store_sales AS (
    SELECT &quot;max&quot;(&quot;csales&quot;) &quot;tpcds_cmax&quot;
    FROM
      (
       SELECT
         &quot;c_customer_sk&quot;
       , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &quot;csales&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}customer
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
          AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; IN (2000      , (2000 + 1)      , (2000 + 2)      , (2000 + 3)))
       GROUP BY &quot;c_customer_sk&quot;
    ) 
 ) 
 , best_ss_customer AS (
    SELECT
      &quot;c_customer_sk&quot;
    , &quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &quot;ssales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    GROUP BY &quot;c_customer_sk&quot;
    HAVING (&quot;sum&quot;((&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;)) &gt; ((50 / DECIMAL &apos;100.0&apos;) * (
             SELECT *
             FROM
               max_store_sales
          )))
 ) 
 SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;sales&quot;
 FROM
   (
    SELECT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;sum&quot;((&quot;cs_quantity&quot; * &quot;cs_list_price&quot;)) &quot;sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_year&quot; = 2000)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;cs_item_sk&quot; IN (
       SELECT &quot;item_sk&quot;
       FROM
         frequent_ss_items
    ))
       AND (&quot;cs_bill_customer_sk&quot; IN (
       SELECT &quot;c_customer_sk&quot;
       FROM
         best_ss_customer
    ))
       AND (&quot;cs_bill_customer_sk&quot; = &quot;c_customer_sk&quot;)
    GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;
 UNION ALL    SELECT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;sum&quot;((&quot;ws_quantity&quot; * &quot;ws_list_price&quot;)) &quot;sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_year&quot; = 2000)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ws_item_sk&quot; IN (
       SELECT &quot;item_sk&quot;
       FROM
         frequent_ss_items
    ))
       AND (&quot;ws_bill_customer_sk&quot; IN (
       SELECT &quot;c_customer_sk&quot;
       FROM
         best_ss_customer
    ))
       AND (&quot;ws_bill_customer_sk&quot; = &quot;c_customer_sk&quot;)
    GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;
 ) 
 ORDER BY &quot;c_last_name&quot; ASC, &quot;c_first_name&quot; ASC, &quot;sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24_1.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ssales AS (
    SELECT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;s_store_name&quot;
    , &quot;ca_state&quot;
    , &quot;s_state&quot;
    , &quot;i_color&quot;
    , &quot;i_current_price&quot;
    , &quot;i_manager_id&quot;
    , &quot;i_units&quot;
    , &quot;i_size&quot;
    , &quot;sum&quot;(&quot;ss_net_paid&quot;) &quot;netpaid&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}store_returns
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
       AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;c_birth_country&quot; = &quot;upper&quot;(&quot;ca_country&quot;))
       AND (&quot;s_zip&quot; = &quot;ca_zip&quot;)
       AND (&quot;s_market_id&quot; = 8)
    GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;, &quot;s_store_name&quot;, &quot;ca_state&quot;, &quot;s_state&quot;, &quot;i_color&quot;, &quot;i_current_price&quot;, &quot;i_manager_id&quot;, &quot;i_units&quot;, &quot;i_size&quot;
 ) 
 SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;s_store_name&quot;
 , &quot;sum&quot;(&quot;netpaid&quot;) &quot;paid&quot;
 FROM
   ssales
 WHERE (&quot;i_color&quot; = &apos;pale&apos;)
 GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;, &quot;s_store_name&quot;
 HAVING (&quot;sum&quot;(&quot;netpaid&quot;) &gt; (
       SELECT (DECIMAL &apos;0.05&apos; * &quot;avg&quot;(&quot;netpaid&quot;))
       FROM
         ssales
    ))

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24_2.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ssales AS (
    SELECT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;s_store_name&quot;
    , &quot;ca_state&quot;
    , &quot;s_state&quot;
    , &quot;i_color&quot;
    , &quot;i_current_price&quot;
    , &quot;i_manager_id&quot;
    , &quot;i_units&quot;
    , &quot;i_size&quot;
    , &quot;sum&quot;(&quot;ss_net_paid&quot;) &quot;netpaid&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}store_returns
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
       AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;c_birth_country&quot; = &quot;upper&quot;(&quot;ca_country&quot;))
       AND (&quot;s_zip&quot; = &quot;ca_zip&quot;)
       AND (&quot;s_market_id&quot; = 8)
    GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;, &quot;s_store_name&quot;, &quot;ca_state&quot;, &quot;s_state&quot;, &quot;i_color&quot;, &quot;i_current_price&quot;, &quot;i_manager_id&quot;, &quot;i_units&quot;, &quot;i_size&quot;
 ) 
 SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;s_store_name&quot;
 , &quot;sum&quot;(&quot;netpaid&quot;) &quot;paid&quot;
 FROM
   ssales
 WHERE (&quot;i_color&quot; = &apos;chiffon&apos;)
 GROUP BY &quot;c_last_name&quot;, &quot;c_first_name&quot;, &quot;s_store_name&quot;
 HAVING (&quot;sum&quot;(&quot;netpaid&quot;) &gt; (
       SELECT (DECIMAL &apos;0.05&apos; * &quot;avg&quot;(&quot;netpaid&quot;))
       FROM
         ssales
    ))

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q25.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;s_store_id&quot;
 , &quot;s_store_name&quot;
 , &quot;sum&quot;(&quot;ss_net_profit&quot;) &quot;store_sales_profit&quot;
 , &quot;sum&quot;(&quot;sr_net_loss&quot;) &quot;store_returns_loss&quot;
 , &quot;sum&quot;(&quot;cs_net_profit&quot;) &quot;catalog_sales_profit&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store_returns
 , ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}date_dim d2
 , ${database}.${schema}.${prefix}date_dim d3
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;d1&quot;.&quot;d_moy&quot; = 4)
    AND (&quot;d1&quot;.&quot;d_year&quot; = 2001)
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;ss_item_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;ss_customer_sk&quot; = &quot;sr_customer_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
    AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
    AND (&quot;sr_returned_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d2&quot;.&quot;d_moy&quot; BETWEEN 4 AND 10)
    AND (&quot;d2&quot;.&quot;d_year&quot; = 2001)
    AND (&quot;sr_customer_sk&quot; = &quot;cs_bill_customer_sk&quot;)
    AND (&quot;sr_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cs_sold_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d3&quot;.&quot;d_moy&quot; BETWEEN 4 AND 10)
    AND (&quot;d3&quot;.&quot;d_year&quot; = 2001)
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;s_store_id&quot;, &quot;s_store_name&quot;
 ORDER BY &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;s_store_id&quot; ASC, &quot;s_store_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q26.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;avg&quot;(&quot;cs_quantity&quot;) &quot;agg1&quot;
 , &quot;avg&quot;(&quot;cs_list_price&quot;) &quot;agg2&quot;
 , &quot;avg&quot;(&quot;cs_coupon_amt&quot;) &quot;agg3&quot;
 , &quot;avg&quot;(&quot;cs_sales_price&quot;) &quot;agg4&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}promotion
 WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;cs_bill_cdemo_sk&quot; = &quot;cd_demo_sk&quot;)
    AND (&quot;cs_promo_sk&quot; = &quot;p_promo_sk&quot;)
    AND (&quot;cd_gender&quot; = &apos;M&apos;)
    AND (&quot;cd_marital_status&quot; = &apos;S&apos;)
    AND (&quot;cd_education_status&quot; = &apos;College&apos;)
    AND ((&quot;p_channel_email&quot; = &apos;N&apos;)
       OR (&quot;p_channel_event&quot; = &apos;N&apos;))
    AND (&quot;d_year&quot; = 2000)
 GROUP BY &quot;i_item_id&quot;
 ORDER BY &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q27.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;s_state&quot;
 , GROUPING (&quot;s_state&quot;) &quot;g_state&quot;
 , &quot;avg&quot;(&quot;ss_quantity&quot;) &quot;agg1&quot;
 , &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;agg2&quot;
 , &quot;avg&quot;(&quot;ss_coupon_amt&quot;) &quot;agg3&quot;
 , &quot;avg&quot;(&quot;ss_sales_price&quot;) &quot;agg4&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
    AND (&quot;ss_cdemo_sk&quot; = &quot;cd_demo_sk&quot;)
    AND (&quot;cd_gender&quot; = &apos;M&apos;)
    AND (&quot;cd_marital_status&quot; = &apos;S&apos;)
    AND (&quot;cd_education_status&quot; = &apos;College&apos;)
    AND (&quot;d_year&quot; = 2002)
    AND (&quot;s_state&quot; IN (
      &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;))
 GROUP BY ROLLUP (i_item_id, s_state)
 ORDER BY &quot;i_item_id&quot; ASC, &quot;s_state&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q28.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b1_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b1_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b1_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 0 AND 5)
       AND ((&quot;ss_list_price&quot; BETWEEN 8 AND (8 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 459 AND (459 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 57 AND (57 + 20)))
 )  b1
 , (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b2_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b2_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b2_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 6 AND 10)
       AND ((&quot;ss_list_price&quot; BETWEEN 90 AND (90 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 2323 AND (2323 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 31 AND (31 + 20)))
 )  b2
 , (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b3_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b3_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b3_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 11 AND 15)
       AND ((&quot;ss_list_price&quot; BETWEEN 142 AND (142 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 12214 AND (12214 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 79 AND (79 + 20)))
 )  b3
 , (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b4_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b4_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b4_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 16 AND 20)
       AND ((&quot;ss_list_price&quot; BETWEEN 135 AND (135 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 6071 AND (6071 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 38 AND (38 + 20)))
 )  b4
 , (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b5_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b5_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b5_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 21 AND 25)
       AND ((&quot;ss_list_price&quot; BETWEEN 122 AND (122 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 836 AND (836 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 17 AND (17 + 20)))
 )  b5
 , (
    SELECT
      &quot;avg&quot;(&quot;ss_list_price&quot;) &quot;b6_lp&quot;
    , &quot;count&quot;(&quot;ss_list_price&quot;) &quot;b6_cnt&quot;
    , &quot;count&quot;(DISTINCT &quot;ss_list_price&quot;) &quot;b6_cntd&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    WHERE (&quot;ss_quantity&quot; BETWEEN 26 AND 30)
       AND ((&quot;ss_list_price&quot; BETWEEN 154 AND (154 + 10))
          OR (&quot;ss_coupon_amt&quot; BETWEEN 7326 AND (7326 + 1000))
          OR (&quot;ss_wholesale_cost&quot; BETWEEN 7 AND (7 + 20)))
 )  b6
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q29.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;s_store_id&quot;
 , &quot;s_store_name&quot;
 , &quot;sum&quot;(&quot;ss_quantity&quot;) &quot;store_sales_quantity&quot;
 , &quot;sum&quot;(&quot;sr_return_quantity&quot;) &quot;store_returns_quantity&quot;
 , &quot;sum&quot;(&quot;cs_quantity&quot;) &quot;catalog_sales_quantity&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store_returns
 , ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}date_dim d2
 , ${database}.${schema}.${prefix}date_dim d3
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;d1&quot;.&quot;d_moy&quot; = 9)
    AND (&quot;d1&quot;.&quot;d_year&quot; = 1999)
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;ss_item_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;ss_customer_sk&quot; = &quot;sr_customer_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
    AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
    AND (&quot;sr_returned_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d2&quot;.&quot;d_moy&quot; BETWEEN 9 AND (9 + 3))
    AND (&quot;d2&quot;.&quot;d_year&quot; = 1999)
    AND (&quot;sr_customer_sk&quot; = &quot;cs_bill_customer_sk&quot;)
    AND (&quot;sr_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cs_sold_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
    AND (&quot;d3&quot;.&quot;d_year&quot; IN (1999, (1999 + 1), (1999 + 2)))
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;s_store_id&quot;, &quot;s_store_name&quot;
 ORDER BY &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;s_store_id&quot; ASC, &quot;s_store_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q30.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   customer_total_return AS (
    SELECT
      &quot;wr_returning_customer_sk&quot; &quot;ctr_customer_sk&quot;
    , &quot;ca_state&quot; &quot;ctr_state&quot;
    , &quot;sum&quot;(&quot;wr_return_amt&quot;) &quot;ctr_total_return&quot;
    FROM
      ${database}.${schema}.${prefix}web_returns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;wr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2002)
       AND (&quot;wr_returning_addr_sk&quot; = &quot;ca_address_sk&quot;)
    GROUP BY &quot;wr_returning_customer_sk&quot;, &quot;ca_state&quot;
 ) 
 SELECT
   &quot;c_customer_id&quot;
 , &quot;c_salutation&quot;
 , &quot;c_first_name&quot;
 , &quot;c_last_name&quot;
 , &quot;c_preferred_cust_flag&quot;
 , &quot;c_birth_day&quot;
 , &quot;c_birth_month&quot;
 , &quot;c_birth_year&quot;
 , &quot;c_birth_country&quot;
 , &quot;c_login&quot;
 , &quot;c_email_address&quot;
 , &quot;c_last_review_date_sk&quot;
 , &quot;ctr_total_return&quot;
 FROM
   customer_total_return ctr1
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ctr1&quot;.&quot;ctr_total_return&quot; &gt; (
       SELECT (&quot;avg&quot;(&quot;ctr_total_return&quot;) * DECIMAL &apos;1.2&apos;)
       FROM
         customer_total_return ctr2
       WHERE (&quot;ctr1&quot;.&quot;ctr_state&quot; = &quot;ctr2&quot;.&quot;ctr_state&quot;)
    ))
    AND (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
    AND (&quot;ca_state&quot; = &apos;GA&apos;)
    AND (&quot;ctr1&quot;.&quot;ctr_customer_sk&quot; = &quot;c_customer_sk&quot;)
 ORDER BY &quot;c_customer_id&quot; ASC, &quot;c_salutation&quot; ASC, &quot;c_first_name&quot; ASC, &quot;c_last_name&quot; ASC, &quot;c_preferred_cust_flag&quot; ASC, &quot;c_birth_day&quot; ASC, &quot;c_birth_month&quot; ASC, &quot;c_birth_year&quot; ASC, &quot;c_birth_country&quot; ASC, &quot;c_login&quot; ASC, &quot;c_email_address&quot; ASC, &quot;c_last_review_date_sk&quot; ASC, &quot;ctr_total_return&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q31.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss AS (
    SELECT
      &quot;ca_county&quot;
    , &quot;d_qoy&quot;
    , &quot;d_year&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;store_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
    GROUP BY &quot;ca_county&quot;, &quot;d_qoy&quot;, &quot;d_year&quot;
 ) 
 , ws AS (
    SELECT
      &quot;ca_county&quot;
    , &quot;d_qoy&quot;
    , &quot;d_year&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;web_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ws_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
    GROUP BY &quot;ca_county&quot;, &quot;d_qoy&quot;, &quot;d_year&quot;
 ) 
 SELECT
   &quot;ss1&quot;.&quot;ca_county&quot;
 , &quot;ss1&quot;.&quot;d_year&quot;
 , (&quot;ws2&quot;.&quot;web_sales&quot; / &quot;ws1&quot;.&quot;web_sales&quot;) &quot;web_q1_q2_increase&quot;
 , (&quot;ss2&quot;.&quot;store_sales&quot; / &quot;ss1&quot;.&quot;store_sales&quot;) &quot;store_q1_q2_increase&quot;
 , (&quot;ws3&quot;.&quot;web_sales&quot; / &quot;ws2&quot;.&quot;web_sales&quot;) &quot;web_q2_q3_increase&quot;
 , (&quot;ss3&quot;.&quot;store_sales&quot; / &quot;ss2&quot;.&quot;store_sales&quot;) &quot;store_q2_q3_increase&quot;
 FROM
   ss ss1
 , ss ss2
 , ss ss3
 , ws ws1
 , ws ws2
 , ws ws3
 WHERE (&quot;ss1&quot;.&quot;d_qoy&quot; = 1)
    AND (&quot;ss1&quot;.&quot;d_year&quot; = 2000)
    AND (&quot;ss1&quot;.&quot;ca_county&quot; = &quot;ss2&quot;.&quot;ca_county&quot;)
    AND (&quot;ss2&quot;.&quot;d_qoy&quot; = 2)
    AND (&quot;ss2&quot;.&quot;d_year&quot; = 2000)
    AND (&quot;ss2&quot;.&quot;ca_county&quot; = &quot;ss3&quot;.&quot;ca_county&quot;)
    AND (&quot;ss3&quot;.&quot;d_qoy&quot; = 3)
    AND (&quot;ss3&quot;.&quot;d_year&quot; = 2000)
    AND (&quot;ss1&quot;.&quot;ca_county&quot; = &quot;ws1&quot;.&quot;ca_county&quot;)
    AND (&quot;ws1&quot;.&quot;d_qoy&quot; = 1)
    AND (&quot;ws1&quot;.&quot;d_year&quot; = 2000)
    AND (&quot;ws1&quot;.&quot;ca_county&quot; = &quot;ws2&quot;.&quot;ca_county&quot;)
    AND (&quot;ws2&quot;.&quot;d_qoy&quot; = 2)
    AND (&quot;ws2&quot;.&quot;d_year&quot; = 2000)
    AND (&quot;ws1&quot;.&quot;ca_county&quot; = &quot;ws3&quot;.&quot;ca_county&quot;)
    AND (&quot;ws3&quot;.&quot;d_qoy&quot; = 3)
    AND (&quot;ws3&quot;.&quot;d_year&quot; = 2000)
    AND ((CASE WHEN (&quot;ws1&quot;.&quot;web_sales&quot; &gt; 0) THEN (CAST(&quot;ws2&quot;.&quot;web_sales&quot; AS DECIMAL(38,3)) / &quot;ws1&quot;.&quot;web_sales&quot;) ELSE null END) &gt; (CASE WHEN (&quot;ss1&quot;.&quot;store_sales&quot; &gt; 0) THEN (CAST(&quot;ss2&quot;.&quot;store_sales&quot; AS DECIMAL(38,3)) / &quot;ss1&quot;.&quot;store_sales&quot;) ELSE null END))
    AND ((CASE WHEN (&quot;ws2&quot;.&quot;web_sales&quot; &gt; 0) THEN (CAST(&quot;ws3&quot;.&quot;web_sales&quot; AS DECIMAL(38,3)) / &quot;ws2&quot;.&quot;web_sales&quot;) ELSE null END) &gt; (CASE WHEN (&quot;ss2&quot;.&quot;store_sales&quot; &gt; 0) THEN (CAST(&quot;ss3&quot;.&quot;store_sales&quot; AS DECIMAL(38,3)) / &quot;ss2&quot;.&quot;store_sales&quot;) ELSE null END))
 ORDER BY &quot;ss1&quot;.&quot;ca_county&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q32.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;sum&quot;(&quot;cs_ext_discount_amt&quot;) &quot;excess discount amount&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;i_manufact_id&quot; = 977)
    AND (&quot;i_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-01-27&apos; AS DATE) AND (CAST(&apos;2000-01-27&apos; AS DATE) + INTERVAL  &apos;90&apos; DAY))
    AND (&quot;d_date_sk&quot; = &quot;cs_sold_date_sk&quot;)
    AND (&quot;cs_ext_discount_amt&quot; &gt; (
       SELECT (DECIMAL &apos;1.3&apos; * &quot;avg&quot;(&quot;cs_ext_discount_amt&quot;))
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
          AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-01-27&apos; AS DATE) AND (CAST(&apos;2000-01-27&apos; AS DATE) + INTERVAL  &apos;90&apos; DAY))
          AND (&quot;d_date_sk&quot; = &quot;cs_sold_date_sk&quot;)
    ))
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q33.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss AS (
    SELECT
      &quot;i_manufact_id&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_manufact_id&quot; IN (
       SELECT &quot;i_manufact_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Electronics&apos;))
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 5)
       AND (&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_manufact_id&quot;
 ) 
 , cs AS (
    SELECT
      &quot;i_manufact_id&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_manufact_id&quot; IN (
       SELECT &quot;i_manufact_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Electronics&apos;))
    ))
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 5)
       AND (&quot;cs_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_manufact_id&quot;
 ) 
 , ws AS (
    SELECT
      &quot;i_manufact_id&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_manufact_id&quot; IN (
       SELECT &quot;i_manufact_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Electronics&apos;))
    ))
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 5)
       AND (&quot;ws_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_manufact_id&quot;
 ) 
 SELECT
   &quot;i_manufact_id&quot;
 , &quot;sum&quot;(&quot;total_sales&quot;) &quot;total_sales&quot;
 FROM
   (
    SELECT *
    FROM
      ss
 UNION ALL    SELECT *
    FROM
      cs
 UNION ALL    SELECT *
    FROM
      ws
 )  tmp1
 GROUP BY &quot;i_manufact_id&quot;
 ORDER BY &quot;total_sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q34.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;c_salutation&quot;
 , &quot;c_preferred_cust_flag&quot;
 , &quot;ss_ticket_number&quot;
 , &quot;cnt&quot;
 FROM
   (
    SELECT
      &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;count&quot;(*) &quot;cnt&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}household_demographics
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_store_sk&quot; = &quot;${prefix}store&quot;.&quot;s_store_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND ((&quot;${prefix}date_dim&quot;.&quot;d_dom&quot; BETWEEN 1 AND 3)
          OR (&quot;${prefix}date_dim&quot;.&quot;d_dom&quot; BETWEEN 25 AND 28))
       AND ((&quot;${prefix}household_demographics&quot;.&quot;hd_buy_potential&quot; = &apos;&gt;10000&apos;)
          OR (&quot;${prefix}household_demographics&quot;.&quot;hd_buy_potential&quot; = &apos;Unknown&apos;))
       AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &gt; 0)
       AND ((CASE WHEN (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &gt; 0) THEN (CAST(&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; AS DECIMAL(7,2)) / &quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot;) ELSE null END) &gt; DECIMAL &apos;1.2&apos;)
       AND (&quot;${prefix}date_dim&quot;.&quot;d_year&quot; IN (1999   , (1999 + 1)   , (1999 + 2)))
       AND (&quot;${prefix}store&quot;.&quot;s_county&quot; IN (&apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;   , &apos;Williamson County&apos;))
    GROUP BY &quot;ss_ticket_number&quot;, &quot;ss_customer_sk&quot;
 )  dn
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;cnt&quot; BETWEEN 15 AND 20)
 ORDER BY &quot;c_last_name&quot; ASC, &quot;c_first_name&quot; ASC, &quot;c_salutation&quot; ASC, &quot;c_preferred_cust_flag&quot; DESC, &quot;ss_ticket_number&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q35.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;ca_state&quot;
 , &quot;cd_gender&quot;
 , &quot;cd_marital_status&quot;
 , &quot;cd_dep_count&quot;
 , &quot;count&quot;(*) &quot;cnt1&quot;
 , &quot;min&quot;(&quot;cd_dep_count&quot;)
 , &quot;max&quot;(&quot;cd_dep_count&quot;)
 , &quot;avg&quot;(&quot;cd_dep_count&quot;)
 , &quot;cd_dep_employed_count&quot;
 , &quot;count&quot;(*) &quot;cnt2&quot;
 , &quot;min&quot;(&quot;cd_dep_employed_count&quot;)
 , &quot;max&quot;(&quot;cd_dep_employed_count&quot;)
 , &quot;avg&quot;(&quot;cd_dep_employed_count&quot;)
 , &quot;cd_dep_college_count&quot;
 , &quot;count&quot;(*) &quot;cnt3&quot;
 , &quot;min&quot;(&quot;cd_dep_college_count&quot;)
 , &quot;max&quot;(&quot;cd_dep_college_count&quot;)
 , &quot;avg&quot;(&quot;cd_dep_college_count&quot;)
 FROM
   ${database}.${schema}.${prefix}customer c
 , ${database}.${schema}.${prefix}customer_address ca
 , ${database}.${schema}.${prefix}customer_demographics
 WHERE (&quot;c&quot;.&quot;c_current_addr_sk&quot; = &quot;ca&quot;.&quot;ca_address_sk&quot;)
    AND (&quot;cd_demo_sk&quot; = &quot;c&quot;.&quot;c_current_cdemo_sk&quot;)
    AND (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2002)
       AND (&quot;d_qoy&quot; &lt; 4)
 ))
    AND ((EXISTS (
       SELECT *
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2002)
          AND (&quot;d_qoy&quot; &lt; 4)
    ))
       OR (EXISTS (
       SELECT *
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;cs_ship_customer_sk&quot;)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2002)
          AND (&quot;d_qoy&quot; &lt; 4)
    )))
 GROUP BY &quot;ca_state&quot;, &quot;cd_gender&quot;, &quot;cd_marital_status&quot;, &quot;cd_dep_count&quot;, &quot;cd_dep_employed_count&quot;, &quot;cd_dep_college_count&quot;
 ORDER BY &quot;ca_state&quot; ASC, &quot;cd_gender&quot; ASC, &quot;cd_marital_status&quot; ASC, &quot;cd_dep_count&quot; ASC, &quot;cd_dep_employed_count&quot; ASC, &quot;cd_dep_college_count&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q36.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   (&quot;sum&quot;(&quot;ss_net_profit&quot;) / &quot;sum&quot;(&quot;ss_ext_sales_price&quot;)) &quot;gross_margin&quot;
 , &quot;i_category&quot;
 , &quot;i_class&quot;
 , (GROUPING (&quot;i_category&quot;) + GROUPING (&quot;i_class&quot;)) &quot;lochierarchy&quot;
 , &quot;rank&quot;() OVER (PARTITION BY (GROUPING (&quot;i_category&quot;) + GROUPING (&quot;i_class&quot;)), (CASE WHEN (GROUPING (&quot;i_class&quot;) = 0) THEN &quot;i_category&quot; END) ORDER BY (&quot;sum&quot;(&quot;ss_net_profit&quot;) / &quot;sum&quot;(&quot;ss_ext_sales_price&quot;)) ASC) &quot;rank_within_parent&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}store
 WHERE (&quot;d1&quot;.&quot;d_year&quot; = 2001)
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;ss_item_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;s_state&quot; IN (
      &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;
    , &apos;TN&apos;))
 GROUP BY ROLLUP (i_category, i_class)
 ORDER BY &quot;lochierarchy&quot; DESC, (CASE WHEN (&quot;lochierarchy&quot; = 0) THEN &quot;i_category&quot; END) ASC, &quot;rank_within_parent&quot; ASC, &quot;i_category&quot;, &quot;i_class&quot;
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q37.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;i_current_price&quot;
 FROM
   ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}inventory
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}catalog_sales
 WHERE (&quot;i_current_price&quot; BETWEEN 68 AND (68 + 30))
    AND (&quot;inv_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;d_date_sk&quot; = &quot;inv_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;2000-02-01&apos; AS DATE) AND (CAST(&apos;2000-02-01&apos; AS DATE) + INTERVAL  &apos;60&apos; DAY))
    AND (&quot;i_manufact_id&quot; IN (677, 940, 694, 808))
    AND (&quot;inv_quantity_on_hand&quot; BETWEEN 100 AND 500)
    AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;i_current_price&quot;
 ORDER BY &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q38.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;count&quot;(*)
 FROM
   (
    SELECT DISTINCT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;d_date&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
 INTERSECT    SELECT DISTINCT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;d_date&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;${prefix}catalog_sales&quot;.&quot;cs_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}catalog_sales&quot;.&quot;cs_bill_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
 INTERSECT    SELECT DISTINCT
      &quot;c_last_name&quot;
    , &quot;c_first_name&quot;
    , &quot;d_date&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;${prefix}web_sales&quot;.&quot;ws_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}web_sales&quot;.&quot;ws_bill_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
 )  hot_cust
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39_1.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   inv AS (
    SELECT
      &quot;w_warehouse_name&quot;
    , &quot;w_warehouse_sk&quot;
    , &quot;i_item_sk&quot;
    , &quot;d_moy&quot;
    , &quot;stdev&quot;
    , &quot;mean&quot;
    , (CASE &quot;mean&quot; WHEN 0 THEN null ELSE (&quot;stdev&quot; / &quot;mean&quot;) END) &quot;cov&quot;
    FROM
      (
       SELECT
         &quot;w_warehouse_name&quot;
       , &quot;w_warehouse_sk&quot;
       , &quot;i_item_sk&quot;
       , &quot;d_moy&quot;
       , &quot;stddev_samp&quot;(&quot;inv_quantity_on_hand&quot;) &quot;stdev&quot;
       , &quot;avg&quot;(&quot;inv_quantity_on_hand&quot;) &quot;mean&quot;
       FROM
         ${database}.${schema}.${prefix}inventory
       , ${database}.${schema}.${prefix}item
       , ${database}.${schema}.${prefix}warehouse
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;inv_item_sk&quot; = &quot;i_item_sk&quot;)
          AND (&quot;inv_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
          AND (&quot;inv_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
       GROUP BY &quot;w_warehouse_name&quot;, &quot;w_warehouse_sk&quot;, &quot;i_item_sk&quot;, &quot;d_moy&quot;
    )  foo
    WHERE ((CASE &quot;mean&quot; WHEN 0 THEN 0 ELSE (&quot;stdev&quot; / &quot;mean&quot;) END) &gt; 1)
 ) 
 SELECT
   &quot;inv1&quot;.&quot;w_warehouse_sk&quot;
 , &quot;inv1&quot;.&quot;i_item_sk&quot;
 , &quot;inv1&quot;.&quot;d_moy&quot;
 , &quot;inv1&quot;.&quot;mean&quot;
 , &quot;inv1&quot;.&quot;cov&quot;
 , &quot;inv2&quot;.&quot;w_warehouse_sk&quot;
 , &quot;inv2&quot;.&quot;i_item_sk&quot;
 , &quot;inv2&quot;.&quot;d_moy&quot;
 , &quot;inv2&quot;.&quot;mean&quot;
 , &quot;inv2&quot;.&quot;cov&quot;
 FROM
   inv inv1
 , inv inv2
 WHERE (&quot;inv1&quot;.&quot;i_item_sk&quot; = &quot;inv2&quot;.&quot;i_item_sk&quot;)
    AND (&quot;inv1&quot;.&quot;w_warehouse_sk&quot; = &quot;inv2&quot;.&quot;w_warehouse_sk&quot;)
    AND (&quot;inv1&quot;.&quot;d_moy&quot; = 1)
    AND (&quot;inv2&quot;.&quot;d_moy&quot; = (1 + 1))
 ORDER BY &quot;inv1&quot;.&quot;w_warehouse_sk&quot; ASC, &quot;inv1&quot;.&quot;i_item_sk&quot; ASC, &quot;inv1&quot;.&quot;d_moy&quot; ASC, &quot;inv1&quot;.&quot;mean&quot; ASC, &quot;inv1&quot;.&quot;cov&quot; ASC, &quot;inv2&quot;.&quot;d_moy&quot; ASC, &quot;inv2&quot;.&quot;mean&quot; ASC, &quot;inv2&quot;.&quot;cov&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39_2.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   inv AS (
    SELECT
      &quot;w_warehouse_name&quot;
    , &quot;w_warehouse_sk&quot;
    , &quot;i_item_sk&quot;
    , &quot;d_moy&quot;
    , &quot;stdev&quot;
    , &quot;mean&quot;
    , (CASE &quot;mean&quot; WHEN 0 THEN null ELSE (&quot;stdev&quot; / &quot;mean&quot;) END) &quot;cov&quot;
    FROM
      (
       SELECT
         &quot;w_warehouse_name&quot;
       , &quot;w_warehouse_sk&quot;
       , &quot;i_item_sk&quot;
       , &quot;d_moy&quot;
       , &quot;stddev_samp&quot;(&quot;inv_quantity_on_hand&quot;) &quot;stdev&quot;
       , &quot;avg&quot;(&quot;inv_quantity_on_hand&quot;) &quot;mean&quot;
       FROM
         ${database}.${schema}.${prefix}inventory
       , ${database}.${schema}.${prefix}item
       , ${database}.${schema}.${prefix}warehouse
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;inv_item_sk&quot; = &quot;i_item_sk&quot;)
          AND (&quot;inv_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
          AND (&quot;inv_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
       GROUP BY &quot;w_warehouse_name&quot;, &quot;w_warehouse_sk&quot;, &quot;i_item_sk&quot;, &quot;d_moy&quot;
    )  foo
    WHERE ((CASE &quot;mean&quot; WHEN 0 THEN 0 ELSE (&quot;stdev&quot; / &quot;mean&quot;) END) &gt; 1)
 ) 
 SELECT
   &quot;inv1&quot;.&quot;w_warehouse_sk&quot;
 , &quot;inv1&quot;.&quot;i_item_sk&quot;
 , &quot;inv1&quot;.&quot;d_moy&quot;
 , &quot;inv1&quot;.&quot;mean&quot;
 , &quot;inv1&quot;.&quot;cov&quot;
 , &quot;inv2&quot;.&quot;w_warehouse_sk&quot;
 , &quot;inv2&quot;.&quot;i_item_sk&quot;
 , &quot;inv2&quot;.&quot;d_moy&quot;
 , &quot;inv2&quot;.&quot;mean&quot;
 , &quot;inv2&quot;.&quot;cov&quot;
 FROM
   inv inv1
 , inv inv2
 WHERE (&quot;inv1&quot;.&quot;i_item_sk&quot; = &quot;inv2&quot;.&quot;i_item_sk&quot;)
    AND (&quot;inv1&quot;.&quot;w_warehouse_sk&quot; = &quot;inv2&quot;.&quot;w_warehouse_sk&quot;)
    AND (&quot;inv1&quot;.&quot;d_moy&quot; = 1)
    AND (&quot;inv2&quot;.&quot;d_moy&quot; = (1 + 1))
    AND (&quot;inv1&quot;.&quot;cov&quot; &gt; DECIMAL &apos;1.5&apos;)
 ORDER BY &quot;inv1&quot;.&quot;w_warehouse_sk&quot; ASC, &quot;inv1&quot;.&quot;i_item_sk&quot; ASC, &quot;inv1&quot;.&quot;d_moy&quot; ASC, &quot;inv1&quot;.&quot;mean&quot; ASC, &quot;inv1&quot;.&quot;cov&quot; ASC, &quot;inv2&quot;.&quot;d_moy&quot; ASC, &quot;inv2&quot;.&quot;mean&quot; ASC, &quot;inv2&quot;.&quot;cov&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q40.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;w_state&quot;
 , &quot;i_item_id&quot;
 , &quot;sum&quot;((CASE WHEN (CAST(&quot;d_date&quot; AS DATE) &lt; CAST(&apos;2000-03-11&apos; AS DATE)) THEN (&quot;cs_sales_price&quot; - COALESCE(&quot;cr_refunded_cash&quot;, 0)) ELSE 0 END)) &quot;sales_before&quot;
 , &quot;sum&quot;((CASE WHEN (CAST(&quot;d_date&quot; AS DATE) &gt;= CAST(&apos;2000-03-11&apos; AS DATE)) THEN (&quot;cs_sales_price&quot; - COALESCE(&quot;cr_refunded_cash&quot;, 0)) ELSE 0 END)) &quot;sales_after&quot;
 FROM
   (${database}.${schema}.${prefix}catalog_sales
 LEFT JOIN ${database}.${schema}.${prefix}catalog_returns ON (&quot;cs_order_number&quot; = &quot;cr_order_number&quot;)
    AND (&quot;cs_item_sk&quot; = &quot;cr_item_sk&quot;))
 , ${database}.${schema}.${prefix}warehouse
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;i_current_price&quot; BETWEEN DECIMAL &apos;0.99&apos; AND DECIMAL &apos;1.49&apos;)
    AND (&quot;i_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cs_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
    AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN (CAST(&apos;2000-03-11&apos; AS DATE) - INTERVAL  &apos;30&apos; DAY) AND (CAST(&apos;2000-03-11&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
 GROUP BY &quot;w_state&quot;, &quot;i_item_id&quot;
 ORDER BY &quot;w_state&quot; ASC, &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q41.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT DISTINCT &quot;i_product_name&quot;
 FROM
   ${database}.${schema}.${prefix}item i1
 WHERE (&quot;i_manufact_id&quot; BETWEEN 738 AND (738 + 40))
    AND ((
       SELECT &quot;count&quot;(*) &quot;item_cnt&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE ((&quot;i_manufact&quot; = &quot;i1&quot;.&quot;i_manufact&quot;)
             AND (((&quot;i_category&quot; = &apos;Women&apos;)
                   AND ((&quot;i_color&quot; = &apos;powder&apos;)
                      OR (&quot;i_color&quot; = &apos;khaki&apos;))
                   AND ((&quot;i_units&quot; = &apos;Ounce&apos;)
                      OR (&quot;i_units&quot; = &apos;Oz&apos;))
                   AND ((&quot;i_size&quot; = &apos;medium&apos;)
                      OR (&quot;i_size&quot; = &apos;extra large&apos;)))
                OR ((&quot;i_category&quot; = &apos;Women&apos;)
                   AND ((&quot;i_color&quot; = &apos;brown&apos;)
                      OR (&quot;i_color&quot; = &apos;honeydew&apos;))
                   AND ((&quot;i_units&quot; = &apos;Bunch&apos;)
                      OR (&quot;i_units&quot; = &apos;Ton&apos;))
                   AND ((&quot;i_size&quot; = &apos;N/A&apos;)
                      OR (&quot;i_size&quot; = &apos;small&apos;)))
                OR ((&quot;i_category&quot; = &apos;Men&apos;)
                   AND ((&quot;i_color&quot; = &apos;floral&apos;)
                      OR (&quot;i_color&quot; = &apos;deep&apos;))
                   AND ((&quot;i_units&quot; = &apos;N/A&apos;)
                      OR (&quot;i_units&quot; = &apos;Dozen&apos;))
                   AND ((&quot;i_size&quot; = &apos;petite&apos;)
                      OR (&quot;i_size&quot; = &apos;large&apos;)))
                OR ((&quot;i_category&quot; = &apos;Men&apos;)
                   AND ((&quot;i_color&quot; = &apos;light&apos;)
                      OR (&quot;i_color&quot; = &apos;cornflower&apos;))
                   AND ((&quot;i_units&quot; = &apos;Box&apos;)
                      OR (&quot;i_units&quot; = &apos;Pound&apos;))
                   AND ((&quot;i_size&quot; = &apos;medium&apos;)
                      OR (&quot;i_size&quot; = &apos;extra large&apos;)))))
          OR ((&quot;i_manufact&quot; = &quot;i1&quot;.&quot;i_manufact&quot;)
             AND (((&quot;i_category&quot; = &apos;Women&apos;)
                   AND ((&quot;i_color&quot; = &apos;midnight&apos;)
                      OR (&quot;i_color&quot; = &apos;snow&apos;))
                   AND ((&quot;i_units&quot; = &apos;Pallet&apos;)
                      OR (&quot;i_units&quot; = &apos;Gross&apos;))
                   AND ((&quot;i_size&quot; = &apos;medium&apos;)
                      OR (&quot;i_size&quot; = &apos;extra large&apos;)))
                OR ((&quot;i_category&quot; = &apos;Women&apos;)
                   AND ((&quot;i_color&quot; = &apos;cyan&apos;)
                      OR (&quot;i_color&quot; = &apos;papaya&apos;))
                   AND ((&quot;i_units&quot; = &apos;Cup&apos;)
                      OR (&quot;i_units&quot; = &apos;Dram&apos;))
                   AND ((&quot;i_size&quot; = &apos;N/A&apos;)
                      OR (&quot;i_size&quot; = &apos;small&apos;)))
                OR ((&quot;i_category&quot; = &apos;Men&apos;)
                   AND ((&quot;i_color&quot; = &apos;orange&apos;)
                      OR (&quot;i_color&quot; = &apos;frosted&apos;))
                   AND ((&quot;i_units&quot; = &apos;Each&apos;)
                      OR (&quot;i_units&quot; = &apos;Tbl&apos;))
                   AND ((&quot;i_size&quot; = &apos;petite&apos;)
                      OR (&quot;i_size&quot; = &apos;large&apos;)))
                OR ((&quot;i_category&quot; = &apos;Men&apos;)
                   AND ((&quot;i_color&quot; = &apos;forest&apos;)
                      OR (&quot;i_color&quot; = &apos;ghost&apos;))
                   AND ((&quot;i_units&quot; = &apos;Lb&apos;)
                      OR (&quot;i_units&quot; = &apos;Bundle&apos;))
                   AND ((&quot;i_size&quot; = &apos;medium&apos;)
                      OR (&quot;i_size&quot; = &apos;extra large&apos;)))))
    ) &gt; 0)
 ORDER BY &quot;i_product_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q42.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;dt&quot;.&quot;d_year&quot;
 , &quot;${prefix}item&quot;.&quot;i_category_id&quot;
 , &quot;${prefix}item&quot;.&quot;i_category&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;)
 FROM
   ${database}.${schema}.${prefix}date_dim dt
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;dt&quot;.&quot;d_date_sk&quot; = &quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot;)
    AND (&quot;${prefix}store_sales&quot;.&quot;ss_item_sk&quot; = &quot;${prefix}item&quot;.&quot;i_item_sk&quot;)
    AND (&quot;${prefix}item&quot;.&quot;i_manager_id&quot; = 1)
    AND (&quot;dt&quot;.&quot;d_moy&quot; = 11)
    AND (&quot;dt&quot;.&quot;d_year&quot; = 2000)
 GROUP BY &quot;dt&quot;.&quot;d_year&quot;, &quot;${prefix}item&quot;.&quot;i_category_id&quot;, &quot;${prefix}item&quot;.&quot;i_category&quot;
 ORDER BY &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) DESC, &quot;dt&quot;.&quot;d_year&quot; ASC, &quot;${prefix}item&quot;.&quot;i_category_id&quot; ASC, &quot;${prefix}item&quot;.&quot;i_category&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q43.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;s_store_name&quot;
 , &quot;s_store_id&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Sunday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;sun_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Monday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;mon_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Tuesday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;tue_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Wednesday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;wed_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Thursday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;thu_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Friday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;fri_sales&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Saturday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;sat_sales&quot;
 FROM
   ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store
 WHERE (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;s_gmt_offset&quot; = -5)
    AND (&quot;d_year&quot; = 2000)
 GROUP BY &quot;s_store_name&quot;, &quot;s_store_id&quot;
 ORDER BY &quot;s_store_name&quot; ASC, &quot;s_store_id&quot; ASC, &quot;sun_sales&quot; ASC, &quot;mon_sales&quot; ASC, &quot;tue_sales&quot; ASC, &quot;wed_sales&quot; ASC, &quot;thu_sales&quot; ASC, &quot;fri_sales&quot; ASC, &quot;sat_sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q44.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;asceding&quot;.&quot;rnk&quot;
 , &quot;i1&quot;.&quot;i_product_name&quot; &quot;best_performing&quot;
 , &quot;i2&quot;.&quot;i_product_name&quot; &quot;worst_performing&quot;
 FROM
   (
    SELECT *
    FROM
      (
       SELECT
         &quot;item_sk&quot;
       , &quot;rank&quot;() OVER (ORDER BY &quot;rank_col&quot; ASC) &quot;rnk&quot;
       FROM
         (
          SELECT
            &quot;ss_item_sk&quot; &quot;item_sk&quot;
          , &quot;avg&quot;(&quot;ss_net_profit&quot;) &quot;rank_col&quot;
          FROM
            ${database}.${schema}.${prefix}store_sales ss1
          WHERE (&quot;ss_store_sk&quot; = 4)
          GROUP BY &quot;ss_item_sk&quot;
          HAVING (&quot;avg&quot;(&quot;ss_net_profit&quot;) &gt; (DECIMAL &apos;0.9&apos; * (
                   SELECT &quot;avg&quot;(&quot;ss_net_profit&quot;) &quot;rank_col&quot;
                   FROM
                     ${database}.${schema}.${prefix}store_sales
                   WHERE (&quot;ss_store_sk&quot; = 4)
                      AND (&quot;ss_addr_sk&quot; IS NULL)
                   GROUP BY &quot;ss_store_sk&quot;
                )))
       )  v1
    )  v11
    WHERE (&quot;rnk&quot; &lt; 11)
 )  asceding
 , (
    SELECT *
    FROM
      (
       SELECT
         &quot;item_sk&quot;
       , &quot;rank&quot;() OVER (ORDER BY &quot;rank_col&quot; DESC) &quot;rnk&quot;
       FROM
         (
          SELECT
            &quot;ss_item_sk&quot; &quot;item_sk&quot;
          , &quot;avg&quot;(&quot;ss_net_profit&quot;) &quot;rank_col&quot;
          FROM
            ${database}.${schema}.${prefix}store_sales ss1
          WHERE (&quot;ss_store_sk&quot; = 4)
          GROUP BY &quot;ss_item_sk&quot;
          HAVING (&quot;avg&quot;(&quot;ss_net_profit&quot;) &gt; (DECIMAL &apos;0.9&apos; * (
                   SELECT &quot;avg&quot;(&quot;ss_net_profit&quot;) &quot;rank_col&quot;
                   FROM
                     ${database}.${schema}.${prefix}store_sales
                   WHERE (&quot;ss_store_sk&quot; = 4)
                      AND (&quot;ss_addr_sk&quot; IS NULL)
                   GROUP BY &quot;ss_store_sk&quot;
                )))
       )  v2
    )  v21
    WHERE (&quot;rnk&quot; &lt; 11)
 )  descending
 , ${database}.${schema}.${prefix}item i1
 , ${database}.${schema}.${prefix}item i2
 WHERE (&quot;asceding&quot;.&quot;rnk&quot; = &quot;descending&quot;.&quot;rnk&quot;)
    AND (&quot;i1&quot;.&quot;i_item_sk&quot; = &quot;asceding&quot;.&quot;item_sk&quot;)
    AND (&quot;i2&quot;.&quot;i_item_sk&quot; = &quot;descending&quot;.&quot;item_sk&quot;)
 ORDER BY &quot;asceding&quot;.&quot;rnk&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q45.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;ca_zip&quot;
 , &quot;ca_city&quot;
 , &quot;sum&quot;(&quot;ws_sales_price&quot;)
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;ws_bill_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
    AND ((&quot;substr&quot;(&quot;ca_zip&quot;, 1, 5) IN (&apos;85669&apos;   , &apos;86197&apos;   , &apos;88274&apos;   , &apos;83405&apos;   , &apos;86475&apos;   , &apos;85392&apos;   , &apos;85460&apos;   , &apos;80348&apos;   , &apos;81792&apos;))
       OR (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_item_sk&quot; IN (2      , 3      , 5      , 7      , 11      , 13      , 17      , 19      , 23      , 29))
    )))
    AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_qoy&quot; = 2)
    AND (&quot;d_year&quot; = 2001)
 GROUP BY &quot;ca_zip&quot;, &quot;ca_city&quot;
 ORDER BY &quot;ca_zip&quot; ASC, &quot;ca_city&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q46.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;ca_city&quot;
 , &quot;bought_city&quot;
 , &quot;ss_ticket_number&quot;
 , &quot;amt&quot;
 , &quot;profit&quot;
 FROM
   (
    SELECT
      &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;ca_city&quot; &quot;bought_city&quot;
    , &quot;sum&quot;(&quot;ss_coupon_amt&quot;) &quot;amt&quot;
    , &quot;sum&quot;(&quot;ss_net_profit&quot;) &quot;profit&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_store_sk&quot; = &quot;${prefix}store&quot;.&quot;s_store_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_addr_sk&quot; = &quot;${prefix}customer_address&quot;.&quot;ca_address_sk&quot;)
       AND ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
          OR (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; = 3))
       AND (&quot;${prefix}date_dim&quot;.&quot;d_dow&quot; IN (6   , 0))
       AND (&quot;${prefix}date_dim&quot;.&quot;d_year&quot; IN (1999   , (1999 + 1)   , (1999 + 2)))
       AND (&quot;${prefix}store&quot;.&quot;s_city&quot; IN (&apos;Fairview&apos;   , &apos;Midway&apos;   , &apos;Fairview&apos;   , &apos;Fairview&apos;   , &apos;Fairview&apos;))
    GROUP BY &quot;ss_ticket_number&quot;, &quot;ss_customer_sk&quot;, &quot;ss_addr_sk&quot;, &quot;ca_city&quot;
 )  dn
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address current_addr
 WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;${prefix}customer&quot;.&quot;c_current_addr_sk&quot; = &quot;current_addr&quot;.&quot;ca_address_sk&quot;)
    AND (&quot;current_addr&quot;.&quot;ca_city&quot; &lt;&gt; &quot;bought_city&quot;)
 ORDER BY &quot;c_last_name&quot; ASC, &quot;c_first_name&quot; ASC, &quot;ca_city&quot; ASC, &quot;bought_city&quot; ASC, &quot;ss_ticket_number&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q47.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   v1 AS (
    SELECT
      &quot;i_category&quot;
    , &quot;i_brand&quot;
    , &quot;s_store_name&quot;
    , &quot;s_company_name&quot;
    , &quot;d_year&quot;
    , &quot;d_moy&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;sum_sales&quot;
    , &quot;avg&quot;(&quot;sum&quot;(&quot;ss_sales_price&quot;)) OVER (PARTITION BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;s_store_name&quot;, &quot;s_company_name&quot;, &quot;d_year&quot;) &quot;avg_monthly_sales&quot;
    , &quot;rank&quot;() OVER (PARTITION BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;s_store_name&quot;, &quot;s_company_name&quot; ORDER BY &quot;d_year&quot; ASC, &quot;d_moy&quot; ASC) &quot;rn&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND ((&quot;d_year&quot; = 1999)
          OR ((&quot;d_year&quot; = (1999 - 1))
             AND (&quot;d_moy&quot; = 12))
          OR ((&quot;d_year&quot; = (1999 + 1))
             AND (&quot;d_moy&quot; = 1)))
    GROUP BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;s_store_name&quot;, &quot;s_company_name&quot;, &quot;d_year&quot;, &quot;d_moy&quot;
 ) 
 , v2 AS (
    SELECT
      &quot;v1&quot;.&quot;i_category&quot;
    , &quot;v1&quot;.&quot;i_brand&quot;
    , &quot;v1&quot;.&quot;s_store_name&quot;
    , &quot;v1&quot;.&quot;s_company_name&quot;
    , &quot;v1&quot;.&quot;d_year&quot;
    , &quot;v1&quot;.&quot;d_moy&quot;
    , &quot;v1&quot;.&quot;avg_monthly_sales&quot;
    , &quot;v1&quot;.&quot;sum_sales&quot;
    , &quot;v1_lag&quot;.&quot;sum_sales&quot; &quot;psum&quot;
    , &quot;v1_lead&quot;.&quot;sum_sales&quot; &quot;nsum&quot;
    FROM
      v1
    , v1 v1_lag
    , v1 v1_lead
    WHERE (&quot;v1&quot;.&quot;i_category&quot; = &quot;v1_lag&quot;.&quot;i_category&quot;)
       AND (&quot;v1&quot;.&quot;i_category&quot; = &quot;v1_lead&quot;.&quot;i_category&quot;)
       AND (&quot;v1&quot;.&quot;i_brand&quot; = &quot;v1_lag&quot;.&quot;i_brand&quot;)
       AND (&quot;v1&quot;.&quot;i_brand&quot; = &quot;v1_lead&quot;.&quot;i_brand&quot;)
       AND (&quot;v1&quot;.&quot;s_store_name&quot; = &quot;v1_lag&quot;.&quot;s_store_name&quot;)
       AND (&quot;v1&quot;.&quot;s_store_name&quot; = &quot;v1_lead&quot;.&quot;s_store_name&quot;)
       AND (&quot;v1&quot;.&quot;s_company_name&quot; = &quot;v1_lag&quot;.&quot;s_company_name&quot;)
       AND (&quot;v1&quot;.&quot;s_company_name&quot; = &quot;v1_lead&quot;.&quot;s_company_name&quot;)
       AND (&quot;v1&quot;.&quot;rn&quot; = (&quot;v1_lag&quot;.&quot;rn&quot; + 1))
       AND (&quot;v1&quot;.&quot;rn&quot; = (&quot;v1_lead&quot;.&quot;rn&quot; - 1))
 ) 
 SELECT *
 FROM
   v2
 WHERE (&quot;d_year&quot; = 1999)
    AND (&quot;avg_monthly_sales&quot; &gt; 0)
    AND ((CASE WHEN (&quot;avg_monthly_sales&quot; &gt; 0) THEN (&quot;abs&quot;((&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;)) / &quot;avg_monthly_sales&quot;) ELSE null END) &gt; DECIMAL &apos;0.1&apos;)
 ORDER BY (&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;) ASC, 3 ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q48.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;sum&quot;(&quot;ss_quantity&quot;)
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_year&quot; = 2000)
    AND (((&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;M&apos;)
          AND (&quot;cd_education_status&quot; = &apos;4 yr Degree&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;100.00&apos; AND DECIMAL &apos;150.00&apos;))
       OR ((&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;D&apos;)
          AND (&quot;cd_education_status&quot; = &apos;2 yr Degree&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;50.00&apos; AND DECIMAL &apos;100.00&apos;))
       OR ((&quot;cd_demo_sk&quot; = &quot;ss_cdemo_sk&quot;)
          AND (&quot;cd_marital_status&quot; = &apos;S&apos;)
          AND (&quot;cd_education_status&quot; = &apos;College&apos;)
          AND (&quot;ss_sales_price&quot; BETWEEN DECIMAL &apos;150.00&apos; AND DECIMAL &apos;200.00&apos;)))
    AND (((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;CO&apos;      , &apos;OH&apos;      , &apos;TX&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 0 AND 2000))
       OR ((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;OR&apos;      , &apos;MN&apos;      , &apos;KY&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 150 AND 3000))
       OR ((&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
          AND (&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;VA&apos;      , &apos;CA&apos;      , &apos;MS&apos;))
          AND (&quot;ss_net_profit&quot; BETWEEN 50 AND 25000)))

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q49.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &apos;web&apos; &quot;channel&quot;
 , &quot;web&quot;.&quot;item&quot;
 , &quot;web&quot;.&quot;return_ratio&quot;
 , &quot;web&quot;.&quot;return_rank&quot;
 , &quot;web&quot;.&quot;currency_rank&quot;
 FROM
   (
    SELECT
      &quot;item&quot;
    , &quot;return_ratio&quot;
    , &quot;currency_ratio&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;return_ratio&quot; ASC) &quot;return_rank&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;currency_ratio&quot; ASC) &quot;currency_rank&quot;
    FROM
      (
       SELECT
         &quot;ws&quot;.&quot;ws_item_sk&quot; &quot;item&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;wr&quot;.&quot;wr_return_quantity&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;ws&quot;.&quot;ws_quantity&quot;, 0)) AS DECIMAL(15,4))) &quot;return_ratio&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;wr&quot;.&quot;wr_return_amt&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;ws&quot;.&quot;ws_net_paid&quot;, 0)) AS DECIMAL(15,4))) &quot;currency_ratio&quot;
       FROM
         (${database}.${schema}.${prefix}web_sales ws
       LEFT JOIN ${database}.${schema}.${prefix}web_returns wr ON (&quot;ws&quot;.&quot;ws_order_number&quot; = &quot;wr&quot;.&quot;wr_order_number&quot;)
          AND (&quot;ws&quot;.&quot;ws_item_sk&quot; = &quot;wr&quot;.&quot;wr_item_sk&quot;))
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;wr&quot;.&quot;wr_return_amt&quot; &gt; 10000)
          AND (&quot;ws&quot;.&quot;ws_net_profit&quot; &gt; 1)
          AND (&quot;ws&quot;.&quot;ws_net_paid&quot; &gt; 0)
          AND (&quot;ws&quot;.&quot;ws_quantity&quot; &gt; 0)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
          AND (&quot;d_moy&quot; = 12)
       GROUP BY &quot;ws&quot;.&quot;ws_item_sk&quot;
    )  in_web
 )  web
 WHERE (&quot;web&quot;.&quot;return_rank&quot; &lt;= 10)
    OR (&quot;web&quot;.&quot;currency_rank&quot; &lt;= 10)
 UNION SELECT
   &apos;catalog&apos; &quot;channel&quot;
 , &quot;catalog&quot;.&quot;item&quot;
 , &quot;catalog&quot;.&quot;return_ratio&quot;
 , &quot;catalog&quot;.&quot;return_rank&quot;
 , &quot;catalog&quot;.&quot;currency_rank&quot;
 FROM
   (
    SELECT
      &quot;item&quot;
    , &quot;return_ratio&quot;
    , &quot;currency_ratio&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;return_ratio&quot; ASC) &quot;return_rank&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;currency_ratio&quot; ASC) &quot;currency_rank&quot;
    FROM
      (
       SELECT
         &quot;cs&quot;.&quot;cs_item_sk&quot; &quot;item&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;cr&quot;.&quot;cr_return_quantity&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;cs&quot;.&quot;cs_quantity&quot;, 0)) AS DECIMAL(15,4))) &quot;return_ratio&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;cr&quot;.&quot;cr_return_amount&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;cs&quot;.&quot;cs_net_paid&quot;, 0)) AS DECIMAL(15,4))) &quot;currency_ratio&quot;
       FROM
         (${database}.${schema}.${prefix}catalog_sales cs
       LEFT JOIN ${database}.${schema}.${prefix}catalog_returns cr ON (&quot;cs&quot;.&quot;cs_order_number&quot; = &quot;cr&quot;.&quot;cr_order_number&quot;)
          AND (&quot;cs&quot;.&quot;cs_item_sk&quot; = &quot;cr&quot;.&quot;cr_item_sk&quot;))
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;cr&quot;.&quot;cr_return_amount&quot; &gt; 10000)
          AND (&quot;cs&quot;.&quot;cs_net_profit&quot; &gt; 1)
          AND (&quot;cs&quot;.&quot;cs_net_paid&quot; &gt; 0)
          AND (&quot;cs&quot;.&quot;cs_quantity&quot; &gt; 0)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
          AND (&quot;d_moy&quot; = 12)
       GROUP BY &quot;cs&quot;.&quot;cs_item_sk&quot;
    )  in_cat
 )  &quot;CATALOG&quot;
 WHERE (&quot;catalog&quot;.&quot;return_rank&quot; &lt;= 10)
    OR (&quot;catalog&quot;.&quot;currency_rank&quot; &lt;= 10)
 UNION SELECT
   &apos;${database}.${schema}.${prefix}store&apos; &quot;channel&quot;
 , &quot;store&quot;.&quot;item&quot;
 , &quot;store&quot;.&quot;return_ratio&quot;
 , &quot;store&quot;.&quot;return_rank&quot;
 , &quot;store&quot;.&quot;currency_rank&quot;
 FROM
   (
    SELECT
      &quot;item&quot;
    , &quot;return_ratio&quot;
    , &quot;currency_ratio&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;return_ratio&quot; ASC) &quot;return_rank&quot;
    , &quot;rank&quot;() OVER (ORDER BY &quot;currency_ratio&quot; ASC) &quot;currency_rank&quot;
    FROM
      (
       SELECT
         &quot;sts&quot;.&quot;ss_item_sk&quot; &quot;item&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;sr&quot;.&quot;sr_return_quantity&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;sts&quot;.&quot;ss_quantity&quot;, 0)) AS DECIMAL(15,4))) &quot;return_ratio&quot;
       , (CAST(&quot;sum&quot;(COALESCE(&quot;sr&quot;.&quot;sr_return_amt&quot;, 0)) AS DECIMAL(15,4)) / CAST(&quot;sum&quot;(COALESCE(&quot;sts&quot;.&quot;ss_net_paid&quot;, 0)) AS DECIMAL(15,4))) &quot;currency_ratio&quot;
       FROM
         (${database}.${schema}.${prefix}store_sales sts
       LEFT JOIN ${database}.${schema}.${prefix}store_returns sr ON (&quot;sts&quot;.&quot;ss_ticket_number&quot; = &quot;sr&quot;.&quot;sr_ticket_number&quot;)
          AND (&quot;sts&quot;.&quot;ss_item_sk&quot; = &quot;sr&quot;.&quot;sr_item_sk&quot;))
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;sr&quot;.&quot;sr_return_amt&quot; &gt; 10000)
          AND (&quot;sts&quot;.&quot;ss_net_profit&quot; &gt; 1)
          AND (&quot;sts&quot;.&quot;ss_net_paid&quot; &gt; 0)
          AND (&quot;sts&quot;.&quot;ss_quantity&quot; &gt; 0)
          AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
          AND (&quot;d_moy&quot; = 12)
       GROUP BY &quot;sts&quot;.&quot;ss_item_sk&quot;
    )  in_store
 )  store
 WHERE (&quot;store&quot;.&quot;return_rank&quot; &lt;= 10)
    OR (&quot;store&quot;.&quot;currency_rank&quot; &lt;= 10)
 ORDER BY 1 ASC, 4 ASC, 5 ASC, 2 ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q50.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;s_store_name&quot;
 , &quot;s_company_id&quot;
 , &quot;s_street_number&quot;
 , &quot;s_street_name&quot;
 , &quot;s_street_type&quot;
 , &quot;s_suite_number&quot;
 , &quot;s_city&quot;
 , &quot;s_county&quot;
 , &quot;s_state&quot;
 , &quot;s_zip&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &lt;= 30) THEN 1 ELSE 0 END)) &quot;30 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &gt; 30)
    AND ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &lt;= 60) THEN 1 ELSE 0 END)) &quot;31-60 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &gt; 60)
    AND ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &lt;= 90) THEN 1 ELSE 0 END)) &quot;61-90 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &gt; 90)
    AND ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &lt;= 120) THEN 1 ELSE 0 END)) &quot;91-120 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;sr_returned_date_sk&quot; - &quot;ss_sold_date_sk&quot;) &gt; 120) THEN 1 ELSE 0 END)) &quot;&gt;120 days&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}store_returns
 , ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}date_dim d2
 WHERE (&quot;d2&quot;.&quot;d_year&quot; = 2001)
    AND (&quot;d2&quot;.&quot;d_moy&quot; = 8)
    AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
    AND (&quot;ss_sold_date_sk&quot; = &quot;d1&quot;.&quot;d_date_sk&quot;)
    AND (&quot;sr_returned_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
    AND (&quot;ss_customer_sk&quot; = &quot;sr_customer_sk&quot;)
    AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
 GROUP BY &quot;s_store_name&quot;, &quot;s_company_id&quot;, &quot;s_street_number&quot;, &quot;s_street_name&quot;, &quot;s_street_type&quot;, &quot;s_suite_number&quot;, &quot;s_city&quot;, &quot;s_county&quot;, &quot;s_state&quot;, &quot;s_zip&quot;
 ORDER BY &quot;s_store_name&quot; ASC, &quot;s_company_id&quot; ASC, &quot;s_street_number&quot; ASC, &quot;s_street_name&quot; ASC, &quot;s_street_type&quot; ASC, &quot;s_suite_number&quot; ASC, &quot;s_city&quot; ASC, &quot;s_county&quot; ASC, &quot;s_state&quot; ASC, &quot;s_zip&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q51.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   web_v1 AS (
    SELECT
      &quot;ws_item_sk&quot; &quot;item_sk&quot;
    , &quot;d_date&quot;
    , &quot;sum&quot;(&quot;sum&quot;(&quot;ws_sales_price&quot;)) OVER (PARTITION BY &quot;ws_item_sk&quot; ORDER BY &quot;d_date&quot; ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) &quot;cume_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
       AND (&quot;ws_item_sk&quot; IS NOT NULL)
    GROUP BY &quot;ws_item_sk&quot;, &quot;d_date&quot;
 ) 
 , store_v1 AS (
    SELECT
      &quot;ss_item_sk&quot; &quot;item_sk&quot;
    , &quot;d_date&quot;
    , &quot;sum&quot;(&quot;sum&quot;(&quot;ss_sales_price&quot;)) OVER (PARTITION BY &quot;ss_item_sk&quot; ORDER BY &quot;d_date&quot; ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) &quot;cume_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
       AND (&quot;ss_item_sk&quot; IS NOT NULL)
    GROUP BY &quot;ss_item_sk&quot;, &quot;d_date&quot;
 ) 
 SELECT *
 FROM
   (
    SELECT
      &quot;item_sk&quot;
    , &quot;d_date&quot;
    , &quot;web_sales&quot;
    , &quot;store_sales&quot;
    , &quot;max&quot;(&quot;web_sales&quot;) OVER (PARTITION BY &quot;item_sk&quot; ORDER BY &quot;d_date&quot; ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) &quot;web_cumulative&quot;
    , &quot;max&quot;(&quot;store_sales&quot;) OVER (PARTITION BY &quot;item_sk&quot; ORDER BY &quot;d_date&quot; ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) &quot;store_cumulative&quot;
    FROM
      (
       SELECT
         (CASE WHEN (&quot;web&quot;.&quot;item_sk&quot; IS NOT NULL) THEN &quot;web&quot;.&quot;item_sk&quot; ELSE &quot;store&quot;.&quot;item_sk&quot; END) &quot;item_sk&quot;
       , (CASE WHEN (&quot;web&quot;.&quot;d_date&quot; IS NOT NULL) THEN &quot;web&quot;.&quot;d_date&quot; ELSE &quot;store&quot;.&quot;d_date&quot; END) &quot;d_date&quot;
       , &quot;web&quot;.&quot;cume_sales&quot; &quot;web_sales&quot;
       , &quot;store&quot;.&quot;cume_sales&quot; &quot;store_sales&quot;
       FROM
         (web_v1 web
       FULL JOIN store_v1 store ON (&quot;web&quot;.&quot;item_sk&quot; = &quot;store&quot;.&quot;item_sk&quot;)
          AND (&quot;web&quot;.&quot;d_date&quot; = &quot;store&quot;.&quot;d_date&quot;))
    )  x
 )  y
 WHERE (&quot;web_cumulative&quot; &gt; &quot;store_cumulative&quot;)
 ORDER BY &quot;item_sk&quot; ASC, &quot;d_date&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q52.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;dt&quot;.&quot;d_year&quot;
 , &quot;${prefix}item&quot;.&quot;i_brand_id&quot; &quot;brand_id&quot;
 , &quot;${prefix}item&quot;.&quot;i_brand&quot; &quot;brand&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;ext_price&quot;
 FROM
   ${database}.${schema}.${prefix}date_dim dt
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;dt&quot;.&quot;d_date_sk&quot; = &quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot;)
    AND (&quot;${prefix}store_sales&quot;.&quot;ss_item_sk&quot; = &quot;${prefix}item&quot;.&quot;i_item_sk&quot;)
    AND (&quot;${prefix}item&quot;.&quot;i_manager_id&quot; = 1)
    AND (&quot;dt&quot;.&quot;d_moy&quot; = 11)
    AND (&quot;dt&quot;.&quot;d_year&quot; = 2000)
 GROUP BY &quot;dt&quot;.&quot;d_year&quot;, &quot;${prefix}item&quot;.&quot;i_brand&quot;, &quot;${prefix}item&quot;.&quot;i_brand_id&quot;
 ORDER BY &quot;dt&quot;.&quot;d_year&quot; ASC, &quot;ext_price&quot; DESC, &quot;brand_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q53.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;i_manufact_id&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;sum_sales&quot;
    , &quot;avg&quot;(&quot;sum&quot;(&quot;ss_sales_price&quot;)) OVER (PARTITION BY &quot;i_manufact_id&quot;) &quot;avg_quarterly_sales&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;d_month_seq&quot; IN (1200   , (1200 + 1)   , (1200 + 2)   , (1200 + 3)   , (1200 + 4)   , (1200 + 5)   , (1200 + 6)   , (1200 + 7)   , (1200 + 8)   , (1200 + 9)   , (1200 + 10)   , (1200 + 11)))
       AND (((&quot;i_category&quot; IN (&apos;Books&apos;         , &apos;Children&apos;         , &apos;Electronics&apos;))
             AND (&quot;i_class&quot; IN (&apos;personal&apos;         , &apos;portable&apos;         , &apos;reference&apos;         , &apos;self-help&apos;))
             AND (&quot;i_brand&quot; IN (&apos;scholaramalgamalg #14&apos;         , &apos;scholaramalgamalg #7&apos;         , &apos;exportiunivamalg #9&apos;         , &apos;scholaramalgamalg #9&apos;)))
          OR ((&quot;i_category&quot; IN (&apos;Women&apos;         , &apos;Music&apos;         , &apos;Men&apos;))
             AND (&quot;i_class&quot; IN (&apos;accessories&apos;         , &apos;classical&apos;         , &apos;fragrances&apos;         , &apos;pants&apos;))
             AND (&quot;i_brand&quot; IN (&apos;amalgimporto #1&apos;         , &apos;edu packscholar #1&apos;         , &apos;exportiimporto #1&apos;         , &apos;importoamalg #1&apos;))))
    GROUP BY &quot;i_manufact_id&quot;, &quot;d_qoy&quot;
 )  tmp1
 WHERE ((CASE WHEN (&quot;avg_quarterly_sales&quot; &gt; 0) THEN (&quot;abs&quot;((CAST(&quot;sum_sales&quot; AS DECIMAL(38,4)) - &quot;avg_quarterly_sales&quot;)) / &quot;avg_quarterly_sales&quot;) ELSE null END) &gt; DECIMAL &apos;0.1&apos;)
 ORDER BY &quot;avg_quarterly_sales&quot; ASC, &quot;sum_sales&quot; ASC, &quot;i_manufact_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q54.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   my_customers AS (
    SELECT DISTINCT
      &quot;c_customer_sk&quot;
    , &quot;c_current_addr_sk&quot;
    FROM
      (
       SELECT
         &quot;cs_sold_date_sk&quot; &quot;sold_date_sk&quot;
       , &quot;cs_bill_customer_sk&quot; &quot;customer_sk&quot;
       , &quot;cs_item_sk&quot; &quot;item_sk&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
 UNION ALL       SELECT
         &quot;ws_sold_date_sk&quot; &quot;sold_date_sk&quot;
       , &quot;ws_bill_customer_sk&quot; &quot;customer_sk&quot;
       , &quot;ws_item_sk&quot; &quot;item_sk&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
    )  cs_or_ws_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    WHERE (&quot;sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;i_category&quot; = &apos;Women&apos;)
       AND (&quot;i_class&quot; = &apos;maternity&apos;)
       AND (&quot;c_customer_sk&quot; = &quot;cs_or_ws_sales&quot;.&quot;customer_sk&quot;)
       AND (&quot;d_moy&quot; = 12)
       AND (&quot;d_year&quot; = 1998)
 ) 
 , my_revenue AS (
    SELECT
      &quot;c_customer_sk&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;revenue&quot;
    FROM
      my_customers
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_county&quot; = &quot;s_county&quot;)
       AND (&quot;ca_state&quot; = &quot;s_state&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN (
       SELECT DISTINCT (&quot;d_month_seq&quot; + 1)
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_year&quot; = 1998)
          AND (&quot;d_moy&quot; = 12)
    ) AND (
       SELECT DISTINCT (&quot;d_month_seq&quot; + 3)
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_year&quot; = 1998)
          AND (&quot;d_moy&quot; = 12)
    ))
    GROUP BY &quot;c_customer_sk&quot;
 ) 
 , segments AS (
    SELECT CAST((&quot;revenue&quot; / 50) AS INTEGER) &quot;segment&quot;
    FROM
      my_revenue
 ) 
 SELECT
   &quot;segment&quot;
 , &quot;count&quot;(*) &quot;num_customers&quot;
 , (&quot;segment&quot; * 50) &quot;segment_base&quot;
 FROM
   segments
 GROUP BY &quot;segment&quot;
 ORDER BY &quot;segment&quot; ASC, &quot;num_customers&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q55.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_brand_id&quot; &quot;brand_id&quot;
 , &quot;i_brand&quot; &quot;brand&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;ext_price&quot;
 FROM
   ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_manager_id&quot; = 28)
    AND (&quot;d_moy&quot; = 11)
    AND (&quot;d_year&quot; = 1999)
 GROUP BY &quot;i_brand&quot;, &quot;i_brand_id&quot;
 ORDER BY &quot;ext_price&quot; DESC, &quot;i_brand_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q56.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_color&quot; IN (&apos;slate&apos;      , &apos;blanched&apos;      , &apos;burnished&apos;))
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , cs AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_color&quot; IN (&apos;slate&apos;      , &apos;blanched&apos;      , &apos;burnished&apos;))
    ))
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;cs_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , ws AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_color&quot; IN (&apos;slate&apos;      , &apos;blanched&apos;      , &apos;burnished&apos;))
    ))
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; = 2)
       AND (&quot;ws_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 SELECT
   &quot;i_item_id&quot;
 , &quot;sum&quot;(&quot;total_sales&quot;) &quot;total_sales&quot;
 FROM
   (
    SELECT *
    FROM
      ss
 UNION ALL    SELECT *
    FROM
      cs
 UNION ALL    SELECT *
    FROM
      ws
 )  tmp1
 GROUP BY &quot;i_item_id&quot;
 ORDER BY &quot;total_sales&quot; ASC, &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q57.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   v1 AS (
    SELECT
      &quot;i_category&quot;
    , &quot;i_brand&quot;
    , &quot;cc_name&quot;
    , &quot;d_year&quot;
    , &quot;d_moy&quot;
    , &quot;sum&quot;(&quot;cs_sales_price&quot;) &quot;sum_sales&quot;
    , &quot;avg&quot;(&quot;sum&quot;(&quot;cs_sales_price&quot;)) OVER (PARTITION BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;cc_name&quot;, &quot;d_year&quot;) &quot;avg_monthly_sales&quot;
    , &quot;rank&quot;() OVER (PARTITION BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;cc_name&quot; ORDER BY &quot;d_year&quot; ASC, &quot;d_moy&quot; ASC) &quot;rn&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}call_center
    WHERE (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;cc_call_center_sk&quot; = &quot;cs_call_center_sk&quot;)
       AND ((&quot;d_year&quot; = 1999)
          OR ((&quot;d_year&quot; = (1999 - 1))
             AND (&quot;d_moy&quot; = 12))
          OR ((&quot;d_year&quot; = (1999 + 1))
             AND (&quot;d_moy&quot; = 1)))
    GROUP BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;cc_name&quot;, &quot;d_year&quot;, &quot;d_moy&quot;
 ) 
 , v2 AS (
    SELECT
      &quot;v1&quot;.&quot;i_category&quot;
    , &quot;v1&quot;.&quot;i_brand&quot;
    , &quot;v1&quot;.&quot;cc_name&quot;
    , &quot;v1&quot;.&quot;d_year&quot;
    , &quot;v1&quot;.&quot;d_moy&quot;
    , &quot;v1&quot;.&quot;avg_monthly_sales&quot;
    , &quot;v1&quot;.&quot;sum_sales&quot;
    , &quot;v1_lag&quot;.&quot;sum_sales&quot; &quot;psum&quot;
    , &quot;v1_lead&quot;.&quot;sum_sales&quot; &quot;nsum&quot;
    FROM
      v1
    , v1 v1_lag
    , v1 v1_lead
    WHERE (&quot;v1&quot;.&quot;i_category&quot; = &quot;v1_lag&quot;.&quot;i_category&quot;)
       AND (&quot;v1&quot;.&quot;i_category&quot; = &quot;v1_lead&quot;.&quot;i_category&quot;)
       AND (&quot;v1&quot;.&quot;i_brand&quot; = &quot;v1_lag&quot;.&quot;i_brand&quot;)
       AND (&quot;v1&quot;.&quot;i_brand&quot; = &quot;v1_lead&quot;.&quot;i_brand&quot;)
       AND (&quot;v1&quot;.&quot;cc_name&quot; = &quot;v1_lag&quot;.&quot;cc_name&quot;)
       AND (&quot;v1&quot;.&quot;cc_name&quot; = &quot;v1_lead&quot;.&quot;cc_name&quot;)
       AND (&quot;v1&quot;.&quot;rn&quot; = (&quot;v1_lag&quot;.&quot;rn&quot; + 1))
       AND (&quot;v1&quot;.&quot;rn&quot; = (&quot;v1_lead&quot;.&quot;rn&quot; - 1))
 ) 
 SELECT *
 FROM
   v2
 WHERE (&quot;d_year&quot; = 1999)
    AND (&quot;avg_monthly_sales&quot; &gt; 0)
    AND ((CASE WHEN (&quot;avg_monthly_sales&quot; &gt; 0) THEN (&quot;abs&quot;((&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;)) / &quot;avg_monthly_sales&quot;) ELSE null END) &gt; DECIMAL &apos;0.1&apos;)
 ORDER BY (&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;) ASC, 3 ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q58.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;ss_item_rev&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; = (
             SELECT &quot;d_week_seq&quot;
             FROM
               ${database}.${schema}.${prefix}date_dim
             WHERE (&quot;d_date&quot; = CAST(&apos;2000-01-03&apos; AS DATE))
          ))
    ))
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , cs_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;cs_item_rev&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; = (
             SELECT &quot;d_week_seq&quot;
             FROM
               ${database}.${schema}.${prefix}date_dim
             WHERE (&quot;d_date&quot; = CAST(&apos;2000-01-03&apos; AS DATE))
          ))
    ))
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , ws_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;ws_item_rev&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; = (
             SELECT &quot;d_week_seq&quot;
             FROM
               ${database}.${schema}.${prefix}date_dim
             WHERE (&quot;d_date&quot; = CAST(&apos;2000-01-03&apos; AS DATE))
          ))
    ))
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 SELECT
   &quot;ss_items&quot;.&quot;item_id&quot;
 , &quot;ss_item_rev&quot;
 , CAST((((&quot;ss_item_rev&quot; / ((CAST(&quot;ss_item_rev&quot; AS DECIMAL(16,7)) + &quot;cs_item_rev&quot;) + &quot;ws_item_rev&quot;)) / 3) * 100) AS DECIMAL(7,2)) &quot;ss_dev&quot;
 , &quot;cs_item_rev&quot;
 , CAST((((&quot;cs_item_rev&quot; / ((CAST(&quot;ss_item_rev&quot; AS DECIMAL(16,7)) + &quot;cs_item_rev&quot;) + &quot;ws_item_rev&quot;)) / 3) * 100) AS DECIMAL(7,2)) &quot;cs_dev&quot;
 , &quot;ws_item_rev&quot;
 , CAST((((&quot;ws_item_rev&quot; / ((CAST(&quot;ss_item_rev&quot; AS DECIMAL(16,7)) + &quot;cs_item_rev&quot;) + &quot;ws_item_rev&quot;)) / 3) * 100) AS DECIMAL(7,2)) &quot;ws_dev&quot;
 , (((&quot;ss_item_rev&quot; + &quot;cs_item_rev&quot;) + &quot;ws_item_rev&quot;) / 3) &quot;average&quot;
 FROM
   ss_items
 , cs_items
 , ws_items
 WHERE (&quot;ss_items&quot;.&quot;item_id&quot; = &quot;cs_items&quot;.&quot;item_id&quot;)
    AND (&quot;ss_items&quot;.&quot;item_id&quot; = &quot;ws_items&quot;.&quot;item_id&quot;)
    AND (&quot;ss_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;cs_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;cs_item_rev&quot;))
    AND (&quot;ss_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;ws_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;ws_item_rev&quot;))
    AND (&quot;cs_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;ss_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;ss_item_rev&quot;))
    AND (&quot;cs_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;ws_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;ws_item_rev&quot;))
    AND (&quot;ws_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;ss_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;ss_item_rev&quot;))
    AND (&quot;ws_item_rev&quot; BETWEEN (DECIMAL &apos;0.9&apos; * &quot;cs_item_rev&quot;) AND (DECIMAL &apos;1.1&apos; * &quot;cs_item_rev&quot;))
 ORDER BY &quot;ss_items&quot;.&quot;item_id&quot; ASC, &quot;ss_item_rev&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q59.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   wss AS (
    SELECT
      &quot;d_week_seq&quot;
    , &quot;ss_store_sk&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Sunday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;sun_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Monday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;mon_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Tuesday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;tue_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Wednesday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;wed_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Thursday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;thu_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Friday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;fri_sales&quot;
    , &quot;sum&quot;((CASE WHEN (&quot;d_day_name&quot; = &apos;Saturday&apos;) THEN &quot;ss_sales_price&quot; ELSE null END)) &quot;sat_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    GROUP BY &quot;d_week_seq&quot;, &quot;ss_store_sk&quot;
 ) 
 SELECT
   &quot;s_store_name1&quot;
 , &quot;s_store_id1&quot;
 , &quot;d_week_seq1&quot;
 , (&quot;sun_sales1&quot; / &quot;sun_sales2&quot;)
 , (&quot;mon_sales1&quot; / &quot;mon_sales2&quot;)
 , (&quot;tue_sales1&quot; / &quot;tue_sales2&quot;)
 , (&quot;wed_sales1&quot; / &quot;wed_sales2&quot;)
 , (&quot;thu_sales1&quot; / &quot;thu_sales2&quot;)
 , (&quot;fri_sales1&quot; / &quot;fri_sales2&quot;)
 , (&quot;sat_sales1&quot; / &quot;sat_sales2&quot;)
 FROM
   (
    SELECT
      &quot;s_store_name&quot; &quot;s_store_name1&quot;
    , &quot;wss&quot;.&quot;d_week_seq&quot; &quot;d_week_seq1&quot;
    , &quot;s_store_id&quot; &quot;s_store_id1&quot;
    , &quot;sun_sales&quot; &quot;sun_sales1&quot;
    , &quot;mon_sales&quot; &quot;mon_sales1&quot;
    , &quot;tue_sales&quot; &quot;tue_sales1&quot;
    , &quot;wed_sales&quot; &quot;wed_sales1&quot;
    , &quot;thu_sales&quot; &quot;thu_sales1&quot;
    , &quot;fri_sales&quot; &quot;fri_sales1&quot;
    , &quot;sat_sales&quot; &quot;sat_sales1&quot;
    FROM
      wss
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}date_dim d
    WHERE (&quot;d&quot;.&quot;d_week_seq&quot; = &quot;wss&quot;.&quot;d_week_seq&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1212 AND (1212 + 11))
 )  y
 , (
    SELECT
      &quot;s_store_name&quot; &quot;s_store_name2&quot;
    , &quot;wss&quot;.&quot;d_week_seq&quot; &quot;d_week_seq2&quot;
    , &quot;s_store_id&quot; &quot;s_store_id2&quot;
    , &quot;sun_sales&quot; &quot;sun_sales2&quot;
    , &quot;mon_sales&quot; &quot;mon_sales2&quot;
    , &quot;tue_sales&quot; &quot;tue_sales2&quot;
    , &quot;wed_sales&quot; &quot;wed_sales2&quot;
    , &quot;thu_sales&quot; &quot;thu_sales2&quot;
    , &quot;fri_sales&quot; &quot;fri_sales2&quot;
    , &quot;sat_sales&quot; &quot;sat_sales2&quot;
    FROM
      wss
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}date_dim d
    WHERE (&quot;d&quot;.&quot;d_week_seq&quot; = &quot;wss&quot;.&quot;d_week_seq&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN (1212 + 12) AND (1212 + 23))
 )  x
 WHERE (&quot;s_store_id1&quot; = &quot;s_store_id2&quot;)
    AND (&quot;d_week_seq1&quot; = (&quot;d_week_seq2&quot; - 52))
 ORDER BY &quot;s_store_name1&quot; ASC, &quot;s_store_id1&quot; ASC, &quot;d_week_seq1&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q60.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Music&apos;))
    ))
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 9)
       AND (&quot;ss_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , cs AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Music&apos;))
    ))
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 9)
       AND (&quot;cs_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , ws AS (
    SELECT
      &quot;i_item_id&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;total_sales&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;i_item_id&quot; IN (
       SELECT &quot;i_item_id&quot;
       FROM
         ${database}.${schema}.${prefix}item
       WHERE (&quot;i_category&quot; IN (&apos;Music&apos;))
    ))
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 9)
       AND (&quot;ws_bill_addr_sk&quot; = &quot;ca_address_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
    GROUP BY &quot;i_item_id&quot;
 ) 
 SELECT
   &quot;i_item_id&quot;
 , &quot;sum&quot;(&quot;total_sales&quot;) &quot;total_sales&quot;
 FROM
   (
    SELECT *
    FROM
      ss
 UNION ALL    SELECT *
    FROM
      cs
 UNION ALL    SELECT *
    FROM
      ws
 )  tmp1
 GROUP BY &quot;i_item_id&quot;
 ORDER BY &quot;i_item_id&quot; ASC, &quot;total_sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q61.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;promotions&quot;
 , &quot;total&quot;
 , ((CAST(&quot;promotions&quot; AS DECIMAL(15,4)) / CAST(&quot;total&quot; AS DECIMAL(15,4))) * 100)
 FROM
   (
    SELECT &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;promotions&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}promotion
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;ss_promo_sk&quot; = &quot;p_promo_sk&quot;)
       AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
       AND (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
       AND (&quot;i_category&quot; = &apos;Jewelry&apos;)
       AND ((&quot;p_channel_dmail&quot; = &apos;Y&apos;)
          OR (&quot;p_channel_email&quot; = &apos;Y&apos;)
          OR (&quot;p_channel_tv&quot; = &apos;Y&apos;))
       AND (&quot;s_gmt_offset&quot; = -5)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 11)
 )  promotional_sales
 , (
    SELECT &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;total&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}customer_address
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
       AND (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ca_gmt_offset&quot; = -5)
       AND (&quot;i_category&quot; = &apos;Jewelry&apos;)
       AND (&quot;s_gmt_offset&quot; = -5)
       AND (&quot;d_year&quot; = 1998)
       AND (&quot;d_moy&quot; = 11)
 )  all_sales
 ORDER BY &quot;promotions&quot; ASC, &quot;total&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q62.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20)
 , &quot;sm_type&quot;
 , &quot;web_name&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &lt;= 30) THEN 1 ELSE 0 END)) &quot;30 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &gt; 30)
    AND ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &lt;= 60) THEN 1 ELSE 0 END)) &quot;31-60 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &gt; 60)
    AND ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &lt;= 90) THEN 1 ELSE 0 END)) &quot;61-90 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &gt; 90)
    AND ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &lt;= 120) THEN 1 ELSE 0 END)) &quot;91-120 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;ws_ship_date_sk&quot; - &quot;ws_sold_date_sk&quot;) &gt; 120) THEN 1 ELSE 0 END)) &quot;&gt;120 days&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}warehouse
 , ${database}.${schema}.${prefix}ship_mode
 , ${database}.${schema}.${prefix}web_site
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    AND (&quot;ws_ship_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;ws_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
    AND (&quot;ws_ship_mode_sk&quot; = &quot;sm_ship_mode_sk&quot;)
    AND (&quot;ws_web_site_sk&quot; = &quot;web_site_sk&quot;)
 GROUP BY &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20), &quot;sm_type&quot;, &quot;web_name&quot;
 ORDER BY &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20) ASC, &quot;sm_type&quot; ASC, &quot;web_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q63.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;i_manager_id&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;sum_sales&quot;
    , &quot;avg&quot;(&quot;sum&quot;(&quot;ss_sales_price&quot;)) OVER (PARTITION BY &quot;i_manager_id&quot;) &quot;avg_monthly_sales&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;d_month_seq&quot; IN (1200   , (1200 + 1)   , (1200 + 2)   , (1200 + 3)   , (1200 + 4)   , (1200 + 5)   , (1200 + 6)   , (1200 + 7)   , (1200 + 8)   , (1200 + 9)   , (1200 + 10)   , (1200 + 11)))
       AND (((&quot;i_category&quot; IN (&apos;Books&apos;         , &apos;Children&apos;         , &apos;Electronics&apos;))
             AND (&quot;i_class&quot; IN (&apos;personal&apos;         , &apos;portable&apos;         , &apos;refernece&apos;         , &apos;self-help&apos;))
             AND (&quot;i_brand&quot; IN (&apos;scholaramalgamalg #14&apos;         , &apos;scholaramalgamalg #7&apos;         , &apos;exportiunivamalg #9&apos;         , &apos;scholaramalgamalg #9&apos;)))
          OR ((&quot;i_category&quot; IN (&apos;Women&apos;         , &apos;Music&apos;         , &apos;Men&apos;))
             AND (&quot;i_class&quot; IN (&apos;accessories&apos;         , &apos;classical&apos;         , &apos;fragrances&apos;         , &apos;pants&apos;))
             AND (&quot;i_brand&quot; IN (&apos;amalgimporto #1&apos;         , &apos;edu packscholar #1&apos;         , &apos;exportiimporto #1&apos;         , &apos;importoamalg #1&apos;))))
    GROUP BY &quot;i_manager_id&quot;, &quot;d_moy&quot;
 )  tmp1
 WHERE ((CASE WHEN (&quot;avg_monthly_sales&quot; &gt; 0) THEN (&quot;abs&quot;((&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;)) / &quot;avg_monthly_sales&quot;) ELSE null END) &gt; DECIMAL &apos;0.1&apos;)
 ORDER BY &quot;i_manager_id&quot; ASC, &quot;avg_monthly_sales&quot; ASC, &quot;sum_sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q64.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   cs_ui AS (
    SELECT
      &quot;cs_item_sk&quot;
    , &quot;sum&quot;(&quot;cs_ext_list_price&quot;) &quot;sale&quot;
    , &quot;sum&quot;(((&quot;cr_refunded_cash&quot; + &quot;cr_reversed_charge&quot;) + &quot;cr_store_credit&quot;)) &quot;refund&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}catalog_returns
    WHERE (&quot;cs_item_sk&quot; = &quot;cr_item_sk&quot;)
       AND (&quot;cs_order_number&quot; = &quot;cr_order_number&quot;)
    GROUP BY &quot;cs_item_sk&quot;
    HAVING (&quot;sum&quot;(&quot;cs_ext_list_price&quot;) &gt; (2 * &quot;sum&quot;(((&quot;cr_refunded_cash&quot; + &quot;cr_reversed_charge&quot;) + &quot;cr_store_credit&quot;))))
 ) 
 , cross_sales AS (
    SELECT
      &quot;i_product_name&quot; &quot;product_name&quot;
    , &quot;i_item_sk&quot; &quot;item_sk&quot;
    , &quot;s_store_name&quot; &quot;store_name&quot;
    , &quot;s_zip&quot; &quot;store_zip&quot;
    , &quot;ad1&quot;.&quot;ca_street_number&quot; &quot;b_street_number&quot;
    , &quot;ad1&quot;.&quot;ca_street_name&quot; &quot;b_street_name&quot;
    , &quot;ad1&quot;.&quot;ca_city&quot; &quot;b_city&quot;
    , &quot;ad1&quot;.&quot;ca_zip&quot; &quot;b_zip&quot;
    , &quot;ad2&quot;.&quot;ca_street_number&quot; &quot;c_street_number&quot;
    , &quot;ad2&quot;.&quot;ca_street_name&quot; &quot;c_street_name&quot;
    , &quot;ad2&quot;.&quot;ca_city&quot; &quot;c_city&quot;
    , &quot;ad2&quot;.&quot;ca_zip&quot; &quot;c_zip&quot;
    , &quot;d1&quot;.&quot;d_year&quot; &quot;syear&quot;
    , &quot;d2&quot;.&quot;d_year&quot; &quot;fsyear&quot;
    , &quot;d3&quot;.&quot;d_year&quot; &quot;s2year&quot;
    , &quot;count&quot;(*) &quot;cnt&quot;
    , &quot;sum&quot;(&quot;ss_wholesale_cost&quot;) &quot;s1&quot;
    , &quot;sum&quot;(&quot;ss_list_price&quot;) &quot;s2&quot;
    , &quot;sum&quot;(&quot;ss_coupon_amt&quot;) &quot;s3&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}store_returns
    , cs_ui
    , ${database}.${schema}.${prefix}date_dim d1
    , ${database}.${schema}.${prefix}date_dim d2
    , ${database}.${schema}.${prefix}date_dim d3
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}customer_demographics cd1
    , ${database}.${schema}.${prefix}customer_demographics cd2
    , ${database}.${schema}.${prefix}promotion
    , ${database}.${schema}.${prefix}household_demographics hd1
    , ${database}.${schema}.${prefix}household_demographics hd2
    , ${database}.${schema}.${prefix}customer_address ad1
    , ${database}.${schema}.${prefix}customer_address ad2
    , ${database}.${schema}.${prefix}income_band ib1
    , ${database}.${schema}.${prefix}income_band ib2
    , ${database}.${schema}.${prefix}item
    WHERE (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d1&quot;.&quot;d_date_sk&quot;)
       AND (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
       AND (&quot;ss_cdemo_sk&quot; = &quot;cd1&quot;.&quot;cd_demo_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;hd1&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_addr_sk&quot; = &quot;ad1&quot;.&quot;ca_address_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
       AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;cs_ui&quot;.&quot;cs_item_sk&quot;)
       AND (&quot;c_current_cdemo_sk&quot; = &quot;cd2&quot;.&quot;cd_demo_sk&quot;)
       AND (&quot;c_current_hdemo_sk&quot; = &quot;hd2&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;c_current_addr_sk&quot; = &quot;ad2&quot;.&quot;ca_address_sk&quot;)
       AND (&quot;c_first_sales_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;)
       AND (&quot;c_first_shipto_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;)
       AND (&quot;ss_promo_sk&quot; = &quot;p_promo_sk&quot;)
       AND (&quot;hd1&quot;.&quot;hd_income_band_sk&quot; = &quot;ib1&quot;.&quot;ib_income_band_sk&quot;)
       AND (&quot;hd2&quot;.&quot;hd_income_band_sk&quot; = &quot;ib2&quot;.&quot;ib_income_band_sk&quot;)
       AND (&quot;cd1&quot;.&quot;cd_marital_status&quot; &lt;&gt; &quot;cd2&quot;.&quot;cd_marital_status&quot;)
       AND (&quot;i_color&quot; IN (&apos;purple&apos;   , &apos;burlywood&apos;   , &apos;indian&apos;   , &apos;spring&apos;   , &apos;floral&apos;   , &apos;medium&apos;))
       AND (&quot;i_current_price&quot; BETWEEN 64 AND (64 + 10))
       AND (&quot;i_current_price&quot; BETWEEN (64 + 1) AND (64 + 15))
    GROUP BY &quot;i_product_name&quot;, &quot;i_item_sk&quot;, &quot;s_store_name&quot;, &quot;s_zip&quot;, &quot;ad1&quot;.&quot;ca_street_number&quot;, &quot;ad1&quot;.&quot;ca_street_name&quot;, &quot;ad1&quot;.&quot;ca_city&quot;, &quot;ad1&quot;.&quot;ca_zip&quot;, &quot;ad2&quot;.&quot;ca_street_number&quot;, &quot;ad2&quot;.&quot;ca_street_name&quot;, &quot;ad2&quot;.&quot;ca_city&quot;, &quot;ad2&quot;.&quot;ca_zip&quot;, &quot;d1&quot;.&quot;d_year&quot;, &quot;d2&quot;.&quot;d_year&quot;, &quot;d3&quot;.&quot;d_year&quot;
 ) 
 SELECT
   &quot;cs1&quot;.&quot;product_name&quot;
 , &quot;cs1&quot;.&quot;store_name&quot;
 , &quot;cs1&quot;.&quot;store_zip&quot;
 , &quot;cs1&quot;.&quot;b_street_number&quot;
 , &quot;cs1&quot;.&quot;b_street_name&quot;
 , &quot;cs1&quot;.&quot;b_city&quot;
 , &quot;cs1&quot;.&quot;b_zip&quot;
 , &quot;cs1&quot;.&quot;c_street_number&quot;
 , &quot;cs1&quot;.&quot;c_street_name&quot;
 , &quot;cs1&quot;.&quot;c_city&quot;
 , &quot;cs1&quot;.&quot;c_zip&quot;
 , &quot;cs1&quot;.&quot;syear&quot;
 , &quot;cs1&quot;.&quot;cnt&quot;
 , &quot;cs1&quot;.&quot;s1&quot; &quot;s11&quot;
 , &quot;cs1&quot;.&quot;s2&quot; &quot;s21&quot;
 , &quot;cs1&quot;.&quot;s3&quot; &quot;s31&quot;
 , &quot;cs2&quot;.&quot;s1&quot; &quot;s12&quot;
 , &quot;cs2&quot;.&quot;s2&quot; &quot;s22&quot;
 , &quot;cs2&quot;.&quot;s3&quot; &quot;s32&quot;
 , &quot;cs2&quot;.&quot;syear&quot;
 , &quot;cs2&quot;.&quot;cnt&quot;
 FROM
   cross_sales cs1
 , cross_sales cs2
 WHERE (&quot;cs1&quot;.&quot;item_sk&quot; = &quot;cs2&quot;.&quot;item_sk&quot;)
    AND (&quot;cs1&quot;.&quot;syear&quot; = 1999)
    AND (&quot;cs2&quot;.&quot;syear&quot; = (1999 + 1))
    AND (&quot;cs2&quot;.&quot;cnt&quot; &lt;= &quot;cs1&quot;.&quot;cnt&quot;)
    AND (&quot;cs1&quot;.&quot;store_name&quot; = &quot;cs2&quot;.&quot;store_name&quot;)
    AND (&quot;cs1&quot;.&quot;store_zip&quot; = &quot;cs2&quot;.&quot;store_zip&quot;)
 ORDER BY &quot;cs1&quot;.&quot;product_name&quot; ASC, &quot;cs1&quot;.&quot;store_name&quot; ASC, &quot;cs2&quot;.&quot;cnt&quot; ASC, 14, 15, 16, 17, 18

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q65.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;s_store_name&quot;
 , &quot;i_item_desc&quot;
 , &quot;sc&quot;.&quot;revenue&quot;
 , &quot;i_current_price&quot;
 , &quot;i_wholesale_cost&quot;
 , &quot;i_brand&quot;
 FROM
   ${database}.${schema}.${prefix}store
 , ${database}.${schema}.${prefix}item
 , (
    SELECT
      &quot;ss_store_sk&quot;
    , &quot;avg&quot;(&quot;revenue&quot;) &quot;ave&quot;
    FROM
      (
       SELECT
         &quot;ss_store_sk&quot;
       , &quot;ss_item_sk&quot;
       , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;revenue&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;d_month_seq&quot; BETWEEN 1176 AND (1176 + 11))
       GROUP BY &quot;ss_store_sk&quot;, &quot;ss_item_sk&quot;
    )  sa
    GROUP BY &quot;ss_store_sk&quot;
 )  sb
 , (
    SELECT
      &quot;ss_store_sk&quot;
    , &quot;ss_item_sk&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;revenue&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1176 AND (1176 + 11))
    GROUP BY &quot;ss_store_sk&quot;, &quot;ss_item_sk&quot;
 )  sc
 WHERE (&quot;sb&quot;.&quot;ss_store_sk&quot; = &quot;sc&quot;.&quot;ss_store_sk&quot;)
    AND (&quot;sc&quot;.&quot;revenue&quot; &lt;= (DECIMAL &apos;0.1&apos; * &quot;sb&quot;.&quot;ave&quot;))
    AND (&quot;s_store_sk&quot; = &quot;sc&quot;.&quot;ss_store_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;sc&quot;.&quot;ss_item_sk&quot;)
 ORDER BY &quot;s_store_name&quot; ASC, &quot;i_item_desc&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q66.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;w_warehouse_name&quot;
 , &quot;w_warehouse_sq_ft&quot;
 , &quot;w_city&quot;
 , &quot;w_county&quot;
 , &quot;w_state&quot;
 , &quot;w_country&quot;
 , &quot;ship_carriers&quot;
 , &quot;year&quot;
 , &quot;sum&quot;(&quot;jan_sales&quot;) &quot;jan_sales&quot;
 , &quot;sum&quot;(&quot;feb_sales&quot;) &quot;feb_sales&quot;
 , &quot;sum&quot;(&quot;mar_sales&quot;) &quot;mar_sales&quot;
 , &quot;sum&quot;(&quot;apr_sales&quot;) &quot;apr_sales&quot;
 , &quot;sum&quot;(&quot;may_sales&quot;) &quot;may_sales&quot;
 , &quot;sum&quot;(&quot;jun_sales&quot;) &quot;jun_sales&quot;
 , &quot;sum&quot;(&quot;jul_sales&quot;) &quot;jul_sales&quot;
 , &quot;sum&quot;(&quot;aug_sales&quot;) &quot;aug_sales&quot;
 , &quot;sum&quot;(&quot;sep_sales&quot;) &quot;sep_sales&quot;
 , &quot;sum&quot;(&quot;oct_sales&quot;) &quot;oct_sales&quot;
 , &quot;sum&quot;(&quot;nov_sales&quot;) &quot;nov_sales&quot;
 , &quot;sum&quot;(&quot;dec_sales&quot;) &quot;dec_sales&quot;
 , &quot;sum&quot;((&quot;jan_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;jan_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;feb_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;feb_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;mar_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;mar_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;apr_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;apr_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;may_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;may_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;jun_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;jun_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;jul_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;jul_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;aug_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;aug_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;sep_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;sep_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;oct_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;oct_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;nov_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;nov_sales_per_sq_foot&quot;
 , &quot;sum&quot;((&quot;dec_sales&quot; / &quot;w_warehouse_sq_ft&quot;)) &quot;dec_sales_per_sq_foot&quot;
 , &quot;sum&quot;(&quot;jan_net&quot;) &quot;jan_net&quot;
 , &quot;sum&quot;(&quot;feb_net&quot;) &quot;feb_net&quot;
 , &quot;sum&quot;(&quot;mar_net&quot;) &quot;mar_net&quot;
 , &quot;sum&quot;(&quot;apr_net&quot;) &quot;apr_net&quot;
 , &quot;sum&quot;(&quot;may_net&quot;) &quot;may_net&quot;
 , &quot;sum&quot;(&quot;jun_net&quot;) &quot;jun_net&quot;
 , &quot;sum&quot;(&quot;jul_net&quot;) &quot;jul_net&quot;
 , &quot;sum&quot;(&quot;aug_net&quot;) &quot;aug_net&quot;
 , &quot;sum&quot;(&quot;sep_net&quot;) &quot;sep_net&quot;
 , &quot;sum&quot;(&quot;oct_net&quot;) &quot;oct_net&quot;
 , &quot;sum&quot;(&quot;nov_net&quot;) &quot;nov_net&quot;
 , &quot;sum&quot;(&quot;dec_net&quot;) &quot;dec_net&quot;
 FROM
 (
       SELECT
         &quot;w_warehouse_name&quot;
       , &quot;w_warehouse_sq_ft&quot;
       , &quot;w_city&quot;
       , &quot;w_county&quot;
       , &quot;w_state&quot;
       , &quot;w_country&quot;
       , &quot;concat&quot;(&quot;concat&quot;(&apos;DHL&apos;, &apos;,&apos;), &apos;BARIAN&apos;) &quot;ship_carriers&quot;
       , &quot;d_year&quot; &quot;YEAR&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 1) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jan_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 2) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;feb_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 3) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;mar_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 4) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;apr_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 5) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;may_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 6) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jun_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 7) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jul_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 8) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;aug_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 9) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;sep_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 10) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;oct_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 11) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;nov_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 12) THEN (&quot;ws_ext_sales_price&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;dec_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 1) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jan_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 2) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;feb_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 3) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;mar_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 4) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;apr_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 5) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;may_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 6) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jun_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 7) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;jul_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 8) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;aug_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 9) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;sep_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 10) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;oct_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 11) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;nov_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 12) THEN (&quot;ws_net_paid&quot; * &quot;ws_quantity&quot;) ELSE 0 END)) &quot;dec_net&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}warehouse
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}time_dim
       , ${database}.${schema}.${prefix}ship_mode
       WHERE (&quot;ws_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
          AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;ws_sold_time_sk&quot; = &quot;t_time_sk&quot;)
          AND (&quot;ws_ship_mode_sk&quot; = &quot;sm_ship_mode_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
          AND (&quot;t_time&quot; BETWEEN 30838 AND (30838 + 28800))
          AND (&quot;sm_carrier&quot; IN (&apos;DHL&apos;      , &apos;BARIAN&apos;))
       GROUP BY &quot;w_warehouse_name&quot;, &quot;w_warehouse_sq_ft&quot;, &quot;w_city&quot;, &quot;w_county&quot;, &quot;w_state&quot;, &quot;w_country&quot;, &quot;d_year&quot;
    UNION ALL
       SELECT
         &quot;w_warehouse_name&quot;
       , &quot;w_warehouse_sq_ft&quot;
       , &quot;w_city&quot;
       , &quot;w_county&quot;
       , &quot;w_state&quot;
       , &quot;w_country&quot;
       , &quot;concat&quot;(&quot;concat&quot;(&apos;DHL&apos;, &apos;,&apos;), &apos;BARIAN&apos;) &quot;ship_carriers&quot;
       , &quot;d_year&quot; &quot;YEAR&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 1) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jan_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 2) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;feb_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 3) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;mar_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 4) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;apr_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 5) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;may_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 6) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jun_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 7) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jul_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 8) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;aug_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 9) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;sep_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 10) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;oct_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 11) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;nov_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 12) THEN (&quot;cs_sales_price&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;dec_sales&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 1) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jan_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 2) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;feb_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 3) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;mar_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 4) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;apr_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 5) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;may_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 6) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jun_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 7) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;jul_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 8) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;aug_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 9) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;sep_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 10) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;oct_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 11) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;nov_net&quot;
       , &quot;sum&quot;((CASE WHEN (&quot;d_moy&quot; = 12) THEN (&quot;cs_net_paid_inc_tax&quot; * &quot;cs_quantity&quot;) ELSE 0 END)) &quot;dec_net&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}warehouse
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}time_dim
       , ${database}.${schema}.${prefix}ship_mode
       WHERE (&quot;cs_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
          AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;cs_sold_time_sk&quot; = &quot;t_time_sk&quot;)
          AND (&quot;cs_ship_mode_sk&quot; = &quot;sm_ship_mode_sk&quot;)
          AND (&quot;d_year&quot; = 2001)
          AND (&quot;t_time&quot; BETWEEN 30838 AND (30838 + 28800))
          AND (&quot;sm_carrier&quot; IN (&apos;DHL&apos;      , &apos;BARIAN&apos;))
       GROUP BY &quot;w_warehouse_name&quot;, &quot;w_warehouse_sq_ft&quot;, &quot;w_city&quot;, &quot;w_county&quot;, &quot;w_state&quot;, &quot;w_country&quot;, &quot;d_year&quot;
    )  x
 GROUP BY &quot;w_warehouse_name&quot;, &quot;w_warehouse_sq_ft&quot;, &quot;w_city&quot;, &quot;w_county&quot;, &quot;w_state&quot;, &quot;w_country&quot;, &quot;ship_carriers&quot;, &quot;year&quot;
 ORDER BY &quot;w_warehouse_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q67.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;i_category&quot;
    , &quot;i_class&quot;
    , &quot;i_brand&quot;
    , &quot;i_product_name&quot;
    , &quot;d_year&quot;
    , &quot;d_qoy&quot;
    , &quot;d_moy&quot;
    , &quot;s_store_id&quot;
    , &quot;sumsales&quot;
    , &quot;rank&quot;() OVER (PARTITION BY &quot;i_category&quot; ORDER BY &quot;sumsales&quot; DESC) &quot;rk&quot;
    FROM
      (
       SELECT
         &quot;i_category&quot;
       , &quot;i_class&quot;
       , &quot;i_brand&quot;
       , &quot;i_product_name&quot;
       , &quot;d_year&quot;
       , &quot;d_qoy&quot;
       , &quot;d_moy&quot;
       , &quot;s_store_id&quot;
       , &quot;sum&quot;(COALESCE((&quot;ss_sales_price&quot; * &quot;ss_quantity&quot;), 0)) &quot;sumsales&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}store
       , ${database}.${schema}.${prefix}item
       WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
          AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
          AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
          AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
       GROUP BY ROLLUP (i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id)
    )  dw1
 )  dw2
 WHERE (&quot;rk&quot; &lt;= 100)
 ORDER BY &quot;i_category&quot; ASC, &quot;i_class&quot; ASC, &quot;i_brand&quot; ASC, &quot;i_product_name&quot; ASC, &quot;d_year&quot; ASC, &quot;d_qoy&quot; ASC, &quot;d_moy&quot; ASC, &quot;s_store_id&quot; ASC, &quot;sumsales&quot; ASC, &quot;rk&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q68.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;ca_city&quot;
 , &quot;bought_city&quot;
 , &quot;ss_ticket_number&quot;
 , &quot;extended_price&quot;
 , &quot;extended_tax&quot;
 , &quot;list_price&quot;
 FROM
   (
    SELECT
      &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;ca_city&quot; &quot;bought_city&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;extended_price&quot;
    , &quot;sum&quot;(&quot;ss_ext_list_price&quot;) &quot;list_price&quot;
    , &quot;sum&quot;(&quot;ss_ext_tax&quot;) &quot;extended_tax&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_store_sk&quot; = &quot;${prefix}store&quot;.&quot;s_store_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_addr_sk&quot; = &quot;${prefix}customer_address&quot;.&quot;ca_address_sk&quot;)
       AND (&quot;${prefix}date_dim&quot;.&quot;d_dom&quot; BETWEEN 1 AND 2)
       AND ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
          OR (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; = 3))
       AND (&quot;${prefix}date_dim&quot;.&quot;d_year&quot; IN (1999   , (1999 + 1)   , (1999 + 2)))
       AND (&quot;${prefix}store&quot;.&quot;s_city&quot; IN (&apos;Midway&apos;   , &apos;Fairview&apos;))
    GROUP BY &quot;ss_ticket_number&quot;, &quot;ss_customer_sk&quot;, &quot;ss_addr_sk&quot;, &quot;ca_city&quot;
 )  dn
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address current_addr
 WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;${prefix}customer&quot;.&quot;c_current_addr_sk&quot; = &quot;current_addr&quot;.&quot;ca_address_sk&quot;)
    AND (&quot;current_addr&quot;.&quot;ca_city&quot; &lt;&gt; &quot;bought_city&quot;)
 ORDER BY &quot;c_last_name&quot; ASC, &quot;ss_ticket_number&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q69.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;cd_gender&quot;
 , &quot;cd_marital_status&quot;
 , &quot;cd_education_status&quot;
 , &quot;count&quot;(*) &quot;cnt1&quot;
 , &quot;cd_purchase_estimate&quot;
 , &quot;count&quot;(*) &quot;cnt2&quot;
 , &quot;cd_credit_rating&quot;
 , &quot;count&quot;(*) &quot;cnt3&quot;
 FROM
   ${database}.${schema}.${prefix}customer c
 , ${database}.${schema}.${prefix}customer_address ca
 , ${database}.${schema}.${prefix}customer_demographics
 WHERE (&quot;c&quot;.&quot;c_current_addr_sk&quot; = &quot;ca&quot;.&quot;ca_address_sk&quot;)
    AND (&quot;ca_state&quot; IN (&apos;KY&apos;, &apos;GA&apos;, &apos;NM&apos;))
    AND (&quot;cd_demo_sk&quot; = &quot;c&quot;.&quot;c_current_cdemo_sk&quot;)
    AND (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; BETWEEN 4 AND (4 + 2))
 ))
    AND (NOT (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; BETWEEN 4 AND (4 + 2))
 )))
    AND (NOT (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c&quot;.&quot;c_customer_sk&quot; = &quot;cs_ship_customer_sk&quot;)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2001)
       AND (&quot;d_moy&quot; BETWEEN 4 AND (4 + 2))
 )))
 GROUP BY &quot;cd_gender&quot;, &quot;cd_marital_status&quot;, &quot;cd_education_status&quot;, &quot;cd_purchase_estimate&quot;, &quot;cd_credit_rating&quot;
 ORDER BY &quot;cd_gender&quot; ASC, &quot;cd_marital_status&quot; ASC, &quot;cd_education_status&quot; ASC, &quot;cd_purchase_estimate&quot; ASC, &quot;cd_credit_rating&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q70.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;sum&quot;(&quot;ss_net_profit&quot;) &quot;total_sum&quot;
 , &quot;s_state&quot;
 , &quot;s_county&quot;
 , (GROUPING (&quot;s_state&quot;) + GROUPING (&quot;s_county&quot;)) &quot;lochierarchy&quot;
 , &quot;rank&quot;() OVER (PARTITION BY (GROUPING (&quot;s_state&quot;) + GROUPING (&quot;s_county&quot;)), (CASE WHEN (GROUPING (&quot;s_county&quot;) = 0) THEN &quot;s_state&quot; END) ORDER BY &quot;sum&quot;(&quot;ss_net_profit&quot;) DESC) &quot;rank_within_parent&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}store
 WHERE (&quot;d1&quot;.&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
    AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
    AND (&quot;s_state&quot; IN (
    SELECT &quot;s_state&quot;
    FROM
      (
       SELECT
         &quot;s_state&quot; &quot;s_state&quot;
       , &quot;rank&quot;() OVER (PARTITION BY &quot;s_state&quot; ORDER BY &quot;sum&quot;(&quot;ss_net_profit&quot;) DESC) &quot;ranking&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}store
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
          AND (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
          AND (&quot;s_store_sk&quot; = &quot;ss_store_sk&quot;)
       GROUP BY &quot;s_state&quot;
    )  tmp1
    WHERE (&quot;ranking&quot; &lt;= 5)
 ))
 GROUP BY ROLLUP (s_state, s_county)
 ORDER BY &quot;lochierarchy&quot; DESC, (CASE WHEN (&quot;lochierarchy&quot; = 0) THEN &quot;s_state&quot; END) ASC, &quot;rank_within_parent&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q71.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_brand_id&quot; &quot;brand_id&quot;
 , &quot;i_brand&quot; &quot;brand&quot;
 , &quot;t_hour&quot;
 , &quot;t_minute&quot;
 , &quot;sum&quot;(&quot;ext_price&quot;) &quot;ext_price&quot;
 FROM
   ${database}.${schema}.${prefix}item
 , (
    SELECT
      &quot;ws_ext_sales_price&quot; &quot;ext_price&quot;
    , &quot;ws_sold_date_sk&quot; &quot;sold_date_sk&quot;
    , &quot;ws_item_sk&quot; &quot;sold_item_sk&quot;
    , &quot;ws_sold_time_sk&quot; &quot;time_sk&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_date_sk&quot; = &quot;ws_sold_date_sk&quot;)
       AND (&quot;d_moy&quot; = 11)
       AND (&quot;d_year&quot; = 1999)
 UNION ALL    SELECT
      &quot;cs_ext_sales_price&quot; &quot;ext_price&quot;
    , &quot;cs_sold_date_sk&quot; &quot;sold_date_sk&quot;
    , &quot;cs_item_sk&quot; &quot;sold_item_sk&quot;
    , &quot;cs_sold_time_sk&quot; &quot;time_sk&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_date_sk&quot; = &quot;cs_sold_date_sk&quot;)
       AND (&quot;d_moy&quot; = 11)
       AND (&quot;d_year&quot; = 1999)
 UNION ALL    SELECT
      &quot;ss_ext_sales_price&quot; &quot;ext_price&quot;
    , &quot;ss_sold_date_sk&quot; &quot;sold_date_sk&quot;
    , &quot;ss_item_sk&quot; &quot;sold_item_sk&quot;
    , &quot;ss_sold_time_sk&quot; &quot;time_sk&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;)
       AND (&quot;d_moy&quot; = 11)
       AND (&quot;d_year&quot; = 1999)
 )  tmp
 , ${database}.${schema}.${prefix}time_dim
 WHERE (&quot;sold_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_manager_id&quot; = 1)
    AND (&quot;time_sk&quot; = &quot;t_time_sk&quot;)
    AND ((&quot;t_meal_time&quot; = &apos;breakfast&apos;)
       OR (&quot;t_meal_time&quot; = &apos;dinner&apos;))
 GROUP BY &quot;i_brand&quot;, &quot;i_brand_id&quot;, &quot;t_hour&quot;, &quot;t_minute&quot;
 ORDER BY &quot;ext_price&quot; DESC, &quot;i_brand_id&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q72.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_desc&quot;
 , &quot;w_warehouse_name&quot;
 , &quot;d1&quot;.&quot;d_week_seq&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;p_promo_sk&quot; IS NULL) THEN 1 ELSE 0 END)) &quot;no_promo&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;p_promo_sk&quot; IS NOT NULL) THEN 1 ELSE 0 END)) &quot;promo&quot;
 , &quot;count&quot;(*) &quot;total_cnt&quot;
 FROM
   ((((((((((${database}.${schema}.${prefix}catalog_sales
 INNER JOIN ${database}.${schema}.${prefix}inventory ON (&quot;cs_item_sk&quot; = &quot;inv_item_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}warehouse ON (&quot;w_warehouse_sk&quot; = &quot;inv_warehouse_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}item ON (&quot;i_item_sk&quot; = &quot;cs_item_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}customer_demographics ON (&quot;cs_bill_cdemo_sk&quot; = &quot;cd_demo_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}household_demographics ON (&quot;cs_bill_hdemo_sk&quot; = &quot;hd_demo_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}date_dim d1 ON (&quot;cs_sold_date_sk&quot; = &quot;d1&quot;.&quot;d_date_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}date_dim d2 ON (&quot;inv_date_sk&quot; = &quot;d2&quot;.&quot;d_date_sk&quot;))
 INNER JOIN ${database}.${schema}.${prefix}date_dim d3 ON (&quot;cs_ship_date_sk&quot; = &quot;d3&quot;.&quot;d_date_sk&quot;))
 LEFT JOIN ${database}.${schema}.${prefix}promotion ON (&quot;cs_promo_sk&quot; = &quot;p_promo_sk&quot;))
 LEFT JOIN ${database}.${schema}.${prefix}catalog_returns ON (&quot;cr_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cr_order_number&quot; = &quot;cs_order_number&quot;))
 WHERE (&quot;d1&quot;.&quot;d_week_seq&quot; = &quot;d2&quot;.&quot;d_week_seq&quot;)
    AND (&quot;inv_quantity_on_hand&quot; &lt; &quot;cs_quantity&quot;)
    AND (&quot;d3&quot;.&quot;d_date&quot; &gt; (&quot;d1&quot;.&quot;d_date&quot; + INTERVAL  &apos;5&apos; DAY))
    AND (&quot;hd_buy_potential&quot; = &apos;&gt;10000&apos;)
    AND (&quot;d1&quot;.&quot;d_year&quot; = 1999)
    AND (&quot;cd_marital_status&quot; = &apos;D&apos;)
 GROUP BY &quot;i_item_desc&quot;, &quot;w_warehouse_name&quot;, &quot;d1&quot;.&quot;d_week_seq&quot;
 ORDER BY &quot;total_cnt&quot; DESC, &quot;i_item_desc&quot; ASC, &quot;w_warehouse_name&quot; ASC, &quot;d1&quot;.&quot;d_week_seq&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q73.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;c_salutation&quot;
 , &quot;c_preferred_cust_flag&quot;
 , &quot;ss_ticket_number&quot;
 , &quot;cnt&quot;
 FROM
   (
    SELECT
      &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;count&quot;(*) &quot;cnt&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}household_demographics
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_store_sk&quot; = &quot;${prefix}store&quot;.&quot;s_store_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;${prefix}date_dim&quot;.&quot;d_dom&quot; BETWEEN 1 AND 2)
       AND ((&quot;${prefix}household_demographics&quot;.&quot;hd_buy_potential&quot; = &apos;&gt;10000&apos;)
          OR (&quot;${prefix}household_demographics&quot;.&quot;hd_buy_potential&quot; = &apos;Unknown&apos;))
       AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &gt; 0)
       AND ((CASE WHEN (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &gt; 0) THEN (CAST(&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; AS DECIMAL(7,2)) / &quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot;) ELSE null END) &gt; 1)
       AND (&quot;${prefix}date_dim&quot;.&quot;d_year&quot; IN (1999   , (1999 + 1)   , (1999 + 2)))
       AND (&quot;${prefix}store&quot;.&quot;s_county&quot; IN (&apos;Williamson County&apos;   , &apos;Franklin Parish&apos;   , &apos;Bronx County&apos;   , &apos;Orange County&apos;))
    GROUP BY &quot;ss_ticket_number&quot;, &quot;ss_customer_sk&quot;
 )  dj
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;cnt&quot; BETWEEN 1 AND 5)
 ORDER BY &quot;cnt&quot; DESC, &quot;c_last_name&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q74.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   year_total AS (
    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;d_year&quot; &quot;YEAR&quot;
    , &quot;sum&quot;(&quot;ss_net_paid&quot;) &quot;year_total&quot;
    , &apos;s&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ss_customer_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; IN (2001   , (2001 + 1)))
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;d_year&quot;
 UNION ALL    SELECT
      &quot;c_customer_id&quot; &quot;customer_id&quot;
    , &quot;c_first_name&quot; &quot;customer_first_name&quot;
    , &quot;c_last_name&quot; &quot;customer_last_name&quot;
    , &quot;d_year&quot; &quot;YEAR&quot;
    , &quot;sum&quot;(&quot;ws_net_paid&quot;) &quot;year_total&quot;
    , &apos;w&apos; &quot;sale_type&quot;
    FROM
      ${database}.${schema}.${prefix}customer
    , ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;c_customer_sk&quot; = &quot;ws_bill_customer_sk&quot;)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; IN (2001   , (2001 + 1)))
    GROUP BY &quot;c_customer_id&quot;, &quot;c_first_name&quot;, &quot;c_last_name&quot;, &quot;d_year&quot;
 ) 
 SELECT
   &quot;t_s_secyear&quot;.&quot;customer_id&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_first_name&quot;
 , &quot;t_s_secyear&quot;.&quot;customer_last_name&quot;
 FROM
   year_total t_s_firstyear
 , year_total t_s_secyear
 , year_total t_w_firstyear
 , year_total t_w_secyear
 WHERE (&quot;t_s_secyear&quot;.&quot;customer_id&quot; = &quot;t_s_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_secyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;customer_id&quot; = &quot;t_w_firstyear&quot;.&quot;customer_id&quot;)
    AND (&quot;t_s_firstyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_w_firstyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_secyear&quot;.&quot;sale_type&quot; = &apos;s&apos;)
    AND (&quot;t_w_secyear&quot;.&quot;sale_type&quot; = &apos;w&apos;)
    AND (&quot;t_s_firstyear&quot;.&quot;year&quot; = 2001)
    AND (&quot;t_s_secyear&quot;.&quot;year&quot; = (2001 + 1))
    AND (&quot;t_w_firstyear&quot;.&quot;year&quot; = 2001)
    AND (&quot;t_w_secyear&quot;.&quot;year&quot; = (2001 + 1))
    AND (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0)
    AND ((CASE WHEN (&quot;t_w_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_w_secyear&quot;.&quot;year_total&quot; / &quot;t_w_firstyear&quot;.&quot;year_total&quot;) ELSE null END) &gt; (CASE WHEN (&quot;t_s_firstyear&quot;.&quot;year_total&quot; &gt; 0) THEN (&quot;t_s_secyear&quot;.&quot;year_total&quot; / &quot;t_s_firstyear&quot;.&quot;year_total&quot;) ELSE null END))
 ORDER BY 1 ASC, 1 ASC, 1 ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q75.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   all_sales AS (
    SELECT
      &quot;d_year&quot;
    , &quot;i_brand_id&quot;
    , &quot;i_class_id&quot;
    , &quot;i_category_id&quot;
    , &quot;i_manufact_id&quot;
    , &quot;sum&quot;(&quot;sales_cnt&quot;) &quot;sales_cnt&quot;
    , &quot;sum&quot;(&quot;sales_amt&quot;) &quot;sales_amt&quot;
    FROM
      (
       SELECT
         &quot;d_year&quot;
       , &quot;i_brand_id&quot;
       , &quot;i_class_id&quot;
       , &quot;i_category_id&quot;
       , &quot;i_manufact_id&quot;
       , (&quot;cs_quantity&quot; - COALESCE(&quot;cr_return_quantity&quot;, 0)) &quot;sales_cnt&quot;
       , (&quot;cs_ext_sales_price&quot; - COALESCE(&quot;cr_return_amount&quot;, DECIMAL &apos;0.0&apos;)) &quot;sales_amt&quot;
       FROM
         (((${database}.${schema}.${prefix}catalog_sales
       INNER JOIN ${database}.${schema}.${prefix}item ON (&quot;i_item_sk&quot; = &quot;cs_item_sk&quot;))
       INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;d_date_sk&quot; = &quot;cs_sold_date_sk&quot;))
       LEFT JOIN ${database}.${schema}.${prefix}catalog_returns ON (&quot;cs_order_number&quot; = &quot;cr_order_number&quot;)
          AND (&quot;cs_item_sk&quot; = &quot;cr_item_sk&quot;))
       WHERE (&quot;i_category&quot; = &apos;Books&apos;)
 UNION       SELECT
         &quot;d_year&quot;
       , &quot;i_brand_id&quot;
       , &quot;i_class_id&quot;
       , &quot;i_category_id&quot;
       , &quot;i_manufact_id&quot;
       , (&quot;ss_quantity&quot; - COALESCE(&quot;sr_return_quantity&quot;, 0)) &quot;sales_cnt&quot;
       , (&quot;ss_ext_sales_price&quot; - COALESCE(&quot;sr_return_amt&quot;, DECIMAL &apos;0.0&apos;)) &quot;sales_amt&quot;
       FROM
         (((${database}.${schema}.${prefix}store_sales
       INNER JOIN ${database}.${schema}.${prefix}item ON (&quot;i_item_sk&quot; = &quot;ss_item_sk&quot;))
       INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;d_date_sk&quot; = &quot;ss_sold_date_sk&quot;))
       LEFT JOIN ${database}.${schema}.${prefix}store_returns ON (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;)
          AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;))
       WHERE (&quot;i_category&quot; = &apos;Books&apos;)
 UNION       SELECT
         &quot;d_year&quot;
       , &quot;i_brand_id&quot;
       , &quot;i_class_id&quot;
       , &quot;i_category_id&quot;
       , &quot;i_manufact_id&quot;
       , (&quot;ws_quantity&quot; - COALESCE(&quot;wr_return_quantity&quot;, 0)) &quot;sales_cnt&quot;
       , (&quot;ws_ext_sales_price&quot; - COALESCE(&quot;wr_return_amt&quot;, DECIMAL &apos;0.0&apos;)) &quot;sales_amt&quot;
       FROM
         (((${database}.${schema}.${prefix}web_sales
       INNER JOIN ${database}.${schema}.${prefix}item ON (&quot;i_item_sk&quot; = &quot;ws_item_sk&quot;))
       INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;d_date_sk&quot; = &quot;ws_sold_date_sk&quot;))
       LEFT JOIN ${database}.${schema}.${prefix}web_returns ON (&quot;ws_order_number&quot; = &quot;wr_order_number&quot;)
          AND (&quot;ws_item_sk&quot; = &quot;wr_item_sk&quot;))
       WHERE (&quot;i_category&quot; = &apos;Books&apos;)
    )  sales_detail
    GROUP BY &quot;d_year&quot;, &quot;i_brand_id&quot;, &quot;i_class_id&quot;, &quot;i_category_id&quot;, &quot;i_manufact_id&quot;
 ) 
 SELECT
   &quot;prev_yr&quot;.&quot;d_year&quot; &quot;prev_year&quot;
 , &quot;curr_yr&quot;.&quot;d_year&quot; &quot;year&quot;
 , &quot;curr_yr&quot;.&quot;i_brand_id&quot;
 , &quot;curr_yr&quot;.&quot;i_class_id&quot;
 , &quot;curr_yr&quot;.&quot;i_category_id&quot;
 , &quot;curr_yr&quot;.&quot;i_manufact_id&quot;
 , &quot;prev_yr&quot;.&quot;sales_cnt&quot; &quot;prev_yr_cnt&quot;
 , &quot;curr_yr&quot;.&quot;sales_cnt&quot; &quot;curr_yr_cnt&quot;
 , (&quot;curr_yr&quot;.&quot;sales_cnt&quot; - &quot;prev_yr&quot;.&quot;sales_cnt&quot;) &quot;sales_cnt_diff&quot;
 , (&quot;curr_yr&quot;.&quot;sales_amt&quot; - &quot;prev_yr&quot;.&quot;sales_amt&quot;) &quot;sales_amt_diff&quot;
 FROM
   all_sales curr_yr
 , all_sales prev_yr
 WHERE (&quot;curr_yr&quot;.&quot;i_brand_id&quot; = &quot;prev_yr&quot;.&quot;i_brand_id&quot;)
    AND (&quot;curr_yr&quot;.&quot;i_class_id&quot; = &quot;prev_yr&quot;.&quot;i_class_id&quot;)
    AND (&quot;curr_yr&quot;.&quot;i_category_id&quot; = &quot;prev_yr&quot;.&quot;i_category_id&quot;)
    AND (&quot;curr_yr&quot;.&quot;i_manufact_id&quot; = &quot;prev_yr&quot;.&quot;i_manufact_id&quot;)
    AND (&quot;curr_yr&quot;.&quot;d_year&quot; = 2002)
    AND (&quot;prev_yr&quot;.&quot;d_year&quot; = (2002 - 1))
    AND ((CAST(&quot;curr_yr&quot;.&quot;sales_cnt&quot; AS DECIMAL(17,2)) / CAST(&quot;prev_yr&quot;.&quot;sales_cnt&quot; AS DECIMAL(17,2))) &lt; DECIMAL &apos;0.9&apos;)
 ORDER BY &quot;sales_cnt_diff&quot; ASC, &quot;sales_amt_diff&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q76.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;channel&quot;
 , &quot;col_name&quot;
 , &quot;d_year&quot;
 , &quot;d_qoy&quot;
 , &quot;i_category&quot;
 , &quot;count&quot;(*) &quot;sales_cnt&quot;
 , &quot;sum&quot;(&quot;ext_sales_price&quot;) &quot;sales_amt&quot;
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store&apos; &quot;channel&quot;
    , &apos;ss_store_sk&apos; &quot;col_name&quot;
    , &quot;d_year&quot;
    , &quot;d_qoy&quot;
    , &quot;i_category&quot;
    , &quot;ss_ext_sales_price&quot; &quot;ext_sales_price&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_store_sk&quot; IS NULL)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
 UNION ALL    SELECT
      &apos;web&apos; &quot;channel&quot;
    , &apos;ws_ship_customer_sk&apos; &quot;col_name&quot;
    , &quot;d_year&quot;
    , &quot;d_qoy&quot;
    , &quot;i_category&quot;
    , &quot;ws_ext_sales_price&quot; &quot;ext_sales_price&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ws_ship_customer_sk&quot; IS NULL)
       AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
 UNION ALL    SELECT
      &apos;catalog&apos; &quot;channel&quot;
    , &apos;cs_ship_addr_sk&apos; &quot;col_name&quot;
    , &quot;d_year&quot;
    , &quot;d_qoy&quot;
    , &quot;i_category&quot;
    , &quot;cs_ext_sales_price&quot; &quot;ext_sales_price&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cs_ship_addr_sk&quot; IS NULL)
       AND (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
 )  foo
 GROUP BY &quot;channel&quot;, &quot;col_name&quot;, &quot;d_year&quot;, &quot;d_qoy&quot;, &quot;i_category&quot;
 ORDER BY &quot;channel&quot; ASC, &quot;col_name&quot; ASC, &quot;d_year&quot; ASC, &quot;d_qoy&quot; ASC, &quot;i_category&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q77.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ss AS (
    SELECT
      &quot;s_store_sk&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;ss_net_profit&quot;) &quot;profit&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
    GROUP BY &quot;s_store_sk&quot;
 ) 
 , sr AS (
    SELECT
      &quot;s_store_sk&quot;
    , &quot;sum&quot;(&quot;sr_return_amt&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;sr_net_loss&quot;) &quot;profit_loss&quot;
    FROM
      ${database}.${schema}.${prefix}store_returns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;sr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;sr_store_sk&quot; = &quot;s_store_sk&quot;)
    GROUP BY &quot;s_store_sk&quot;
 ) 
 , cs AS (
    SELECT
      &quot;cs_call_center_sk&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;cs_net_profit&quot;) &quot;profit&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
    GROUP BY &quot;cs_call_center_sk&quot;
 ) 
 , cr AS (
    SELECT
      &quot;cr_call_center_sk&quot;
    , &quot;sum&quot;(&quot;cr_return_amount&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;cr_net_loss&quot;) &quot;profit_loss&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_returns
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
    GROUP BY &quot;cr_call_center_sk&quot;
 ) 
 , ws AS (
    SELECT
      &quot;wp_web_page_sk&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(&quot;ws_net_profit&quot;) &quot;profit&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}web_page
    WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;ws_web_page_sk&quot; = &quot;wp_web_page_sk&quot;)
    GROUP BY &quot;wp_web_page_sk&quot;
 ) 
 , wr AS (
    SELECT
      &quot;wp_web_page_sk&quot;
    , &quot;sum&quot;(&quot;wr_return_amt&quot;) &quot;returns&quot;
    , &quot;sum&quot;(&quot;wr_net_loss&quot;) &quot;profit_loss&quot;
    FROM
      ${database}.${schema}.${prefix}web_returns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}web_page
    WHERE (&quot;wr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;wr_web_page_sk&quot; = &quot;wp_web_page_sk&quot;)
    GROUP BY &quot;wp_web_page_sk&quot;
 ) 
 SELECT
   &quot;channel&quot;
 , &quot;id&quot;
 , &quot;sum&quot;(&quot;sales&quot;) &quot;sales&quot;
 , &quot;sum&quot;(&quot;returns&quot;) &quot;returns&quot;
 , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store channel&apos; &quot;channel&quot;
    , &quot;ss&quot;.&quot;s_store_sk&quot; &quot;id&quot;
    , &quot;sales&quot;
    , COALESCE(&quot;returns&quot;, 0) &quot;returns&quot;
    , (&quot;profit&quot; - COALESCE(&quot;profit_loss&quot;, 0)) &quot;profit&quot;
    FROM
      (ss
    LEFT JOIN sr ON (&quot;ss&quot;.&quot;s_store_sk&quot; = &quot;sr&quot;.&quot;s_store_sk&quot;))
 UNION ALL    SELECT
      &apos;catalog channel&apos; &quot;channel&quot;
    , &quot;cs_call_center_sk&quot; &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , (&quot;profit&quot; - &quot;profit_loss&quot;) &quot;profit&quot;
    FROM
      cs
    , cr
 UNION ALL    SELECT
      &apos;web channel&apos; &quot;channel&quot;
    , &quot;ws&quot;.&quot;wp_web_page_sk&quot; &quot;id&quot;
    , &quot;sales&quot;
    , COALESCE(&quot;returns&quot;, 0) &quot;returns&quot;
    , (&quot;profit&quot; - COALESCE(&quot;profit_loss&quot;, 0)) &quot;profit&quot;
    FROM
      (ws
    LEFT JOIN wr ON (&quot;ws&quot;.&quot;wp_web_page_sk&quot; = &quot;wr&quot;.&quot;wp_web_page_sk&quot;))
 )  x
 GROUP BY ROLLUP (channel, id)
 ORDER BY &quot;channel&quot; ASC, &quot;id&quot; ASC, &quot;sales&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q78.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ws AS (
    SELECT
      &quot;d_year&quot; &quot;ws_sold_year&quot;
    , &quot;ws_item_sk&quot;
    , &quot;ws_bill_customer_sk&quot; &quot;ws_customer_sk&quot;
    , &quot;sum&quot;(&quot;ws_quantity&quot;) &quot;ws_qty&quot;
    , &quot;sum&quot;(&quot;ws_wholesale_cost&quot;) &quot;ws_wc&quot;
    , &quot;sum&quot;(&quot;ws_sales_price&quot;) &quot;ws_sp&quot;
    FROM
      ((${database}.${schema}.${prefix}web_sales
    LEFT JOIN ${database}.${schema}.${prefix}web_returns ON (&quot;wr_order_number&quot; = &quot;ws_order_number&quot;)
       AND (&quot;ws_item_sk&quot; = &quot;wr_item_sk&quot;))
    INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;))
    WHERE (&quot;wr_order_number&quot; IS NULL)
    GROUP BY &quot;d_year&quot;, &quot;ws_item_sk&quot;, &quot;ws_bill_customer_sk&quot;
 ) 
 , cs AS (
    SELECT
      &quot;d_year&quot; &quot;cs_sold_year&quot;
    , &quot;cs_item_sk&quot;
    , &quot;cs_bill_customer_sk&quot; &quot;cs_customer_sk&quot;
    , &quot;sum&quot;(&quot;cs_quantity&quot;) &quot;cs_qty&quot;
    , &quot;sum&quot;(&quot;cs_wholesale_cost&quot;) &quot;cs_wc&quot;
    , &quot;sum&quot;(&quot;cs_sales_price&quot;) &quot;cs_sp&quot;
    FROM
      ((${database}.${schema}.${prefix}catalog_sales
    LEFT JOIN ${database}.${schema}.${prefix}catalog_returns ON (&quot;cr_order_number&quot; = &quot;cs_order_number&quot;)
       AND (&quot;cs_item_sk&quot; = &quot;cr_item_sk&quot;))
    INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;))
    WHERE (&quot;cr_order_number&quot; IS NULL)
    GROUP BY &quot;d_year&quot;, &quot;cs_item_sk&quot;, &quot;cs_bill_customer_sk&quot;
 ) 
 , ss AS (
    SELECT
      &quot;d_year&quot; &quot;ss_sold_year&quot;
    , &quot;ss_item_sk&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;sum&quot;(&quot;ss_quantity&quot;) &quot;ss_qty&quot;
    , &quot;sum&quot;(&quot;ss_wholesale_cost&quot;) &quot;ss_wc&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;ss_sp&quot;
    FROM
      ((${database}.${schema}.${prefix}store_sales
    LEFT JOIN ${database}.${schema}.${prefix}store_returns ON (&quot;sr_ticket_number&quot; = &quot;ss_ticket_number&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;))
    INNER JOIN ${database}.${schema}.${prefix}date_dim ON (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;))
    WHERE (&quot;sr_ticket_number&quot; IS NULL)
    GROUP BY &quot;d_year&quot;, &quot;ss_item_sk&quot;, &quot;ss_customer_sk&quot;
 ) 
 SELECT
   &quot;ss_sold_year&quot;
 , &quot;ss_item_sk&quot;
 , &quot;ss_customer_sk&quot;
 , &quot;round&quot;((CAST(&quot;ss_qty&quot; AS DECIMAL(10,2)) / COALESCE((&quot;ws_qty&quot; + &quot;cs_qty&quot;), 1)), 2) &quot;ratio&quot;
 , &quot;ss_qty&quot; &quot;store_qty&quot;
 , &quot;ss_wc&quot; &quot;store_wholesale_cost&quot;
 , &quot;ss_sp&quot; &quot;store_sales_price&quot;
 , (COALESCE(&quot;ws_qty&quot;, 0) + COALESCE(&quot;cs_qty&quot;, 0)) &quot;other_chan_qty&quot;
 , (COALESCE(&quot;ws_wc&quot;, 0) + COALESCE(&quot;cs_wc&quot;, 0)) &quot;other_chan_wholesale_cost&quot;
 , (COALESCE(&quot;ws_sp&quot;, 0) + COALESCE(&quot;cs_sp&quot;, 0)) &quot;other_chan_sales_price&quot;
 FROM
   ((ss
 LEFT JOIN ws ON (&quot;ws_sold_year&quot; = &quot;ss_sold_year&quot;)
    AND (&quot;ws_item_sk&quot; = &quot;ss_item_sk&quot;)
    AND (&quot;ws_customer_sk&quot; = &quot;ss_customer_sk&quot;))
 LEFT JOIN cs ON (&quot;cs_sold_year&quot; = &quot;ss_sold_year&quot;)
    AND (&quot;cs_item_sk&quot; = &quot;cs_item_sk&quot;)
    AND (&quot;cs_customer_sk&quot; = &quot;ss_customer_sk&quot;))
 WHERE (COALESCE(&quot;ws_qty&quot;, 0) &gt; 0)
    AND (COALESCE(&quot;cs_qty&quot;, 0) &gt; 0)
    AND (&quot;ss_sold_year&quot; = 2000)
 ORDER BY &quot;ss_sold_year&quot; ASC, &quot;ss_item_sk&quot; ASC, &quot;ss_customer_sk&quot; ASC, &quot;ss_qty&quot; DESC, &quot;ss_wc&quot; DESC, &quot;ss_sp&quot; DESC, &quot;other_chan_qty&quot; ASC, &quot;other_chan_wholesale_cost&quot; ASC, &quot;other_chan_sales_price&quot; ASC, &quot;round&quot;((CAST(&quot;ss_qty&quot; AS DECIMAL(10,2)) / COALESCE((&quot;ws_qty&quot; + &quot;cs_qty&quot;), 1)), 2) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q79.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_last_name&quot;
 , &quot;c_first_name&quot;
 , &quot;substr&quot;(&quot;s_city&quot;, 1, 30)
 , &quot;ss_ticket_number&quot;
 , &quot;amt&quot;
 , &quot;profit&quot;
 FROM
   (
    SELECT
      &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , &quot;${prefix}store&quot;.&quot;s_city&quot;
    , &quot;sum&quot;(&quot;ss_coupon_amt&quot;) &quot;amt&quot;
    , &quot;sum&quot;(&quot;ss_net_profit&quot;) &quot;profit&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}household_demographics
    WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_store_sk&quot; = &quot;${prefix}store&quot;.&quot;s_store_sk&quot;)
       AND (&quot;${prefix}store_sales&quot;.&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 6)
          OR (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &gt; 2))
       AND (&quot;${prefix}date_dim&quot;.&quot;d_dow&quot; = 1)
       AND (&quot;${prefix}date_dim&quot;.&quot;d_year&quot; IN (1999   , (1999 + 1)   , (1999 + 2)))
       AND (&quot;${prefix}store&quot;.&quot;s_number_employees&quot; BETWEEN 200 AND 295)
    GROUP BY &quot;ss_ticket_number&quot;, &quot;ss_customer_sk&quot;, &quot;ss_addr_sk&quot;, &quot;${prefix}store&quot;.&quot;s_city&quot;
 )  ms
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ss_customer_sk&quot; = &quot;c_customer_sk&quot;)
 ORDER BY &quot;c_last_name&quot; ASC, &quot;c_first_name&quot; ASC, &quot;substr&quot;(&quot;s_city&quot;, 1, 30) ASC, &quot;profit&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q80.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ssr AS (
    SELECT
      &quot;s_store_id&quot; &quot;store_id&quot;
    , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(COALESCE(&quot;sr_return_amt&quot;, 0)) &quot;returns&quot;
    , &quot;sum&quot;((&quot;ss_net_profit&quot; - COALESCE(&quot;sr_net_loss&quot;, 0))) &quot;profit&quot;
    FROM
      (${database}.${schema}.${prefix}store_sales
    LEFT JOIN ${database}.${schema}.${prefix}store_returns ON (&quot;ss_item_sk&quot; = &quot;sr_item_sk&quot;)
       AND (&quot;ss_ticket_number&quot; = &quot;sr_ticket_number&quot;))
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}promotion
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;i_current_price&quot; &gt; 50)
       AND (&quot;ss_promo_sk&quot; = &quot;p_promo_sk&quot;)
       AND (&quot;p_channel_tv&quot; = &apos;N&apos;)
    GROUP BY &quot;s_store_id&quot;
 ) 
 , csr AS (
    SELECT
      &quot;cp_catalog_page_id&quot; &quot;catalog_page_id&quot;
    , &quot;sum&quot;(&quot;cs_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(COALESCE(&quot;cr_return_amount&quot;, 0)) &quot;returns&quot;
    , &quot;sum&quot;((&quot;cs_net_profit&quot; - COALESCE(&quot;cr_net_loss&quot;, 0))) &quot;profit&quot;
    FROM
      (${database}.${schema}.${prefix}catalog_sales
    LEFT JOIN ${database}.${schema}.${prefix}catalog_returns ON (&quot;cs_item_sk&quot; = &quot;cr_item_sk&quot;)
       AND (&quot;cs_order_number&quot; = &quot;cr_order_number&quot;))
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}catalog_page
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}promotion
    WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;cs_catalog_page_sk&quot; = &quot;cp_catalog_page_sk&quot;)
       AND (&quot;cs_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;i_current_price&quot; &gt; 50)
       AND (&quot;cs_promo_sk&quot; = &quot;p_promo_sk&quot;)
       AND (&quot;p_channel_tv&quot; = &apos;N&apos;)
    GROUP BY &quot;cp_catalog_page_id&quot;
 ) 
 , wsr AS (
    SELECT
      &quot;web_site_id&quot;
    , &quot;sum&quot;(&quot;ws_ext_sales_price&quot;) &quot;sales&quot;
    , &quot;sum&quot;(COALESCE(&quot;wr_return_amt&quot;, 0)) &quot;returns&quot;
    , &quot;sum&quot;((&quot;ws_net_profit&quot; - COALESCE(&quot;wr_net_loss&quot;, 0))) &quot;profit&quot;
    FROM
      (${database}.${schema}.${prefix}web_sales
    LEFT JOIN ${database}.${schema}.${prefix}web_returns ON (&quot;ws_item_sk&quot; = &quot;wr_item_sk&quot;)
       AND (&quot;ws_order_number&quot; = &quot;wr_order_number&quot;))
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}web_site
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}promotion
    WHERE (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;2000-08-23&apos; AS DATE) AND (CAST(&apos;2000-08-23&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
       AND (&quot;ws_web_site_sk&quot; = &quot;web_site_sk&quot;)
       AND (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;i_current_price&quot; &gt; 50)
       AND (&quot;ws_promo_sk&quot; = &quot;p_promo_sk&quot;)
       AND (&quot;p_channel_tv&quot; = &apos;N&apos;)
    GROUP BY &quot;web_site_id&quot;
 ) 
 SELECT
   &quot;channel&quot;
 , &quot;id&quot;
 , &quot;sum&quot;(&quot;sales&quot;) &quot;sales&quot;
 , &quot;sum&quot;(&quot;returns&quot;) &quot;returns&quot;
 , &quot;sum&quot;(&quot;profit&quot;) &quot;profit&quot;
 FROM
   (
    SELECT
      &apos;${database}.${schema}.${prefix}store channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;store&apos;, &quot;store_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , &quot;profit&quot;
    FROM
      ssr
 UNION ALL    SELECT
      &apos;catalog channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;catalog_page&apos;, &quot;catalog_page_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , &quot;profit&quot;
    FROM
      csr
 UNION ALL    SELECT
      &apos;web channel&apos; &quot;channel&quot;
    , &quot;concat&quot;(&apos;web_site&apos;, &quot;web_site_id&quot;) &quot;id&quot;
    , &quot;sales&quot;
    , &quot;returns&quot;
    , &quot;profit&quot;
    FROM
      wsr
 )  x
 GROUP BY ROLLUP (channel, id)
 ORDER BY &quot;channel&quot; ASC, &quot;id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q81.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   customer_total_return AS (
    SELECT
      &quot;cr_returning_customer_sk&quot; &quot;ctr_customer_sk&quot;
    , &quot;ca_state&quot; &quot;ctr_state&quot;
    , &quot;sum&quot;(&quot;cr_return_amt_inc_tax&quot;) &quot;ctr_total_return&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_returns
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}customer_address
    WHERE (&quot;cr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_year&quot; = 2000)
       AND (&quot;cr_returning_addr_sk&quot; = &quot;ca_address_sk&quot;)
    GROUP BY &quot;cr_returning_customer_sk&quot;, &quot;ca_state&quot;
 ) 
 SELECT
   &quot;c_customer_id&quot;
 , &quot;c_salutation&quot;
 , &quot;c_first_name&quot;
 , &quot;c_last_name&quot;
 , &quot;ca_street_number&quot;
 , &quot;ca_street_name&quot;
 , &quot;ca_street_type&quot;
 , &quot;ca_suite_number&quot;
 , &quot;ca_city&quot;
 , &quot;ca_county&quot;
 , &quot;ca_state&quot;
 , &quot;ca_zip&quot;
 , &quot;ca_country&quot;
 , &quot;ca_gmt_offset&quot;
 , &quot;ca_location_type&quot;
 , &quot;ctr_total_return&quot;
 FROM
   customer_total_return ctr1
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}customer
 WHERE (&quot;ctr1&quot;.&quot;ctr_total_return&quot; &gt; (
       SELECT (&quot;avg&quot;(&quot;ctr_total_return&quot;) * DECIMAL &apos;1.2&apos;)
       FROM
         customer_total_return ctr2
       WHERE (&quot;ctr1&quot;.&quot;ctr_state&quot; = &quot;ctr2&quot;.&quot;ctr_state&quot;)
    ))
    AND (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
    AND (&quot;ca_state&quot; = &apos;GA&apos;)
    AND (&quot;ctr1&quot;.&quot;ctr_customer_sk&quot; = &quot;c_customer_sk&quot;)
 ORDER BY &quot;c_customer_id&quot; ASC, &quot;c_salutation&quot; ASC, &quot;c_first_name&quot; ASC, &quot;c_last_name&quot; ASC, &quot;ca_street_number&quot; ASC, &quot;ca_street_name&quot; ASC, &quot;ca_street_type&quot; ASC, &quot;ca_suite_number&quot; ASC, &quot;ca_city&quot; ASC, &quot;ca_county&quot; ASC, &quot;ca_state&quot; ASC, &quot;ca_zip&quot; ASC, &quot;ca_country&quot; ASC, &quot;ca_gmt_offset&quot; ASC, &quot;ca_location_type&quot; ASC, &quot;ctr_total_return&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q82.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;i_current_price&quot;
 FROM
   ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}inventory
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}store_sales
 WHERE (&quot;i_current_price&quot; BETWEEN 62 AND (62 + 30))
    AND (&quot;inv_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;d_date_sk&quot; = &quot;inv_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;2000-05-25&apos; AS DATE) AND (CAST(&apos;2000-05-25&apos; AS DATE) + INTERVAL  &apos;60&apos; DAY))
    AND (&quot;i_manufact_id&quot; IN (129, 270, 821, 423))
    AND (&quot;inv_quantity_on_hand&quot; BETWEEN 100 AND 500)
    AND (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;i_current_price&quot;
 ORDER BY &quot;i_item_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q83.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   sr_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;sr_return_quantity&quot;) &quot;sr_item_qty&quot;
    FROM
      ${database}.${schema}.${prefix}store_returns
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;sr_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; IN (
          SELECT &quot;d_week_seq&quot;
          FROM
            ${database}.${schema}.${prefix}date_dim
          WHERE (&quot;d_date&quot; IN (CAST(&apos;2000-06-30&apos; AS DATE)         , CAST(&apos;2000-09-27&apos; AS DATE)         , CAST(&apos;2000-11-17&apos; AS DATE)))
       ))
    ))
       AND (&quot;sr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , cr_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;cr_return_quantity&quot;) &quot;cr_item_qty&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_returns
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cr_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; IN (
          SELECT &quot;d_week_seq&quot;
          FROM
            ${database}.${schema}.${prefix}date_dim
          WHERE (&quot;d_date&quot; IN (CAST(&apos;2000-06-30&apos; AS DATE)         , CAST(&apos;2000-09-27&apos; AS DATE)         , CAST(&apos;2000-11-17&apos; AS DATE)))
       ))
    ))
       AND (&quot;cr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 , wr_items AS (
    SELECT
      &quot;i_item_id&quot; &quot;item_id&quot;
    , &quot;sum&quot;(&quot;wr_return_quantity&quot;) &quot;wr_item_qty&quot;
    FROM
      ${database}.${schema}.${prefix}web_returns
    , ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;wr_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;d_date&quot; IN (
       SELECT &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;d_week_seq&quot; IN (
          SELECT &quot;d_week_seq&quot;
          FROM
            ${database}.${schema}.${prefix}date_dim
          WHERE (&quot;d_date&quot; IN (CAST(&apos;2000-06-30&apos; AS DATE)         , CAST(&apos;2000-09-27&apos; AS DATE)         , CAST(&apos;2000-11-17&apos; AS DATE)))
       ))
    ))
       AND (&quot;wr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
    GROUP BY &quot;i_item_id&quot;
 ) 
 SELECT
   &quot;sr_items&quot;.&quot;item_id&quot;
 , &quot;sr_item_qty&quot;
 , CAST((((&quot;sr_item_qty&quot; / ((CAST(&quot;sr_item_qty&quot; AS DECIMAL(9,4)) + &quot;cr_item_qty&quot;) + &quot;wr_item_qty&quot;)) / DECIMAL &apos;3.0&apos;) * 100) AS DECIMAL(7,2)) &quot;sr_dev&quot;
 , &quot;cr_item_qty&quot;
 , CAST((((&quot;cr_item_qty&quot; / ((CAST(&quot;sr_item_qty&quot; AS DECIMAL(9,4)) + &quot;cr_item_qty&quot;) + &quot;wr_item_qty&quot;)) / DECIMAL &apos;3.0&apos;) * 100) AS DECIMAL(7,2)) &quot;cr_dev&quot;
 , &quot;wr_item_qty&quot;
 , CAST((((&quot;wr_item_qty&quot; / ((CAST(&quot;sr_item_qty&quot; AS DECIMAL(9,4)) + &quot;cr_item_qty&quot;) + &quot;wr_item_qty&quot;)) / DECIMAL &apos;3.0&apos;) * 100) AS DECIMAL(7,2)) &quot;wr_dev&quot;
 , (((&quot;sr_item_qty&quot; + &quot;cr_item_qty&quot;) + &quot;wr_item_qty&quot;) / DECIMAL &apos;3.00&apos;) &quot;average&quot;
 FROM
   sr_items
 , cr_items
 , wr_items
 WHERE (&quot;sr_items&quot;.&quot;item_id&quot; = &quot;cr_items&quot;.&quot;item_id&quot;)
    AND (&quot;sr_items&quot;.&quot;item_id&quot; = &quot;wr_items&quot;.&quot;item_id&quot;)
 ORDER BY &quot;sr_items&quot;.&quot;item_id&quot; ASC, &quot;sr_item_qty&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q84.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;c_customer_id&quot; &quot;customer_id&quot;
 , &quot;concat&quot;(&quot;concat&quot;(&quot;c_last_name&quot;, &apos;, &apos;), &quot;c_first_name&quot;) &quot;${database}.${schema}.${prefix}customername&quot;
 FROM
   ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}household_demographics
 , ${database}.${schema}.${prefix}income_band
 , ${database}.${schema}.${prefix}store_returns
 WHERE (&quot;ca_city&quot; = &apos;Edgewood&apos;)
    AND (&quot;c_current_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;ib_lower_bound&quot; &gt;= 38128)
    AND (&quot;ib_upper_bound&quot; &lt;= (38128 + 50000))
    AND (&quot;ib_income_band_sk&quot; = &quot;hd_income_band_sk&quot;)
    AND (&quot;cd_demo_sk&quot; = &quot;c_current_cdemo_sk&quot;)
    AND (&quot;hd_demo_sk&quot; = &quot;c_current_hdemo_sk&quot;)
    AND (&quot;sr_cdemo_sk&quot; = &quot;cd_demo_sk&quot;)
 ORDER BY &quot;c_customer_id&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q85.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;substr&quot;(&quot;r_reason_desc&quot;, 1, 20)
 , &quot;avg&quot;(&quot;ws_quantity&quot;)
 , &quot;avg&quot;(&quot;wr_refunded_cash&quot;)
 , &quot;avg&quot;(&quot;wr_fee&quot;)
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}web_returns
 , ${database}.${schema}.${prefix}web_page
 , ${database}.${schema}.${prefix}customer_demographics cd1
 , ${database}.${schema}.${prefix}customer_demographics cd2
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}reason
 WHERE (&quot;ws_web_page_sk&quot; = &quot;wp_web_page_sk&quot;)
    AND (&quot;ws_item_sk&quot; = &quot;wr_item_sk&quot;)
    AND (&quot;ws_order_number&quot; = &quot;wr_order_number&quot;)
    AND (&quot;ws_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;d_year&quot; = 2000)
    AND (&quot;cd1&quot;.&quot;cd_demo_sk&quot; = &quot;wr_refunded_cdemo_sk&quot;)
    AND (&quot;cd2&quot;.&quot;cd_demo_sk&quot; = &quot;wr_returning_cdemo_sk&quot;)
    AND (&quot;ca_address_sk&quot; = &quot;wr_refunded_addr_sk&quot;)
    AND (&quot;r_reason_sk&quot; = &quot;wr_reason_sk&quot;)
    AND (((&quot;cd1&quot;.&quot;cd_marital_status&quot; = &apos;M&apos;)
          AND (&quot;cd1&quot;.&quot;cd_marital_status&quot; = &quot;cd2&quot;.&quot;cd_marital_status&quot;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &apos;Advanced Degree&apos;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &quot;cd2&quot;.&quot;cd_education_status&quot;)
          AND (&quot;ws_sales_price&quot; BETWEEN DECIMAL &apos;100.00&apos; AND DECIMAL &apos;150.00&apos;))
       OR ((&quot;cd1&quot;.&quot;cd_marital_status&quot; = &apos;S&apos;)
          AND (&quot;cd1&quot;.&quot;cd_marital_status&quot; = &quot;cd2&quot;.&quot;cd_marital_status&quot;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &apos;College&apos;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &quot;cd2&quot;.&quot;cd_education_status&quot;)
          AND (&quot;ws_sales_price&quot; BETWEEN DECIMAL &apos;50.00&apos; AND DECIMAL &apos;100.00&apos;))
       OR ((&quot;cd1&quot;.&quot;cd_marital_status&quot; = &apos;W&apos;)
          AND (&quot;cd1&quot;.&quot;cd_marital_status&quot; = &quot;cd2&quot;.&quot;cd_marital_status&quot;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &apos;2 yr Degree&apos;)
          AND (&quot;cd1&quot;.&quot;cd_education_status&quot; = &quot;cd2&quot;.&quot;cd_education_status&quot;)
          AND (&quot;ws_sales_price&quot; BETWEEN DECIMAL &apos;150.00&apos; AND DECIMAL &apos;200.00&apos;)))
    AND (((&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;IN&apos;      , &apos;OH&apos;      , &apos;NJ&apos;))
          AND (&quot;ws_net_profit&quot; BETWEEN 100 AND 200))
       OR ((&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;WI&apos;      , &apos;CT&apos;      , &apos;KY&apos;))
          AND (&quot;ws_net_profit&quot; BETWEEN 150 AND 300))
       OR ((&quot;ca_country&quot; = &apos;United States&apos;)
          AND (&quot;ca_state&quot; IN (&apos;LA&apos;      , &apos;IA&apos;      , &apos;AR&apos;))
          AND (&quot;ws_net_profit&quot; BETWEEN 50 AND 250)))
 GROUP BY &quot;r_reason_desc&quot;
 ORDER BY &quot;substr&quot;(&quot;r_reason_desc&quot;, 1, 20) ASC, &quot;avg&quot;(&quot;ws_quantity&quot;) ASC, &quot;avg&quot;(&quot;wr_refunded_cash&quot;) ASC, &quot;avg&quot;(&quot;wr_fee&quot;) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q86.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;sum&quot;(&quot;ws_net_paid&quot;) &quot;total_sum&quot;
 , &quot;i_category&quot;
 , &quot;i_class&quot;
 , (GROUPING (&quot;i_category&quot;) + GROUPING (&quot;i_class&quot;)) &quot;lochierarchy&quot;
 , &quot;rank&quot;() OVER (PARTITION BY (GROUPING (&quot;i_category&quot;) + GROUPING (&quot;i_class&quot;)), (CASE WHEN (GROUPING (&quot;i_class&quot;) = 0) THEN &quot;i_category&quot; END) ORDER BY &quot;sum&quot;(&quot;ws_net_paid&quot;) DESC) &quot;rank_within_parent&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}date_dim d1
 , ${database}.${schema}.${prefix}item
 WHERE (&quot;d1&quot;.&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    AND (&quot;d1&quot;.&quot;d_date_sk&quot; = &quot;ws_sold_date_sk&quot;)
    AND (&quot;i_item_sk&quot; = &quot;ws_item_sk&quot;)
 GROUP BY ROLLUP (i_category, i_class)
 ORDER BY &quot;lochierarchy&quot; DESC, (CASE WHEN (&quot;lochierarchy&quot; = 0) THEN &quot;i_category&quot; END) ASC, &quot;rank_within_parent&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q87.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;count&quot;(*)
 FROM
   (
 (
       SELECT DISTINCT
         &quot;c_last_name&quot;
       , &quot;c_first_name&quot;
       , &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}store_sales
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}customer
       WHERE (&quot;${prefix}store_sales&quot;.&quot;ss_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
          AND (&quot;${prefix}store_sales&quot;.&quot;ss_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
          AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    ) EXCEPT (
       SELECT DISTINCT
         &quot;c_last_name&quot;
       , &quot;c_first_name&quot;
       , &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}catalog_sales
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}customer
       WHERE (&quot;${prefix}catalog_sales&quot;.&quot;cs_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
          AND (&quot;${prefix}catalog_sales&quot;.&quot;cs_bill_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
          AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    ) EXCEPT (
       SELECT DISTINCT
         &quot;c_last_name&quot;
       , &quot;c_first_name&quot;
       , &quot;d_date&quot;
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       , ${database}.${schema}.${prefix}customer
       WHERE (&quot;${prefix}web_sales&quot;.&quot;ws_sold_date_sk&quot; = &quot;${prefix}date_dim&quot;.&quot;d_date_sk&quot;)
          AND (&quot;${prefix}web_sales&quot;.&quot;ws_bill_customer_sk&quot; = &quot;${prefix}customer&quot;.&quot;c_customer_sk&quot;)
          AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    ) )  cool_cust

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q88.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT &quot;count&quot;(*) &quot;h8_30_to_9&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 8)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &gt;= 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s1
 , (
    SELECT &quot;count&quot;(*) &quot;h9_to_9_30&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 9)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &lt; 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s2
 , (
    SELECT &quot;count&quot;(*) &quot;h9_30_to_10&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 9)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &gt;= 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s3
 , (
    SELECT &quot;count&quot;(*) &quot;h10_to_10_30&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 10)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &lt; 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s4
 , (
    SELECT &quot;count&quot;(*) &quot;h10_30_to_11&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 10)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &gt;= 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s5
 , (
    SELECT &quot;count&quot;(*) &quot;h11_to_11_30&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 11)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &lt; 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s6
 , (
    SELECT &quot;count&quot;(*) &quot;h11_30_to_12&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 11)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &gt;= 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s7
 , (
    SELECT &quot;count&quot;(*) &quot;h12_to_12_30&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 12)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &lt; 30)
       AND (((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 4)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (4 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 2)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (2 + 2)))
          OR ((&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 0)
             AND (&quot;${prefix}household_demographics&quot;.&quot;hd_vehicle_count&quot; &lt;= (0 + 2))))
       AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 )  s8

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q89.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT *
 FROM
   (
    SELECT
      &quot;i_category&quot;
    , &quot;i_class&quot;
    , &quot;i_brand&quot;
    , &quot;s_store_name&quot;
    , &quot;s_company_name&quot;
    , &quot;d_moy&quot;
    , &quot;sum&quot;(&quot;ss_sales_price&quot;) &quot;sum_sales&quot;
    , &quot;avg&quot;(&quot;sum&quot;(&quot;ss_sales_price&quot;)) OVER (PARTITION BY &quot;i_category&quot;, &quot;i_brand&quot;, &quot;s_store_name&quot;, &quot;s_company_name&quot;) &quot;avg_monthly_sales&quot;
    FROM
      ${database}.${schema}.${prefix}item
    , ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    , ${database}.${schema}.${prefix}store
    WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
       AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
       AND (&quot;d_year&quot; IN (1999))
       AND (((&quot;i_category&quot; IN (&apos;Books&apos;         , &apos;Electronics&apos;         , &apos;Sports&apos;))
             AND (&quot;i_class&quot; IN (&apos;computers&apos;         , &apos;stereo&apos;         , &apos;football&apos;)))
          OR ((&quot;i_category&quot; IN (&apos;Men&apos;         , &apos;Jewelry&apos;         , &apos;Women&apos;))
             AND (&quot;i_class&quot; IN (&apos;shirts&apos;         , &apos;birdal&apos;         , &apos;dresses&apos;))))
    GROUP BY &quot;i_category&quot;, &quot;i_class&quot;, &quot;i_brand&quot;, &quot;s_store_name&quot;, &quot;s_company_name&quot;, &quot;d_moy&quot;
 )  tmp1
 WHERE ((CASE WHEN (&quot;avg_monthly_sales&quot; &lt;&gt; 0) THEN (&quot;abs&quot;((&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;)) / &quot;avg_monthly_sales&quot;) ELSE null END) &gt; DECIMAL &apos;0.1&apos;)
 ORDER BY (&quot;sum_sales&quot; - &quot;avg_monthly_sales&quot;) ASC, &quot;s_store_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q90.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT (CAST(&quot;amc&quot; AS DECIMAL(15,4)) / CAST(&quot;pmc&quot; AS DECIMAL(15,4))) &quot;am_pm_ratio&quot;
 FROM
   (
    SELECT &quot;count&quot;(*) &quot;amc&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}web_page
    WHERE (&quot;ws_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ws_ship_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ws_web_page_sk&quot; = &quot;${prefix}web_page&quot;.&quot;wp_web_page_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; BETWEEN 8 AND (8 + 1))
       AND (&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 6)
       AND (&quot;${prefix}web_page&quot;.&quot;wp_char_count&quot; BETWEEN 5000 AND 5200)
 )  &quot;at&quot;
 , (
    SELECT &quot;count&quot;(*) &quot;pmc&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales
    , ${database}.${schema}.${prefix}household_demographics
    , ${database}.${schema}.${prefix}time_dim
    , ${database}.${schema}.${prefix}web_page
    WHERE (&quot;ws_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
       AND (&quot;ws_ship_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
       AND (&quot;ws_web_page_sk&quot; = &quot;${prefix}web_page&quot;.&quot;wp_web_page_sk&quot;)
       AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; BETWEEN 19 AND (19 + 1))
       AND (&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 6)
       AND (&quot;${prefix}web_page&quot;.&quot;wp_char_count&quot; BETWEEN 5000 AND 5200)
 )  pt
 ORDER BY &quot;am_pm_ratio&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q91.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;cc_call_center_id&quot; &quot;Call_Center&quot;
 , &quot;cc_name&quot; &quot;Call_Center_Name&quot;
 , &quot;cc_manager&quot; &quot;Manager&quot;
 , &quot;sum&quot;(&quot;cr_net_loss&quot;) &quot;Returns_Loss&quot;
 FROM
   ${database}.${schema}.${prefix}call_center
 , ${database}.${schema}.${prefix}catalog_returns
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}customer
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}customer_demographics
 , ${database}.${schema}.${prefix}household_demographics
 WHERE (&quot;cr_call_center_sk&quot; = &quot;cc_call_center_sk&quot;)
    AND (&quot;cr_returned_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;cr_returning_customer_sk&quot; = &quot;c_customer_sk&quot;)
    AND (&quot;cd_demo_sk&quot; = &quot;c_current_cdemo_sk&quot;)
    AND (&quot;hd_demo_sk&quot; = &quot;c_current_hdemo_sk&quot;)
    AND (&quot;ca_address_sk&quot; = &quot;c_current_addr_sk&quot;)
    AND (&quot;d_year&quot; = 1998)
    AND (&quot;d_moy&quot; = 11)
    AND (((&quot;cd_marital_status&quot; = &apos;M&apos;)
          AND (&quot;cd_education_status&quot; = &apos;Unknown&apos;))
       OR ((&quot;cd_marital_status&quot; = &apos;W&apos;)
          AND (&quot;cd_education_status&quot; = &apos;Advanced Degree&apos;)))
    AND (&quot;hd_buy_potential&quot; LIKE &apos;Unknown&apos;)
    AND (&quot;ca_gmt_offset&quot; = -7)
 GROUP BY &quot;cc_call_center_id&quot;, &quot;cc_name&quot;, &quot;cc_manager&quot;, &quot;cd_marital_status&quot;, &quot;cd_education_status&quot;
 ORDER BY &quot;sum&quot;(&quot;cr_net_loss&quot;) DESC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q92.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;sum&quot;(&quot;ws_ext_discount_amt&quot;) &quot;Excess Discount Amount&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;i_manufact_id&quot; = 350)
    AND (&quot;i_item_sk&quot; = &quot;ws_item_sk&quot;)
    AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-01-27&apos; AS DATE) AND (CAST(&apos;2000-01-27&apos; AS DATE) + INTERVAL  &apos;90&apos; DAY))
    AND (&quot;d_date_sk&quot; = &quot;ws_sold_date_sk&quot;)
    AND (&quot;ws_ext_discount_amt&quot; &gt; (
       SELECT (DECIMAL &apos;1.3&apos; * &quot;avg&quot;(&quot;ws_ext_discount_amt&quot;))
       FROM
         ${database}.${schema}.${prefix}web_sales
       , ${database}.${schema}.${prefix}date_dim
       WHERE (&quot;ws_item_sk&quot; = &quot;i_item_sk&quot;)
          AND (&quot;d_date&quot; BETWEEN CAST(&apos;2000-01-27&apos; AS DATE) AND (CAST(&apos;2000-01-27&apos; AS DATE) + INTERVAL  &apos;90&apos; DAY))
          AND (&quot;d_date_sk&quot; = &quot;ws_sold_date_sk&quot;)
    ))
 ORDER BY &quot;sum&quot;(&quot;ws_ext_discount_amt&quot;) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q93.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;ss_customer_sk&quot;
 , &quot;sum&quot;(&quot;act_sales&quot;) &quot;sumsales&quot;
 FROM
   (
    SELECT
      &quot;ss_item_sk&quot;
    , &quot;ss_ticket_number&quot;
    , &quot;ss_customer_sk&quot;
    , (CASE WHEN (&quot;sr_return_quantity&quot; IS NOT NULL) THEN ((&quot;ss_quantity&quot; - &quot;sr_return_quantity&quot;) * &quot;ss_sales_price&quot;) ELSE (&quot;ss_quantity&quot; * &quot;ss_sales_price&quot;) END) &quot;act_sales&quot;
    FROM
      (${database}.${schema}.${prefix}store_sales
    LEFT JOIN ${database}.${schema}.${prefix}store_returns ON (&quot;sr_item_sk&quot; = &quot;ss_item_sk&quot;)
       AND (&quot;sr_ticket_number&quot; = &quot;ss_ticket_number&quot;))
    , ${database}.${schema}.${prefix}reason
    WHERE (&quot;sr_reason_sk&quot; = &quot;r_reason_sk&quot;)
       AND (&quot;r_reason_desc&quot; = &apos;reason 28&apos;)
 )  t
 GROUP BY &quot;ss_customer_sk&quot;
 ORDER BY &quot;sumsales&quot; ASC, &quot;ss_customer_sk&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q94.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;count&quot;(DISTINCT &quot;ws_order_number&quot;) &quot;order count&quot;
 , &quot;sum&quot;(&quot;ws_ext_ship_cost&quot;) &quot;total shipping cost&quot;
 , &quot;sum&quot;(&quot;ws_net_profit&quot;) &quot;total net profit&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales ws1
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}web_site
 WHERE (&quot;d_date&quot; BETWEEN CAST(&apos;1999-2-01&apos; AS DATE) AND (CAST(&apos;1999-2-01&apos; AS DATE) + INTERVAL  &apos;60&apos; DAY))
    AND (&quot;ws1&quot;.&quot;ws_ship_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;ws1&quot;.&quot;ws_ship_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;ca_state&quot; = &apos;IL&apos;)
    AND (&quot;ws1&quot;.&quot;ws_web_site_sk&quot; = &quot;web_site_sk&quot;)
    AND (&quot;web_company_name&quot; = &apos;pri&apos;)
    AND (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}web_sales ws2
    WHERE (&quot;ws1&quot;.&quot;ws_order_number&quot; = &quot;ws2&quot;.&quot;ws_order_number&quot;)
       AND (&quot;ws1&quot;.&quot;ws_warehouse_sk&quot; &lt;&gt; &quot;ws2&quot;.&quot;ws_warehouse_sk&quot;)
 ))
    AND (NOT (EXISTS (
    SELECT *
    FROM
      ${database}.${schema}.${prefix}web_returns wr1
    WHERE (&quot;ws1&quot;.&quot;ws_order_number&quot; = &quot;wr1&quot;.&quot;wr_order_number&quot;)
 )))
 ORDER BY &quot;count&quot;(DISTINCT &quot;ws_order_number&quot;) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q95.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ws_wh AS (
    SELECT
      &quot;ws1&quot;.&quot;ws_order_number&quot;
    , &quot;ws1&quot;.&quot;ws_warehouse_sk&quot; &quot;wh1&quot;
    , &quot;ws2&quot;.&quot;ws_warehouse_sk&quot; &quot;wh2&quot;
    FROM
      ${database}.${schema}.${prefix}web_sales ws1
    , ${database}.${schema}.${prefix}web_sales ws2
    WHERE (&quot;ws1&quot;.&quot;ws_order_number&quot; = &quot;ws2&quot;.&quot;ws_order_number&quot;)
       AND (&quot;ws1&quot;.&quot;ws_warehouse_sk&quot; &lt;&gt; &quot;ws2&quot;.&quot;ws_warehouse_sk&quot;)
 ) 
 SELECT
   &quot;count&quot;(DISTINCT &quot;ws_order_number&quot;) &quot;order count&quot;
 , &quot;sum&quot;(&quot;ws_ext_ship_cost&quot;) &quot;total shipping cost&quot;
 , &quot;sum&quot;(&quot;ws_net_profit&quot;) &quot;total net profit&quot;
 FROM
   ${database}.${schema}.${prefix}web_sales ws1
 , ${database}.${schema}.${prefix}date_dim
 , ${database}.${schema}.${prefix}customer_address
 , ${database}.${schema}.${prefix}web_site
 WHERE (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;1999-2-01&apos; AS DATE) AND (CAST(&apos;1999-2-01&apos; AS DATE) + INTERVAL  &apos;60&apos; DAY))
    AND (&quot;ws1&quot;.&quot;ws_ship_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;ws1&quot;.&quot;ws_ship_addr_sk&quot; = &quot;ca_address_sk&quot;)
    AND (&quot;ca_state&quot; = &apos;IL&apos;)
    AND (&quot;ws1&quot;.&quot;ws_web_site_sk&quot; = &quot;web_site_sk&quot;)
    AND (&quot;web_company_name&quot; = &apos;pri&apos;)
    AND (&quot;ws1&quot;.&quot;ws_order_number&quot; IN (
    SELECT &quot;ws_order_number&quot;
    FROM
      ws_wh
 ))
    AND (&quot;ws1&quot;.&quot;ws_order_number&quot; IN (
    SELECT &quot;wr_order_number&quot;
    FROM
      ${database}.${schema}.${prefix}web_returns
    , ws_wh
    WHERE (&quot;wr_order_number&quot; = &quot;ws_wh&quot;.&quot;ws_order_number&quot;)
 ))
 ORDER BY &quot;count&quot;(DISTINCT &quot;ws_order_number&quot;) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q96.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT &quot;count&quot;(*)
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}household_demographics
 , ${database}.${schema}.${prefix}time_dim
 , ${database}.${schema}.${prefix}store
 WHERE (&quot;ss_sold_time_sk&quot; = &quot;${prefix}time_dim&quot;.&quot;t_time_sk&quot;)
    AND (&quot;ss_hdemo_sk&quot; = &quot;${prefix}household_demographics&quot;.&quot;hd_demo_sk&quot;)
    AND (&quot;ss_store_sk&quot; = &quot;s_store_sk&quot;)
    AND (&quot;${prefix}time_dim&quot;.&quot;t_hour&quot; = 20)
    AND (&quot;${prefix}time_dim&quot;.&quot;t_minute&quot; &gt;= 30)
    AND (&quot;${prefix}household_demographics&quot;.&quot;hd_dep_count&quot; = 7)
    AND (&quot;${prefix}store&quot;.&quot;s_store_name&quot; = &apos;ese&apos;)
 ORDER BY &quot;count&quot;(*) ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q97.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE WITH
   ssci AS (
    SELECT
      &quot;ss_customer_sk&quot; &quot;customer_sk&quot;
    , &quot;ss_item_sk&quot; &quot;item_sk&quot;
    FROM
      ${database}.${schema}.${prefix}store_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    GROUP BY &quot;ss_customer_sk&quot;, &quot;ss_item_sk&quot;
 ) 
 , csci AS (
    SELECT
      &quot;cs_bill_customer_sk&quot; &quot;customer_sk&quot;
    , &quot;cs_item_sk&quot; &quot;item_sk&quot;
    FROM
      ${database}.${schema}.${prefix}catalog_sales
    , ${database}.${schema}.${prefix}date_dim
    WHERE (&quot;cs_sold_date_sk&quot; = &quot;d_date_sk&quot;)
       AND (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    GROUP BY &quot;cs_bill_customer_sk&quot;, &quot;cs_item_sk&quot;
 ) 
 SELECT
   &quot;sum&quot;((CASE WHEN (&quot;ssci&quot;.&quot;customer_sk&quot; IS NOT NULL)
    AND (&quot;csci&quot;.&quot;customer_sk&quot; IS NULL) THEN 1 ELSE 0 END)) &quot;store_only&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;ssci&quot;.&quot;customer_sk&quot; IS NULL)
    AND (&quot;csci&quot;.&quot;customer_sk&quot; IS NOT NULL) THEN 1 ELSE 0 END)) &quot;catalog_only&quot;
 , &quot;sum&quot;((CASE WHEN (&quot;ssci&quot;.&quot;customer_sk&quot; IS NOT NULL)
    AND (&quot;csci&quot;.&quot;customer_sk&quot; IS NOT NULL) THEN 1 ELSE 0 END)) &quot;store_and_catalog&quot;
 FROM
   (ssci
 FULL JOIN csci ON (&quot;ssci&quot;.&quot;customer_sk&quot; = &quot;csci&quot;.&quot;customer_sk&quot;)
    AND (&quot;ssci&quot;.&quot;item_sk&quot; = &quot;csci&quot;.&quot;item_sk&quot;))
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q98.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;i_item_id&quot;
 , &quot;i_item_desc&quot;
 , &quot;i_category&quot;
 , &quot;i_class&quot;
 , &quot;i_current_price&quot;
 , &quot;sum&quot;(&quot;ss_ext_sales_price&quot;) &quot;${database}.${schema}.${prefix}itemrevenue&quot;
 , ((&quot;sum&quot;(&quot;ss_ext_sales_price&quot;) * 100) / &quot;sum&quot;(&quot;sum&quot;(&quot;ss_ext_sales_price&quot;)) OVER (PARTITION BY &quot;i_class&quot;)) &quot;revenueratio&quot;
 FROM
   ${database}.${schema}.${prefix}store_sales
 , ${database}.${schema}.${prefix}item
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;ss_item_sk&quot; = &quot;i_item_sk&quot;)
    AND (&quot;i_category&quot; IN (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;))
    AND (&quot;ss_sold_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (CAST(&quot;d_date&quot; AS DATE) BETWEEN CAST(&apos;1999-02-22&apos; AS DATE) AND (CAST(&apos;1999-02-22&apos; AS DATE) + INTERVAL  &apos;30&apos; DAY))
 GROUP BY &quot;i_item_id&quot;, &quot;i_item_desc&quot;, &quot;i_category&quot;, &quot;i_class&quot;, &quot;i_current_price&quot;
 ORDER BY &quot;i_category&quot; ASC, &quot;i_class&quot; ASC, &quot;i_item_id&quot; ASC, &quot;i_item_desc&quot; ASC, &quot;revenueratio&quot; ASC

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q99.sql" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">EXPLAIN ANALYZE SELECT
   &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20)
 , &quot;sm_type&quot;
 , &quot;cc_name&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &lt;= 30) THEN 1 ELSE 0 END)) &quot;30 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &gt; 30)
    AND ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &lt;= 60) THEN 1 ELSE 0 END)) &quot;31-60 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &gt; 60)
    AND ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &lt;= 90) THEN 1 ELSE 0 END)) &quot;61-90 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &gt; 90)
    AND ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &lt;= 120) THEN 1 ELSE 0 END)) &quot;91-120 days&quot;
 , &quot;sum&quot;((CASE WHEN ((&quot;cs_ship_date_sk&quot; - &quot;cs_sold_date_sk&quot;) &gt; 120) THEN 1 ELSE 0 END)) &quot;&gt;120 days&quot;
 FROM
   ${database}.${schema}.${prefix}catalog_sales
 , ${database}.${schema}.${prefix}warehouse
 , ${database}.${schema}.${prefix}ship_mode
 , ${database}.${schema}.${prefix}call_center
 , ${database}.${schema}.${prefix}date_dim
 WHERE (&quot;d_month_seq&quot; BETWEEN 1200 AND (1200 + 11))
    AND (&quot;cs_ship_date_sk&quot; = &quot;d_date_sk&quot;)
    AND (&quot;cs_warehouse_sk&quot; = &quot;w_warehouse_sk&quot;)
    AND (&quot;cs_ship_mode_sk&quot; = &quot;sm_ship_mode_sk&quot;)
    AND (&quot;cs_call_center_sk&quot; = &quot;cc_call_center_sk&quot;)
 GROUP BY &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20), &quot;sm_type&quot;, &quot;cc_name&quot;
 ORDER BY &quot;substr&quot;(&quot;w_warehouse_name&quot;, 1, 20) ASC, &quot;sm_type&quot; ASC, &quot;cc_name&quot; ASC
 LIMIT 100

        </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows">10</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
