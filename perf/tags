!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Counter	loadgen.py	/^class Counter:$/;"	c
QueryErrorException	test_harness.py	/^class QueryErrorException(Exception):$/;"	c
__init__	loadgen.py	/^    def __init__(self):$/;"	m	class:Counter
average_latency	test_harness.py	/^def average_latency(filenames: list[str]) -> float:$/;"	f
build_logfile_dict	test_harness.py	/^def build_logfile_dict():$/;"	f
cluster_is_stable	test_harness.py	/^def cluster_is_stable(old_nodes):$/;"	f
concur_l	summarise.py	/^concur_l = 'Concurrency'$/;"	v
dec	loadgen.py	/^    def dec(self):$/;"	m	class:Counter
email_status_update	test_harness.py	/^    def email_status_update(msg: str, results: list[str]) -> None:$/;"	f	function:main
filename_re	test_harness.py	/^filename_re = re.compile(r'(tpcds_u)(\\d\\d?\\d?)(_)(sf\\d\\d?\\d?)(_)(\\d\\d?)'$/;"	v
generate_cmd	test_harness.py	/^    def generate_cmd(t, s, nl) -> str:$/;"	f	function:main
getCount	loadgen.py	/^    def getCount(self):$/;"	m	class:Counter
get_best_existing_logfile	test_harness.py	/^def get_best_existing_logfile(logfile_dict, prefix, numthreads) -> list[str]:$/;"	f
get_most_recent	summarise.py	/^def get_most_recent(filenames: list[str]) -> str:$/;"	f
get_nodes	test_harness.py	/^def get_nodes():$/;"	f
get_unready_pods	test_harness.py	/^def get_unready_pods():$/;"	f
inc	loadgen.py	/^    def inc(self):$/;"	m	class:Counter
last	loadgen.py	/^        last = now$/;"	v
last	loadgen.py	/^last = time.time()$/;"	v
lock	loadgen.py	/^lock = threading.Lock()$/;"	v
logfile_completed	test_harness.py	/^def logfile_completed(filename, numthreads):$/;"	f
logfile_dict	summarise.py	/^logfile_dict = build_logfile_dict()$/;"	v
main	summarise.py	/^def main() -> None:$/;"	f
main	test_harness.py	/^def main():$/;"	f
newconnectionpause	loadgen.py	/^newconnectionpause = 0.1$/;"	v
newquerypause	loadgen.py	/^newquerypause = 0.0$/;"	v
nq	loadgen.py	/^nq = Counter()$/;"	v
numloops	summarise.py	/^numloops=1$/;"	v
numloops	test_harness.py	/^numloops = 1$/;"	v
numthreadcount	summarise.py	/^numthreadcount = 8$/;"	v
nworkers	test_harness.py	/^nworkers = 8$/;"	v
queries	loadgen.py	/^queries = [ "select max(nationkey) from s3.s.nation",$/;"	v
reportingpause	loadgen.py	/^reportingpause = 1.0$/;"	v
runme	loadgen.py	/^def runme():$/;"	f
send_email	test_harness.py	/^def send_email(address, body):$/;"	f
sizes	summarise.py	/^sizes = (1, 10, 100, 200, 400)$/;"	v
sizes_str	summarise.py	/^sizes_str = list(map(str, sizes))$/;"	v
t	loadgen.py	/^        t = threading.Thread(target = runme)$/;"	v
testrun_add_re	test_harness.py	/^testrun_add_re = re.compile(r'^(summary\\s+\\+\\s+)(\\d+)(.*)$')$/;"	v
testrun_re	test_harness.py	/^testrun_re = re.compile(r'^(summary\\s+=\\s+)(\\d+)(.*)$')$/;"	v
threadpoolsize	loadgen.py	/^threadpoolsize = 200$/;"	v
threads	summarise.py	/^threads = list(map(lambda x: 2**x, range(numthreadcount)))$/;"	v
wait_until_cluster_stable	test_harness.py	/^def wait_until_cluster_stable():$/;"	f
