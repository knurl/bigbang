!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/rob/git/bigbang/perf/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
ApiError	../sql.py	/^class ApiError(Exception):$/;"	c
AwsCreds	../creds.py	/^class AwsCreds(Creds):$/;"	c
CommandGroup	../cmdgrp.py	/^class CommandGroup:$/;"	c
ContAlloc	../capcalc.py	/^    ContAlloc = namedtuple('ContAlloc', ['cname', 'cpu', 'mem'])$/;"	v	class:NodeResource
Counter	loadgen.py	/^class Counter:$/;"	c
Creds	../creds.py	/^class Creds(ABC):$/;"	c
InsufficientResource	../capcalc.py	/^class InsufficientResource(Exception):$/;"	c
KubeContextError	../bigbang.py	/^class KubeContextError(Exception):$/;"	c
NodeResource	../capcalc.py	/^class NodeResource:$/;"	c
QueryErrorException	test_harness.py	/^class QueryErrorException(Exception):$/;"	c
ScaleSets	../tpc.py	/^class ScaleSets:$/;"	c
TpcCatInfo	../tpc.py	/^class TpcCatInfo:$/;"	c
Tunnel	../bigbang.py	/^class Tunnel:$/;"	c
__del__	../bigbang.py	/^    def __del__(self):$/;"	m	class:Tunnel
__init__	../bigbang.py	/^    def __init__(self, shortname: str, bastionIp: ipaddress.IPv4Address,$/;"	m	class:Tunnel
__init__	../capcalc.py	/^    def __init__(self, cpuleft, memleft):$/;"	m	class:NodeResource
__init__	../cmdgrp.py	/^    def __init__(self, url: str, ssl: bool, user: str, pwd: str):$/;"	m	class:CommandGroup
__init__	../creds.py	/^    def __init__(self):$/;"	m	class:AwsCreds
__init__	../creds.py	/^    def __init__(self, accesskey: str, secret: str):$/;"	m	class:Creds
__init__	../tpc.py	/^    def __init__(self,$/;"	m	class:TpcCatInfo
__init__	loadgen.py	/^    def __init__(self):$/;"	m	class:Counter
__repr__	../capcalc.py	/^    def __repr__(self):$/;"	m	class:NodeResource
__str__	../bigbang.py	/^    def __str__(self):$/;"	m	class:Tunnel
accountSbCpu	../capcalc.py	/^    def accountSbCpu(nn: str, cn: str, cpu: int):$/;"	f	function:getMinNodeResources	file:
accountSbMem	../capcalc.py	/^    def accountSbMem(nn: str, cn: str, mem: int):$/;"	f	function:getMinNodeResources	file:
addCont	../capcalc.py	/^    def addCont(self, podname, contname, cpu, mem):$/;"	m	class:NodeResource
addSqlCommand	../cmdgrp.py	/^    def addSqlCommand(self, cmd, callback = None,$/;"	m	class:CommandGroup	typeref:typename:None
addSqlCommands	../cmdgrp.py	/^    def addSqlCommands(self, cmds: list[str]) -> None:$/;"	m	class:CommandGroup	typeref:typename:None
addSqlTableCommand	../cmdgrp.py	/^    def addSqlTableCommand(self, tpcds_cat_info, tpcdsSchema: str, srcTable:$/;"	m	class:CommandGroup	typeref:typename:None
allCommandsDone	../cmdgrp.py	/^    def allCommandsDone(self) -> bool:$/;"	m	class:CommandGroup	typeref:typename:bool
allocateResources	../capcalc.py	/^def allocateResources(nodeCount: int, mincpu: int, minmem: int, namespace: str,$/;"	f	typeref:typename:list[NodeResource]
announce	../out.py	/^def announce(s: str) -> None:$/;"	f	typeref:typename:None
announceBox	../out.py	/^def announceBox(s: str) -> None:$/;"	f	typeref:typename:None
announceLoud	../out.py	/^def announceLoud(lines: list[str]) -> None:$/;"	f	typeref:typename:None
announceReady	../bigbang.py	/^def announceReady(bastionIp: str) -> list[str]:$/;"	f	typeref:typename:list[str]
announceSqlEnd	../out.py	/^def announceSqlEnd(s: str) -> None:$/;"	f	typeref:typename:None
announceSqlStart	../out.py	/^def announceSqlStart(s: str) -> None:$/;"	f	typeref:typename:None
announceSummary	../bigbang.py	/^def announceSummary() -> None:$/;"	f	typeref:typename:None
appendToFile	../bigbang.py	/^def appendToFile(filepath, contents) -> None:$/;"	f	typeref:typename:None
atscale	../tpc.py	/^    def atscale(self, scale: int):$/;"	m	class:ScaleSets
authnldap	../bigbang.py	/^    authnldap    = myvars[authnldaplabel] # AuthNLdap$/;"	v
authnldaplabel	../bigbang.py	/^authnldaplabel  = "AuthNLdap"$/;"	v
average_latency	test_harness.py	/^def average_latency(filenames: list[str]) -> float:$/;"	f	typeref:typename:float
awsconfig	../creds.py	/^awsconfig      = os.path.expanduser("~\/.aws\/config")$/;"	v
awscreds	../creds.py	/^awscreds       = os.path.expanduser("~\/.aws\/credentials")$/;"	v
awsdir	../creds.py	/^awsdir         = os.path.expanduser("~\/.aws")$/;"	v
azArchiveDirectories	../bigbang.py	/^def azArchiveDirectories(accountName: str, accessKey: str,$/;"	f	typeref:typename:None
azaddrs	../bigbang.py	/^    azaddrs = { "bastion": ns.azaddrs[0], "starburst": ns.azaddrs[1] }$/;"	v
azaddrs	../bigbang.py	/^azaddrs = None$/;"	v
bastionfqdn	../bigbang.py	/^bastionfqdn    = "bastion." + domain$/;"	v
bastlaunchf	../bigbang.py	/^bastlaunchf    = bbio.where("bastlaunch.sh")$/;"	v
bucket	../bigbang.py	/^bucket = shortname + "bk"$/;"	v
buildBastionLauncher	../bigbang.py	/^def buildBastionLauncher() -> None:$/;"	f	typeref:typename:None
buildLdapLauncher	../bigbang.py	/^def buildLdapLauncher(fqdn: str) -> None:$/;"	f	typeref:typename:None
build_logfile_dict	test_harness.py	/^def build_logfile_dict(nworkers: int) -> dict[str, list[str]]:$/;"	f	typeref:typename:dict[str,list[str]]
cacheschema	../bigbang.py	/^cacheschema    = "cache"$/;"	v
cachesrv_enabled	../bigbang.py	/^    cachesrv_enabled = sfdcenabled$/;"	v
canFit	../capcalc.py	/^    def canFit(self, cpu, mem):$/;"	m	class:NodeResource
capacityType	../bigbang.py	/^    capacityType = myvars[captypelabel]$/;"	v
capacitytypes	../bigbang.py	/^capacitytypes   = {"Spot", "OnDemand"}$/;"	v
captypelabel	../bigbang.py	/^captypelabel    = "CapacityType"$/;"	v
cbs	../tpc.py	/^                            def cbs(stats):$/;"	f	function:TpcCatInfo.__init__.make_cbs	file:
cd	../out.py	/^    cd = lambda x: colored(x, 'red')$/;"	f	function:spinWait	file:
charts	../bigbang.py	/^charts = {}$/;"	v
chartversion	../bigbang.py	/^    chartversion = myvars[chartvlabel] # ChartVersion$/;"	v
chartvlabel	../bigbang.py	/^chartvlabel     = "ChartVersion"$/;"	v
checkCopiedTable	../cmdgrp.py	/^    def checkCopiedTable(self, dstCatalog: str, dstSchema: str, dstTable: str,$/;"	m	class:CommandGroup	typeref:typename:None
checkEtcHosts	../bigbang.py	/^def checkEtcHosts() -> None:$/;"	f	typeref:typename:None
checkRSAKey	../bigbang.py	/^def checkRSAKey() -> None:$/;"	f	typeref:typename:None
cleanOldTunnels	../bigbang.py	/^def cleanOldTunnels() -> None:$/;"	f	typeref:typename:None
clouds	../bigbang.py	/^clouds         = ("aws", "az", "gcp")$/;"	v
cluster_is_stable	test_harness.py	/^def cluster_is_stable(nworkers: int,$/;"	f	typeref:typename:bool
clustname	../bigbang.py	/^clustname = shortname + "cl"$/;"	v
code	../bigbang.py	/^code = username[:codelen]$/;"	v
codelen	../bigbang.py	/^codelen = min(3, len(username))$/;"	v
compare_sets	test_harness.py	/^def compare_sets(old: set[str], new: set[str]) -> str:$/;"	f	typeref:typename:str
components	../bigbang.py	/^components = chartversion.split('.')$/;"	v
concur_l	summarise.py	/^concur_l = 'Concurrency'$/;"	v
contsForPod	../capcalc.py	/^contsForPod: dict[str, list[str]] = {$/;"	v	typeref:typename:dict[str, list[str]]
copySchemaTables	../bigbang.py	/^def copySchemaTables(env: dict, tpc_cat_info: tpc.TpcCatInfo, srcCatalog: str,$/;"	f
countUp	../out.py	/^    def countUp(maxinc: float) -> float:$/;"	f	function:spinWaitTest	typeref:typename:float	file:
cp	../out.py	/^    cp = lambda x: cprint(x, 'green', attrs = ['bold'])$/;"	f	function:announceLoud	file:
cp	../out.py	/^    cp = lambda x: cprint(x, 'magenta', attrs = ['bold'])$/;"	f	function:announceBox	file:
create_schema	../bigbang.py	/^def create_schema(dst_catalog: str, dst_schema: str, hive_target: str):$/;"	f
dbInstanceType	../bigbang.py	/^    dbInstanceType    = myvars["AwsDbInstanceType"]$/;"	v
dbInstanceType	../bigbang.py	/^    dbInstanceType    = myvars["AzureDbVmType"]$/;"	v
dbInstanceType	../bigbang.py	/^    dbInstanceType    = myvars["GcpDbMachineType"]$/;"	v
dbInstanceType	../bigbang.py	/^dbInstanceType = ""$/;"	v
dbcachesrv	../bigbang.py	/^dbcachesrv     = "cachesrv" # cache service persistent database$/;"	v
dbevtlog	../bigbang.py	/^dbevtlog       = "evtlog" # event logger PostgreSQL database$/;"	v
dbhms	../bigbang.py	/^dbhms          = "hms" # Hive metastore persistent database$/;"	v
dbports	../bigbang.py	/^dbports        = { "mysql": 3306, "postgres": 5432 }$/;"	v
dbpwd	../bigbang.py	/^dbpwd          = "a029fjg!>dugBiO8"$/;"	v
dbschema	../bigbang.py	/^dbschema       = "s"$/;"	v
dbuser	../bigbang.py	/^dbuser         = "starburstuser"$/;"	v
ddict2tab	../capcalc.py	/^    def ddict2tab():$/;"	f	function:getMinNodeResources	file:
dec	loadgen.py	/^    def dec(self):$/;"	m	class:Counter
deleteAllServices	../bigbang.py	/^def deleteAllServices() -> dict[str, str]:$/;"	f	typeref:typename:dict[str,str]
deltacat	../bigbang.py	/^deltacat = "delta"$/;"	v
divideOrZero	../bigbang.py	/^def divideOrZero(x: int, y: int) -> float:$/;"	f	typeref:typename:float
domain	../bigbang.py	/^domain         = "az.starburstdata.net"$/;"	v
dontLoadCat	../bigbang.py	/^def dontLoadCat(cat: str) -> bool:$/;"	f	typeref:typename:bool
downstreamSG	../bigbang.py	/^        downstreamSG = True$/;"	v
downstreamSG	../bigbang.py	/^downstreamSG = False$/;"	v
dumpNodesAndPods	../capcalc.py	/^    def dumpNodesAndPods() -> None:$/;"	f	function:getMinNodeResources	typeref:typename:None	file:
email	../bigbang.py	/^    email        = myvars["Email"]$/;"	v
email_status_update	test_harness.py	/^    def email_status_update(msg: str, results: list[str]) -> None:$/;"	f	function:main	typeref:typename:None	file:
emailparts	../bigbang.py	/^emailparts = email.split('@')$/;"	v
emitSshTunnel	../bigbang.py	/^            def emitSshTunnel(wh, bindaddr: ipaddress.IPv4Address, lclport:$/;"	f	function:buildBastionLauncher	file:
ensureClusterIsStarted	../bigbang.py	/^def ensureClusterIsStarted(skipClusterStart: bool) -> \\$/;"	f	typeref:typename:tuple[list[Tunnel],dict]
ensureHelmRepoSetUp	../bigbang.py	/^def ensureHelmRepoSetUp(repo: str) -> None:$/;"	f	typeref:typename:None
eraseBucketContents	../bigbang.py	/^def eraseBucketContents(env: dict) -> None:$/;"	f	typeref:typename:None
eraseLine	../out.py	/^    def eraseLine(flush: bool = False):$/;"	f	function:spinWait	file:
establishBastionTunnel	../bigbang.py	/^def establishBastionTunnel(env: dict) -> list[Tunnel]:$/;"	f	typeref:typename:list[Tunnel]
evtlogcat	../bigbang.py	/^evtlogcat      = "evtlog" # catalog name for event logger$/;"	v
execute_sql_commands	../bigbang.py	/^def execute_sql_commands(cmds: list[str]):$/;"	f
f	../bigbang.py	/^    f = lambda: run(cmd.split(), check = True, verbose = False)$/;"	f	function:establishBastionTunnel	file:
f	../sql.py	/^        f = lambda: requests.get(j["nextUri"], headers = hdr, verify = None)$/;"	f	function:sendSql	file:
f	../sql.py	/^    f = lambda: requests.post(url, headers = hdr, auth = authtype, data =$/;"	f	function:sendSql	file:
filename_re	test_harness.py	/^def filename_re(nworkers: int):$/;"	f
filename_regexp	test_harness.py	/^def filename_regexp(nworkers: int) -> str:$/;"	f	typeref:typename:str
fqdnToDc	../bigbang.py	/^def fqdnToDc(fqdn: str) -> str:$/;"	f	typeref:typename:str
gcpaccount	../bigbang.py	/^    gcpaccount = runCollect("gcloud config list --format "$/;"	v
gcpaccount	../bigbang.py	/^gcpaccount = ""$/;"	v
gcpaddrs	../bigbang.py	/^    gcpaddrs = { "bastion": ns.gcpaddrs[0], "starburst": ns.gcpaddrs[1] }$/;"	v
gcpaddrs	../bigbang.py	/^gcpaddrs = None$/;"	v
gcpproject	../bigbang.py	/^    gcpproject = runCollect("gcloud config list --format "$/;"	v
gcpproject	../bigbang.py	/^gcpproject = ""$/;"	v
generate_cmd	test_harness.py	/^    def generate_cmd(t, s, nl) -> str:$/;"	f	function:main	typeref:typename:str	file:
genmask	../bigbang.py	/^def genmask(target, octet):$/;"	f
getAccessKeyName	../creds.py	/^    def getAccessKeyName(self) -> str:$/;"	m	class:AwsCreds	typeref:typename:str
getAccessKeyName	../creds.py	/^    def getAccessKeyName(self) -> str:$/;"	m	class:Creds	typeref:typename:str
getCatalogs	../bigbang.py	/^def getCatalogs(avoid: list[str] = []) -> list[str]:$/;"	f	typeref:typename:list[str]
getCloudSummary	../bigbang.py	/^def getCloudSummary() -> List[str]:$/;"	f	typeref:typename:List[str]
getCount	loadgen.py	/^    def getCount(self):$/;"	m	class:Counter
getCreds	../creds.py	/^def getCreds(target: str) -> Optional[Creds]:$/;"	f	typeref:typename:Optional[Creds]
getGroup	../bigbang.py	/^def getGroup(name: str, gidNum: int, dcs: str, members: list[str]) -> str:$/;"	f	typeref:typename:str
getLclPort	../bigbang.py	/^def getLclPort(service: str) -> int:$/;"	f	typeref:typename:int
getLclPortSG	../bigbang.py	/^def getLclPortSG(service: str, target: str) -> int:$/;"	f	typeref:typename:int
getLoadBalancers	../bigbang.py	/^def getLoadBalancers(services: list, namespace: str) -> dict[str, str]:$/;"	f	typeref:typename:dict[str,str]
getMinNodeResources	../capcalc.py	/^def getMinNodeResources(namespace: str, verbose: bool = False) -> tuple:$/;"	f	typeref:typename:tuple
getMyPublicIp	../bigbang.py	/^def getMyPublicIp() -> ipaddress.IPv4Address:$/;"	f	typeref:typename:ipaddress.IPv4Address
getObjectStoreUrl	../bigbang.py	/^def getObjectStoreUrl(env: dict) -> str:$/;"	f	typeref:typename:str
getOu	../bigbang.py	/^def getOu(outype: str, dcs: str) -> str:$/;"	f	typeref:typename:str
getOutputVars	../bigbang.py	/^def getOutputVars() -> dict:$/;"	f	typeref:typename:dict
getOverlays	../bigbang.py	/^def getOverlays() -> str:$/;"	f	typeref:typename:str
getRegionFromZone	../bigbang.py	/^def getRegionFromZone(zone: str) -> str:$/;"	f	typeref:typename:str
getRmtPort	../bigbang.py	/^def getRmtPort(service: str) -> int:$/;"	f	typeref:typename:int
getSchemasInCatalog	../bigbang.py	/^def getSchemasInCatalog(catalog: str) -> list[str]:$/;"	f	typeref:typename:list[str]
getSecretName	../creds.py	/^    def getSecretName(self) -> str:$/;"	m	class:AwsCreds	typeref:typename:str
getSecretName	../creds.py	/^    def getSecretName(self) -> str:$/;"	m	class:Creds	typeref:typename:str
getSecrets	../bigbang.py	/^def getSecrets() -> None:$/;"	f	typeref:typename:None
getSshPublicKey	../bigbang.py	/^def getSshPublicKey() -> str:$/;"	f	typeref:typename:str
getStarburstHttpUrl	../bigbang.py	/^def getStarburstHttpUrl() -> str:$/;"	f	typeref:typename:str
getStarburstUrl	../bigbang.py	/^def getStarburstUrl() -> str:$/;"	f	typeref:typename:str
getTablesForSchemaCatalog	../bigbang.py	/^def getTablesForSchemaCatalog(schema: str, catalog: str) -> list[str]:$/;"	f	typeref:typename:list[str]
getUser	../bigbang.py	/^def getUser(user: str, uid: int, gid: int, dcs: str) -> str:$/;"	f	typeref:typename:str
get_best_existing_logfile	test_harness.py	/^def get_best_existing_logfile(logfile_dict, prefix, numthreads) -> list[str]:$/;"	f	typeref:typename:list[str]
get_cat_name	../tpc.py	/^    def get_cat_name(self) -> str:$/;"	m	class:TpcCatInfo	typeref:typename:str
get_command_group	../bigbang.py	/^def get_command_group() -> cmdgrp.CommandGroup:$/;"	f	typeref:typename:cmdgrp.CommandGroup
get_most_recent	summarise.py	/^def get_most_recent(filenames: list[str]) -> str:$/;"	f	typeref:typename:str
get_ready_nodes	../ready.py	/^def get_ready_nodes() -> set[str]:$/;"	f	typeref:typename:set[str]
get_ready_pods	../ready.py	/^def get_ready_pods(namespace: str = "") -> set[str]:$/;"	f	typeref:typename:set[str]
get_schema_and_drop	../bigbang.py	/^def get_schema_and_drop(env: dict, tpc_cat_info: tpc.TpcCatInfo,$/;"	f
get_schema_commands	../bigbang.py	/^def get_schema_commands(dstCatalogs: list,$/;"	f	typeref:typename:tuple[list[str],list[str],list[str]]
get_table_names	../tpc.py	/^    def get_table_names(self) -> Set[str]:$/;"	m	class:TpcCatInfo	typeref:typename:Set[str]
get_table_size	../tpc.py	/^    def get_table_size(self, scale_set: str, table_name: str) -> int:$/;"	m	class:TpcCatInfo	typeref:typename:int
get_tunnel_procs	../bigbang.py	/^    def get_tunnel_procs():$/;"	f	function:cleanOldTunnels	file:
helm	../bigbang.py	/^def helm(cmd: str) -> None:$/;"	f	typeref:typename:None
helmCreateNamespace	../bigbang.py	/^def helmCreateNamespace() -> None:$/;"	f	typeref:typename:None
helmDeleteNamespace	../bigbang.py	/^def helmDeleteNamespace() -> None:$/;"	f	typeref:typename:None
helmGet	../bigbang.py	/^def helmGet(cmd: str) -> str:$/;"	f	typeref:typename:str
helmGetNamespaces	../bigbang.py	/^def helmGetNamespaces() -> list:$/;"	f	typeref:typename:list
helmGetReleases	../bigbang.py	/^def helmGetReleases() -> dict:$/;"	f	typeref:typename:dict
helmInstallAll	../bigbang.py	/^def helmInstallAll(env):$/;"	f
helmInstallRelease	../bigbang.py	/^def helmInstallRelease(module: str, env: dict = {}) -> None:$/;"	f	typeref:typename:None
helmTry	../bigbang.py	/^def helmTry(cmd: str) -> subprocess.CompletedProcess:$/;"	f	typeref:typename:subprocess.CompletedProcess
helmUninstallAll	../bigbang.py	/^def helmUninstallAll():$/;"	f
helmUninstallRelease	../bigbang.py	/^def helmUninstallRelease(release: str) -> None:$/;"	f	typeref:typename:None
helmWhichChartInstalled	../bigbang.py	/^def helmWhichChartInstalled(module: str) -> Optional[str]:$/;"	f	typeref:typename:Optional[str]
helmcreds	../bigbang.py	/^        helmcreds = yaml.load(mypf, Loader = yaml.FullLoader)$/;"	v
helmcredsf	../bigbang.py	/^helmcredsf  = bbio.where("helm-creds.yaml")$/;"	v
helmns	../bigbang.py	/^helmns         = f"-n {namespace}"$/;"	v
hivecat	../bigbang.py	/^    hivecat   = "adls"$/;"	v
hivecat	../bigbang.py	/^    hivecat   = "gcs"$/;"	v
hivecat	../bigbang.py	/^    hivecat   = "s3"$/;"	v
hostsf	../bigbang.py	/^hostsf         = "\/etc\/hosts"$/;"	v
inc	loadgen.py	/^    def inc(self):$/;"	m	class:Counter
ingresslb	../bigbang.py	/^    ingresslb    = myvars[ingresslblabel] # ExternalLoadBalancer$/;"	v
ingresslblabel	../bigbang.py	/^ingresslblabel  = "IngressLoadBalancer"$/;"	v
ingressname	../bigbang.py	/^ingressname    = "sb-ingress"$/;"	v
installSecrets	../bigbang.py	/^def installSecrets(secrets: dict[str, dict[str, str]]) -> dict[str, str]:$/;"	f	typeref:typename:dict[str,str]
instanceTypes	../bigbang.py	/^        instanceTypes = myvars["AwsInstanceTypes"][capacityType]$/;"	v
instanceTypes	../bigbang.py	/^        instanceTypes = myvars["AwsPerfInstanceTypes"]$/;"	v
instanceTypes	../bigbang.py	/^    instanceTypes     = myvars["AzureVmTypes"][capacityType]$/;"	v
instanceTypes	../bigbang.py	/^    instanceTypes     = myvars["GcpMachineTypes"][capacityType]$/;"	v
instanceTypes	../bigbang.py	/^instanceTypes: list[str] = []$/;"	v	typeref:typename:list[str]
invalidchars	../bigbang.py	/^invalidchars = r'[^' + validchars + r']'$/;"	v
isTerraformSettled	../bigbang.py	/^def isTerraformSettled() -> bool:$/;"	f	typeref:typename:bool
isTokenFresh	../creds.py	/^    def isTokenFresh(self, awsAccess: str) -> bool:$/;"	m	class:AwsCreds	typeref:typename:bool
json2str	../capcalc.py	/^def json2str(jsondict):$/;"	f
keystorepass	../bigbang.py	/^keystorepass   = "test123"$/;"	v
killAllTerminatingPods	../bigbang.py	/^def killAllTerminatingPods() -> None:$/;"	f	typeref:typename:None
knownhosts	../bigbang.py	/^knownhosts     = os.path.expanduser("~\/.ssh\/known_hosts")$/;"	v
kube	../bigbang.py	/^kube           = "kubectl"$/;"	v
kube	../capcalc.py	/^kube = "kubectl"$/;"	v
kubens	../bigbang.py	/^kubens         = f"{kube} -n {namespace}"$/;"	v
lakecats	../bigbang.py	/^lakecats = { hivecat, deltacat }$/;"	v
largest	../tpc.py	/^    def largest(self) -> str:$/;"	m	class:ScaleSets	typeref:typename:str
last	loadgen.py	/^        last = now$/;"	v
last	loadgen.py	/^last = time.time()$/;"	v
ldapfqdn	../bigbang.py	/^ldapfqdn       = "ldap." + domain$/;"	v
ldaplaunchf	../bigbang.py	/^ldaplaunchf    = bbio.where("ldaplaunch.sh")$/;"	v
ldapsetupf	../bigbang.py	/^ldapsetupf     = bbio.where("install-slapd.sh")$/;"	v
loadBalancerResponding	../bigbang.py	/^def loadBalancerResponding(service: str) -> bool:$/;"	f	typeref:typename:bool
loadDatabases	../bigbang.py	/^def loadDatabases(env: dict, perftest: bool, tpcds_cat_info: tpc.TpcCatInfo,$/;"	f	typeref:typename:None
localhost	../bigbang.py	/^localhost      = "localhost"$/;"	v
localhostip	../bigbang.py	/^localhostip    = "127.0.0.1"$/;"	v
lock	loadgen.py	/^lock = threading.Lock()$/;"	v
logfile_completed	test_harness.py	/^def logfile_completed(filename, numthreads):$/;"	f
main	../bigbang.py	/^def main() -> None:$/;"	f	typeref:typename:None
main	summarise.py	/^def main() -> None:$/;"	f	typeref:typename:None
main	test_harness.py	/^def main():$/;"	f
makeTable	../capcalc.py	/^        def makeTable(d, key):$/;"	f	function:getMinNodeResources	file:
makeTable	../capcalc.py	/^        def makeTable(nodeResources, getleaf):$/;"	f	function:planWorkerSize	file:
make_cbs	../tpc.py	/^                        def make_cbs(b, scale_set, table_name):$/;"	f	member:TpcCatInfo.__init__	file:
maxpodpnode	../bigbang.py	/^maxpodpnode    = 32$/;"	v
minCpuPerPod	../capcalc.py	/^minCpuPerPod: dict[str, int] = {$/;"	v	typeref:typename:dict[str, int]
minMemPerPod	../capcalc.py	/^minMemPerPod: dict[str, int] = {$/;"	v	typeref:typename:dict[str, int]
minNodes	../bigbang.py	/^minNodes       = 3 # See getMinNodeResources(); allows rolling upgrades$/;"	v
minbucketsize	../bigbang.py	/^minbucketsize  = 1 << 12$/;"	v
modules	../bigbang.py	/^modules = ['enterprise']$/;"	v
myDir	../bbio.py	/^def myDir():$/;"	f
mySubnetCidr	../bigbang.py	/^mySubnetCidr = genmask(target, octet)$/;"	v
mysql_enabled	../bigbang.py	/^    mysql_enabled = myvars[mysqlenlabel]$/;"	v
mysqlenlabel	../bigbang.py	/^mysqlenlabel    = 'MySqlEnabled'$/;"	v
myvars	../bigbang.py	/^        myvars = yaml.load(mypf, Loader = yaml.FullLoader)$/;"	v
myvarsbf	../bigbang.py	/^myvarsbf        = "my-vars.yaml"$/;"	v
myvarsf	../bigbang.py	/^myvarsf         = bbio.where("my-vars.yaml")$/;"	v
namespace	../bigbang.py	/^namespace      = "starburst"$/;"	v
newconnectionpause	loadgen.py	/^newconnectionpause = 0.1$/;"	v
newquerypause	loadgen.py	/^newquerypause = 0.0$/;"	v
nobastionfw	../bigbang.py	/^    nobastionfw  = myvars["DisableBastionFw"] or ns.disable_bastion_fw$/;"	v
nodeCount	../bigbang.py	/^    nodeCount    = myvars[nodecountlabel] # NodeCount$/;"	v
nodeIsTainted	../capcalc.py	/^def nodeIsTainted(node: dict) -> bool:$/;"	f	typeref:typename:bool
node_set_is_valid	test_harness.py	/^def node_set_is_valid(nodes: set[str]) -> bool:$/;"	f	typeref:typename:bool
nodecountlabel	../bigbang.py	/^nodecountlabel  = "NodeCount"$/;"	v
normaliseCpu	../capcalc.py	/^def normaliseCpu(cpu) -> int:$/;"	f	typeref:typename:int
normaliseMem	../capcalc.py	/^def normaliseMem(mem) -> int:$/;"	f	typeref:typename:int
nq	loadgen.py	/^nq = Counter()$/;"	v
ns	../bigbang.py	/^ns = p.parse_args()$/;"	v
numberOfContainers	../capcalc.py	/^def numberOfContainers(numNodes: int) -> int:$/;"	f	typeref:typename:int
numberOfReplicas	../capcalc.py	/^def numberOfReplicas(numNodes: int) -> int:$/;"	f	typeref:typename:int
numloops	summarise.py	/^numloops=1$/;"	v
numloops	test_harness.py	/^numloops = 1$/;"	v
numthreadcount	summarise.py	/^numthreadcount = 8$/;"	v
octet	../bigbang.py	/^octet = int(hashlib.sha256(s.encode('utf-8')).hexdigest(), 16) % 256$/;"	v
okta_re	../creds.py	/^okta_re = re.compile('^\\[(\\d)\\] Okta')$/;"	v
p	../bigbang.py	/^p = argparse.ArgumentParser(description=$/;"	v
parameteriseTemplate	../bigbang.py	/^def parameteriseTemplate(template: str, targetDir: str, varsDict: dict,$/;"	f	typeref:typename:tuple[bool,str]
perftest	../bigbang.py	/^    perftest     = myvars[perftestlabel] # PerformanceTesting$/;"	v
perftestlabel	../bigbang.py	/^perftestlabel   = "PerformanceTesting"$/;"	v
planWorkerSize	../capcalc.py	/^def planWorkerSize(namespace: str, cachesrv_enabled: bool, hms_enabled: bool,$/;"	f	typeref:typename:dict
podHasSufficientResource	../capcalc.py	/^def podHasSufficientResource(podname: str, podcpu: int, podmem: int) -> bool:$/;"	f	typeref:typename:bool
portoffset	../bigbang.py	/^portoffset = { "aws": 0, "az": 1, "gcp": 2 }$/;"	v
postgres_enabled	../bigbang.py	/^    postgres_enabled = myvars[postgresenlabel]$/;"	v
postgresenlabel	../bigbang.py	/^postgresenlabel = 'PostgreSqlEnabled'$/;"	v
prefix_re	test_harness.py	/^def prefix_re(nworkers: int):$/;"	f
prefix_regexp	test_harness.py	/^def prefix_regexp(nworkers: int) -> str:$/;"	f	typeref:typename:str
processSqlCommand	../cmdgrp.py	/^    def processSqlCommand(self, cmd: str, callback = None) -> None:$/;"	m	class:CommandGroup	typeref:typename:None
processSqlTableCommand	../cmdgrp.py	/^    def processSqlTableCommand(self, srcTable: str, dstCatalog: str,$/;"	m	class:CommandGroup	typeref:typename:None
queries	loadgen.py	/^queries = [ "select max(nationkey) from s3.s.nation",$/;"	v
randomString	../out.py	/^def randomString(length: int) -> str:$/;"	f	typeref:typename:str
range	../tpc.py	/^    def range(self, first: str, last: str) -> set[str]:$/;"	m	class:ScaleSets	typeref:typename:set[str]
ratioDone	../cmdgrp.py	/^    def ratioDone(self) -> float:$/;"	m	class:CommandGroup	typeref:typename:float
readableDir	../bbio.py	/^def readableDir(p) -> bool:$/;"	f	typeref:typename:bool
readableFile	../bbio.py	/^def readableFile(p) -> bool:$/;"	f	typeref:typename:bool
region	../bigbang.py	/^region = getRegionFromZone(zone)$/;"	v
releases	../bigbang.py	/^releases = {}$/;"	v
removeOldVersions	../bigbang.py	/^def removeOldVersions(yamltmp: str, similar: str) -> None:$/;"	f	typeref:typename:None
renew_creds_async	../creds.py	/^def renew_creds_async():$/;"	f
renew_creds_now	../creds.py	/^def renew_creds_now() -> None:$/;"	f	typeref:typename:None
renew_creds_sync	../creds.py	/^def renew_creds_sync() -> None:$/;"	f	typeref:typename:None
replaceFile	../bigbang.py	/^def replaceFile(filepath, contents) -> bool:$/;"	f	typeref:typename:bool
replicasPerPod	../capcalc.py	/^def replicasPerPod(podname: str, numNodes: int) -> int:$/;"	f	typeref:typename:int
repo	../bigbang.py	/^    repo         = myvars["HelmRepo"]$/;"	v
repoloc	../bigbang.py	/^    repoloc      = myvars["HelmRepoLocation"]$/;"	v
repopass	../bigbang.py	/^    repopass     = helmcreds["HelmRepoPassword"]$/;"	v
reportingpause	loadgen.py	/^reportingpause = 1.0$/;"	v
repouser	../bigbang.py	/^    repouser     = helmcreds["HelmRepoUser"]$/;"	v
requireKey	../bigbang.py	/^def requireKey(key: str, d: dict[str, Any]):$/;"	f
resourcegrp	../bigbang.py	/^resourcegrp = shortname + "rg"$/;"	v
retryHttp	../sql.py	/^def retryHttp(f, maxretries: int, descr: str) -> requests.Response:$/;"	f	typeref:typename:requests.Response
retryRun	../run.py	/^def retryRun(f: Callable[[], subprocess.CompletedProcess], maxretries: int,$/;"	f	typeref:typename:subprocess.CompletedProcess
rsa	../bigbang.py	/^rsa            = os.path.expanduser("~\/.ssh\/id_rsa")$/;"	v
rsaPub	../bigbang.py	/^rsaPub         = os.path.expanduser("~\/.ssh\/id_rsa.pub")$/;"	v
run	../run.py	/^def run(args, check = True, verbose = True) -> subprocess.CompletedProcess:$/;"	f	typeref:typename:subprocess.CompletedProcess
runCollect	../run.py	/^def runCollect(args) -> str:$/;"	f	typeref:typename:str
runShell	../run.py	/^def runShell(cmd: str) -> int:$/;"	f	typeref:typename:int
runStdout	../run.py	/^def runStdout(args):$/;"	f
runTry	../run.py	/^def runTry(args) -> subprocess.CompletedProcess:$/;"	f	typeref:typename:subprocess.CompletedProcess
runme	loadgen.py	/^def runme():$/;"	f
s	../bigbang.py	/^s = username + zone$/;"	v
salesforcelabel	../bigbang.py	/^salesforcelabel = "SalesforceEnabled"$/;"	v
scale_sets	../tpc.py	/^    scale_sets: dict[str, dict[str, int]] = {$/;"	v	class:TpcCatInfo	typeref:typename:dict[str, dict[str, int]]
scale_sets	../tpc.py	/^scale_sets = ScaleSets()$/;"	v
secrets	../bigbang.py	/^secrets: dict[str, dict[str, str]] = {}$/;"	v	typeref:typename:dict[str, dict[str, str]]
secretsbf	../bigbang.py	/^secretsbf    = "secrets.yaml"$/;"	v
secretsf	../bigbang.py	/^secretsf     = bbio.where(secretsbf)$/;"	v
sendSql	../sql.py	/^def sendSql(url: str, ssl: bool, user: str, pwd: str, command: str,$/;"	f	typeref:typename:list
send_email	test_harness.py	/^def send_email(address, body):$/;"	f
services	../bigbang.py	/^services = ['starburst']$/;"	v
setRoute53Cname	../bigbang.py	/^def setRoute53Cname(lbs: dict[str, str], route53ZoneId: str,$/;"	f	typeref:typename:None
sfdccat	../bigbang.py	/^sfdccat        = "sfdc"$/;"	v
sfdccreds	../bigbang.py	/^            sfdccreds = yaml.load(mypf, Loader = yaml.FullLoader)$/;"	v
sfdccredsf	../bigbang.py	/^    sfdccredsf  = bbio.where("sfdc-creds.yaml")$/;"	v
sfdcenabled	../bigbang.py	/^    sfdcenabled  = myvars[salesforcelabel] # SalesforceEnabled$/;"	v
shortname	../bigbang.py	/^shortname = code + str(octet).zfill(3)$/;"	v
sizes	summarise.py	/^sizes = (1, 10, 100, 200, 400)$/;"	v
sizes_str	summarise.py	/^sizes_str = list(map(str, sizes))$/;"	v
smallInstanceType	../bigbang.py	/^    smallInstanceType = myvars["AwsSmallInstanceType"]$/;"	v
smallInstanceType	../bigbang.py	/^    smallInstanceType = myvars["AzureSmallVmType"]$/;"	v
smallInstanceType	../bigbang.py	/^    smallInstanceType = myvars["GcpSmallMachineType"]$/;"	v
smallInstanceType	../bigbang.py	/^smallInstanceType = ""$/;"	v
smallest	../tpc.py	/^    def smallest(self) -> str:$/;"	m	class:ScaleSets	typeref:typename:str
spinWait	../out.py	/^def spinWait(waitFunc: Callable[[], float]) -> None:$/;"	f	typeref:typename:None
spinWaitTest	../out.py	/^def spinWaitTest():$/;"	f
sqlstr	../out.py	/^sqlstr = "Issued 🢩 "$/;"	v
ss_list	../tpc.py	/^    ss_list: List[str] = [$/;"	v	class:ScaleSets	typeref:typename:List[str]
starburstfqdn	../bigbang.py	/^starburstfqdn  = "starburst." + domain$/;"	v
startPortForwardToLBs	../bigbang.py	/^def startPortForwardToLBs(bastionIp: str, route53ZoneId: str) -> list[Tunnel]:$/;"	f	typeref:typename:list[Tunnel]
stddev_997pct	test_harness.py	/^stddev_997pct = 3$/;"	v
storageacct	../bigbang.py	/^storageacct = shortname + "sa"$/;"	v
svcStart	../bigbang.py	/^def svcStart(perftest: bool, credobj: Optional[creds.Creds] = None,$/;"	f	typeref:typename:tuple[list[Tunnel],list[str]]
svcStop	../bigbang.py	/^def svcStop(perf_test: bool, onlyEmptyNodes: bool = False) -> None:$/;"	f	typeref:typename:None
svcports	../bigbang.py	/^svcports    = {$/;"	v
synapseslcat	../bigbang.py	/^synapseslcat   = "synapse_sl"$/;"	v
syscat	../bigbang.py	/^syscat         = "system"$/;"	v
t	loadgen.py	/^        t = threading.Thread(target = runme)$/;"	v
table_names	../tpc.py	/^    table_names: Set[str] = {'customer', 'inventory', 'reason',$/;"	v	class:TpcCatInfo	typeref:typename:Set[str]
target	../bigbang.py	/^        target = ns.target$/;"	v
target	../bigbang.py	/^    target = myvars[targetlabel]$/;"	v
targetlabel	../bigbang.py	/^targetlabel     = "Target"$/;"	v
tblfmt	../capcalc.py	/^tblfmt = "psql"$/;"	v
templatedir	../bigbang.py	/^templatedir    = bbio.where("templates")$/;"	v
templates	../bigbang.py	/^templates = {}$/;"	v
testrun_add_re	test_harness.py	/^testrun_add_re = re.compile(r'^(summary\\s+\\+\\s+)(\\d+)(.*)$')$/;"	v
testrun_re	test_harness.py	/^testrun_re = re.compile(r'^(summary\\s+=\\s+)(\\d+)(.*)$')$/;"	v
tf	../bigbang.py	/^tf    = f"terraform -chdir={tfdir}"$/;"	v
tfdir	../bigbang.py	/^tfdir = bbio.where(target)$/;"	v
tfvars	../bigbang.py	/^tfvars         = "variables.tf" # basename only, no path!$/;"	v
threadpoolsize	loadgen.py	/^threadpoolsize = 200$/;"	v
threads	loadgen.py	/^threads: list[threading.Thread] = []$/;"	v	typeref:typename:list[threading.Thread]
threads	summarise.py	/^threads = list(map(lambda x: 2**x, range(numthreadcount)))$/;"	v
tlscoord	../bigbang.py	/^    tlscoord     = myvars[tlscoordlabel] # RequireCoordTls$/;"	v
tlscoordlabel	../bigbang.py	/^tlscoordlabel   = "RequireCoordTls"$/;"	v
tlsenabled	../bigbang.py	/^def tlsenabled() -> bool: return ingresslb or tlscoord$/;"	f	typeref:typename:bool
tmpdir	../bigbang.py	/^tmpdir         = "\/tmp"$/;"	v
toDict	../creds.py	/^    def toDict(self) -> dict[str, str]:$/;"	m	class:AwsCreds	typeref:typename:dict[str,str]
toDict	../creds.py	/^    def toDict(self) -> dict[str, str]:$/;"	m	class:Creds	typeref:typename:dict[str,str]
tpccats	../tpc.py	/^tpccats  = {tpchcat, tpcdscat}$/;"	v
tpcds_queries	../tpc.py	/^tpcds_queries = { 'q01.sql', 'q02.sql', 'q03.sql', 'q04.sql', 'q05.sql',$/;"	v
tpcdsbigschema	../bigbang.py	/^tpcdsbigschema = tpc.scale_sets.smallest()$/;"	v
tpcdscat	../tpc.py	/^tpcdscat = "tpcds"$/;"	v
tpcdssmlschema	../bigbang.py	/^tpcdssmlschema = tpcdsbigschema$/;"	v
tpchbigschema	../bigbang.py	/^tpchbigschema  = tpc.scale_sets.smallest()$/;"	v
tpchcat	../tpc.py	/^tpchcat  = "tpch"$/;"	v
tpchsmlschema	../bigbang.py	/^tpchsmlschema  = tpchbigschema$/;"	v
trinopass	../bigbang.py	/^trinopass      = "test"$/;"	v
trinouser	../bigbang.py	/^trinouser      = "starburst_service"$/;"	v
updateKubeConfig	../bigbang.py	/^def updateKubeConfig() -> None:$/;"	f	typeref:typename:None
upstrBastion	../bigbang.py	/^        upstrBastion = ipaddress.IPv4Address(ns.bastion)$/;"	v
upstrBastion	../bigbang.py	/^upstrBastion = None$/;"	v
upstreamSG	../bigbang.py	/^    upstreamSG = True$/;"	v
upstreamSG	../bigbang.py	/^upstreamSG = False$/;"	v
username	../bigbang.py	/^username = re.sub(invalidchars, "-", emailparts[0]).lower()$/;"	v
v	../bigbang.py	/^    v = vars(ns)$/;"	v
validchars	../bigbang.py	/^validchars = r"a-zA-Z0-9"$/;"	v
waitOnAllCopies	../cmdgrp.py	/^    def waitOnAllCopies(self) -> None:$/;"	m	class:CommandGroup	typeref:typename:None
waitUntilApiServerResponding	../bigbang.py	/^def waitUntilApiServerResponding() -> float:$/;"	f	typeref:typename:float
waitUntilDeploymentsAvail	../bigbang.py	/^def waitUntilDeploymentsAvail(namespace: str, minreplicas: int = 0) -> float:$/;"	f	typeref:typename:float
waitUntilLoadBalancersUp	../bigbang.py	/^def waitUntilLoadBalancersUp(services: list, namespace: str,$/;"	f	typeref:typename:float
waitUntilNodesReady	../bigbang.py	/^def waitUntilNodesReady(minNodes: int) -> float:$/;"	f	typeref:typename:float
waitUntilPodsReady	../bigbang.py	/^def waitUntilPodsReady(namespace: str, mincontainers: int = 0) -> float:$/;"	f	typeref:typename:float
wait_until_cluster_stable	test_harness.py	/^def wait_until_cluster_stable(nworkers: int) -> tuple[set[str], set[str]]:$/;"	f	typeref:typename:tuple[set[str],set[str]]
where	../bbio.py	/^def where(leaf):$/;"	f
writeableDir	../bbio.py	/^def writeableDir(p) -> bool: $/;"	f	typeref:typename:bool
zone	../bigbang.py	/^        zone = ns.zone$/;"	v
zone	../bigbang.py	/^    zone = myvars["Zone"]$/;"	v
